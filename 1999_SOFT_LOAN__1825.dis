// fn1825_000A
// Return size: 4
define fn1825_000A
fn1825_000A_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l1825_000A
l1825_000A:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 4<16>
	SCZO = cond(sp)
	call fn1F38_0517 (retsize: 4;)
	al = ah
	ah = ah - ah
	SCZO = cond(ah)
	Mem0[ds:0xC0C<16>:word16] = ax
	call fn1F38_0517 (retsize: 4;)
	ah = ah - ah
	SCZO = cond(ah)
	Mem0[ds:0xC0E<16>:word16] = ax
	SCZO = cond(Mem0[ds:0x8F8<16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_0039
	// succ:  l1825_002D l1825_0039
l1825_002D:
	ax = 0x8F6<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1825_22BC (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	// succ:  l1825_0039
l1825_0039:
	SCZO = cond(Mem0[ds:0xEE4<16>:word16] - 0<16>)
	branch Test(NE,Z) l1825_0053
	// succ:  l1825_0040 l1825_0053
l1825_0040:
	ax = 0x8F6<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1825_0DA8 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = ax | ax
	SZ = cond(ax)
	O = false
	C = false
	branch Test(NE,Z) l1825_0053
	// succ:  l1825_0050 l1825_0053
l1825_0050:
	goto l1825_0171
	// succ:  l1825_0171
l1825_0053:
	ax = Mem0[ds:0x13F4<16>:word16]
	Mem0[ds:0xA28<16>:word16] = ax
	ax = Mem0[ds:0x209A<16>:word16]
	Mem0[ds:0xA2A<16>:word16] = ax
	Mem0[ds:0x209A<16>:word16] = 1<16>
	call fn1825_70D4 (retsize: 4;)
	v15 = Mem0[ds:0xEE6<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v15
	call fn1825_7078 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	SCZO = cond(Mem0[ds:0xF02<16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_0098
	// succ:  l1825_007B l1825_0098
l1825_007B:
	v16 = Mem0[ds:0xF02<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v16
	call fn21DC_097E (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	Mem0[ds:0x914<16>:word16] = ax
	Mem0[ds:0x916<16>:word16] = dx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_0A29 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	// succ:  l1825_0098
l1825_0098:
	SCZO = cond(Mem0[ds:0xEE4<16>:word16] - 2<16>)
	branch Test(NE,Z) l1825_00D3
	// succ:  l1825_009F l1825_00D3
l1825_009F:
	Mem0[ds:0x90E<16>:word16] = 0<16>
	Mem0[ds:0x910<16>:word16] = 0<16>
	Mem0[ds:0x8FA<16>:word16] = 1<16>
	Mem0[ds:0x8FC<16>:word16] = 0<16>
	Mem0[ds:0x902<16>:word16] = 1<16>
	Mem0[ds:0x904<16>:word16] = 0<16>
	ax = 0x8F6<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x21<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1825_6D08 (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	// succ:  l1825_00D3
l1825_00D3:
	Mem0[ss:bp - 2<i16>:word16] = 1<16>
	Mem0[ss:bp - 4<i16>:word16] = 1<16>
	goto l1825_0102
	// succ:  l1825_0102
l1825_00E0:
	ax = 0x8F6<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1825_017A (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 4<i16>:word16] = ax
	ax = ax | ax
	SZ = cond(ax)
	O = false
	C = false
	branch Test(EQ,Z) l1825_0102
	// succ:  l1825_00F3 l1825_0102
l1825_00F3:
	ax = 0x8F6<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1825_0AA6 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 2<i16>:word16] = ax
	// succ:  l1825_0102
l1825_0102:
	SCZO = cond(Mem0[ss:bp - 2<i16>:word16] - 0<16>)
	branch Test(NE,Z) l1825_00E0
	// succ:  l1825_0108 l1825_00E0
l1825_0108:
	ax = 0x8F6<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1825_6D80 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	SCZO = cond(Mem0[ds:0xF02<16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_013F
	// succ:  l1825_011B l1825_013F
l1825_011B:
	v18 = Mem0[ds:0x916<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v18
	v19 = Mem0[ds:0x914<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v19
	call fn1F38_0A4C (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	v20 = Mem0[ds:0xF02<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v20
	v21 = Mem0[ds:0x916<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v21
	v22 = Mem0[ds:0x914<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v22
	call fn21DC_09B4 (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	// succ:  l1825_013F
l1825_013F:
	call fn1825_7106 (retsize: 4;)
	v23 = Mem0[ds:0xC0E<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v23
	v24 = Mem0[ds:0xC0C<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v24
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = Mem0[ds:0xA2A<16>:word16]
	Mem0[ds:0x209A<16>:word16] = ax
	v25 = Mem0[ds:0xA28<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v25
	call fn1F38_0527 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	ax = Mem0[ds:0xA28<16>:word16]
	Mem0[ds:0x13F4<16>:word16] = ax
	ax = Mem0[ds:0x8F6<16>:word16]
	Mem0[ds:0xEE4<16>:word16] = ax
	// succ:  l1825_0171
l1825_0171:
	call fn21DC_0D60 (retsize: 4;)
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_000A_exit
fn1825_000A_exit:


// fn1825_017A
// Return size: 4
define fn1825_017A
fn1825_017A_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l1825_017A
l1825_017A:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0xA<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 6<i16>:word16] = 0<16>
	Mem0[ss:bp - 8<i16>:word16] = 1<16>
	Mem0[ss:bp - 2<i16>:word16] = 0<16>
	Mem0[ss:bp - 4<i16>:word16] = 1<16>
	Mem0[ss:bp - 10<i16>:word16] = 0<16>
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 1<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	SCZO = cond(Mem0[ds:0xF02<16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_01C4
	// succ:  l1825_01AF l1825_01C4
l1825_01AF:
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	v13 = Mem0[es:bx + 32<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v13
	v14 = Mem0[es:bx + 30<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v14
	call fn1F38_0A4C (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	goto l1825_01C9
	// succ:  l1825_01C9
l1825_01C4:
	call fn1F38_094C (retsize: 4;)
	// succ:  l1825_01C9
l1825_01C9:
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	es_bx = Mem0[es:bx + 98<i16>:segptr32]
	SCZO = cond(Mem0[es:bx:word16] - 0<16>)
	branch Test(EQ,Z) l1825_01E3
	// succ:  l1825_01D6 l1825_01E3
l1825_01D6:
	v15 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v15
	v16 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v16
	call fn1825_2020 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	// succ:  l1825_01E3
l1825_01E3:
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	SCZO = cond(Mem0[es:bx + 6<i16>:word16] - 0<16>)
	branch Test(NE,Z) l1825_0222
	// succ:  l1825_01ED l1825_0222
l1825_01ED:
	SCZO = cond(Mem0[es:bx + 14<i16>:word16] - 0<16>)
	branch Test(NE,Z) l1825_0222
	// succ:  l1825_01F4 l1825_0222
l1825_01F4:
	SCZO = cond(Mem0[es:bx + 4<i16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_0204
	// succ:  l1825_01FB l1825_0204
l1825_01FB:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = es
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bx
	call fn1825_02F0 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	// succ:  l1825_0204
l1825_0204:
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	SCZO = cond(Mem0[es:bx + 12<i16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_021A
	// succ:  l1825_020E l1825_021A
l1825_020E:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = es
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bx
	call fn1825_05F2 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 2<i16>:word16] = ax
	// succ:  l1825_021A
l1825_021A:
	Mem0[ss:bp - 6<i16>:word16] = 1<16>
	goto l1825_02BC
	// succ:  l1825_02BC
l1825_0222:
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	SCZO = cond(Mem0[es:bx + 4<i16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_0235
	// succ:  l1825_022C l1825_0235
l1825_022C:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = es
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bx
	call fn1825_02F0 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	// succ:  l1825_0235
l1825_0235:
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	SCZO = cond(Mem0[es:bx + 6<i16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_024B
	// succ:  l1825_023F l1825_024B
l1825_023F:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = es
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bx
	call fn1825_037E (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 8<i16>:word16] = ax
	// succ:  l1825_024B
l1825_024B:
	SCZO = cond(Mem0[ss:bp - 8<i16>:word16] - 0x14<16>)
	branch Test(EQ,Z) l1825_028A
	// succ:  l1825_0251 l1825_028A
l1825_0251:
	SCZO = cond(Mem0[ss:bp - 8<i16>:word16] - 0xBB8<16>)
	branch Test(EQ,Z) l1825_028A
	// succ:  l1825_0258 l1825_028A
l1825_0258:
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	SCZO = cond(Mem0[es:bx + 12<i16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_026E
	// succ:  l1825_0262 l1825_026E
l1825_0262:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = es
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bx
	call fn1825_05F2 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 2<i16>:word16] = ax
	// succ:  l1825_026E
l1825_026E:
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	SCZO = cond(Mem0[es:bx + 14<i16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_028A
	// succ:  l1825_0278 l1825_028A
l1825_0278:
	SCZO = cond(Mem0[ss:bp - 2<i16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_028A
	// succ:  l1825_027E l1825_028A
l1825_027E:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = es
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bx
	call fn1825_06E0 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 8<i16>:word16] = ax
	// succ:  l1825_028A
l1825_028A:
	SCZO = cond(Mem0[ss:bp - 8<i16>:word16] - 6<16>)
	branch Test(NE,Z) l1825_02BC
	// succ:  l1825_0290 l1825_02BC
l1825_0290:
	Mem0[ss:bp - 6<i16>:word16] = 1<16>
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	Mem0[es:bx + 26<i16>:word16] = 0<16>
	Mem0[es:bx + 24<i16>:word16] = 0<16>
	Mem0[ds:0x95E<16>:word16] = 0<16>
	Mem0[ds:0x982<16>:word16] = 0<16>
	Mem0[ds:0x9A6<16>:word16] = 0<16>
	Mem0[ds:0x9CA<16>:word16] = 0<16>
	// succ:  l1825_02BC
l1825_02BC:
	SCZO = cond(Mem0[ss:bp - 6<i16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_02E9
	// succ:  l1825_02C2 l1825_02E9
l1825_02C2:
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	ax = Mem0[es:bx + 8<i16>:word16]
	cx = ax
	ax = ax << 1<16>
	SCZO = cond(ax)
	ax = ax << 1<16>
	SCZO = cond(ax)
	ax = ax + cx
	SCZO = cond(ax)
	ax = ax << 1<16>
	SCZO = cond(ax)
	ax = ax + 0xA<16>
	SCZO = cond(ax)
	Mem0[es:bx + 22<i16>:word16] = ax
	SCZO = cond(Mem0[ss:bp - 2<i16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_02E9
	// succ:  l1825_02E0 l1825_02E9
l1825_02E0:
	ax = Mem0[es:bx + 16<i16>:word16]
	ax = ax + 1<16>
	SZO = cond(ax)
	v19 = Mem0[es:bx + 22<i16>:word16] + ax
	Mem0[es:bx + 22<i16>:word16] = v19
	SCZO = cond(v19)
	// succ:  l1825_02E9
l1825_02E9:
	ax = Mem0[ss:bp - 6<i16>:word16]
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_017A_exit
fn1825_017A_exit:


// fn1825_02F0
// Return size: 4
define fn1825_02F0
fn1825_02F0_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l1825_02F0
l1825_02F0:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0xC<16>
	SCZO = cond(sp)
	ax = Mem0[ss:bp + 6<i16>:word16]
	dx = Mem0[ss:bp + 8<i16>:word16]
	ax = ax + 0x22<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1825_0A7A (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 2<i16>:word16] = ax
	Mem0[ss:bp - 8<i16>:word16] = 0<16>
	Mem0[ss:bp - 6<i16>:word16] = 0<16>
	Mem0[ss:bp - 4<i16>:word16] = 0<16>
	goto l1825_0371
	// succ:  l1825_0371
l1825_031C:
	v10 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v10
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = Mem0[ss:bp - 4<i16>:word16]
	ax = ax << 1<16>
	SCZO = cond(ax)
	ax = ax << 1<16>
	SCZO = cond(ax)
	ax = ax + Mem0[ss:bp + 6<i16>:word16]
	SCZO = cond(ax)
	dx = Mem0[ss:bp + 8<i16>:word16]
	ax = ax + 0x22<16>
	SCZO = cond(ax)
	Mem0[ss:bp - 12<i16>:word16] = ax
	Mem0[ss:bp - 10<i16>:word16] = dx
	es_bx = Mem0[ss:bp - 12<i16>:segptr32]
	v14 = Mem0[es:bx + 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v14
	v15 = Mem0[es:bx:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v15
	call fn2017_03F5 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 8<i16>:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	es_bx = Mem0[ss:bp - 12<i16>:segptr32]
	v16 = Mem0[es:bx + 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v16
	v17 = Mem0[es:bx:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v17
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	ax = Mem0[ss:bp - 8<i16>:word16]
	v18 = Mem0[ss:bp - 6<i16>:word16] + ax
	Mem0[ss:bp - 6<i16>:word16] = v18
	SCZO = cond(v18)
	v19 = Mem0[ss:bp - 4<i16>:word16] + 1<16>
	Mem0[ss:bp - 4<i16>:word16] = v19
	SZO = cond(v19)
	// succ:  l1825_0371
l1825_0371:
	ax = Mem0[ss:bp - 2<i16>:word16]
	SCZO = cond(Mem0[ss:bp - 4<i16>:word16] - ax)
	branch Test(ULT,C) l1825_031C
	// succ:  l1825_0379 l1825_031C
l1825_0379:
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_02F0_exit
fn1825_02F0_exit:


// fn1825_037E
// Return size: 4
define fn1825_037E
fn1825_037E_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l1825_037E
l1825_037E:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x16<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	Mem0[ss:bp - 14<i16>:word16] = 0<16>
	Mem0[ss:bp - 12<i16>:word16] = 1<16>
	ax = Mem0[ss:bp + 6<i16>:word16]
	dx = Mem0[ss:bp + 8<i16>:word16]
	ax = ax + 0x22<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1825_0A7A (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 2<i16>:word16] = ax
	Mem0[ss:bp - 18<i16>:word16] = 0<16>
	Mem0[ss:bp - 6<i16>:word16] = 0<16>
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	ax = Mem0[es:bx + 8<i16>:word16]
	Mem0[ss:bp - 8<i16>:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_0527 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 10<i16>:word16] = 0<16>
	// succ:  l1825_03C8
l1825_03C8:
	v13 = Mem0[ss:bp - 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v13
	v14 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v14
	v15 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v15
	call fn1825_0A00 (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 16<i16>:word16] = ax
	call fn1F38_07FA (retsize: 4;)
	v16 = Mem0[ss:bp - 16<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v16
	v17 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v17
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = Mem0[ss:bp - 8<i16>:word16]
	ax = ax << 1<16>
	SCZO = cond(ax)
	ax = ax << 1<16>
	SCZO = cond(ax)
	ax = ax + Mem0[ss:bp + 6<i16>:word16]
	SCZO = cond(ax)
	dx = Mem0[ss:bp + 8<i16>:word16]
	ax = ax + 0x22<16>
	SCZO = cond(ax)
	Mem0[ss:bp - 22<i16>:word16] = ax
	Mem0[ss:bp - 20<i16>:word16] = dx
	es_bx = Mem0[ss:bp - 22<i16>:segptr32]
	v18 = Mem0[es:bx + 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v18
	v19 = Mem0[es:bx:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v19
	call fn2017_03F5 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 18<i16>:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	es_bx = Mem0[ss:bp - 22<i16>:segptr32]
	v20 = Mem0[es:bx + 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v20
	v21 = Mem0[es:bx:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v21
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	call fn1F38_0CC5 (retsize: 4;)
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 8<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn3431_07B6 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 12<i16>:word16] = ax
	call fn1F38_07E7 (retsize: 4;)
	v22 = Mem0[ss:bp - 16<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v22
	v23 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v23
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	v24 = Mem0[ss:bp - 18<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v24
	es_bx = Mem0[ss:bp - 22<i16>:segptr32]
	v25 = Mem0[es:bx + 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v25
	v26 = Mem0[es:bx:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v26
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	ax = Mem0[ss:bp - 12<i16>:word16]
	ax = ax - 1<16>
	SCZO = cond(ax)
	v29 = ax
	SCZO = cond(ax - 0x13<16>)
	branch Test(ULE,CZ) l1825_0479
	// succ:  l1825_0476 l1825_0479
l1825_0476:
	goto l1825_05D4
	// succ:  l1825_05D4
l1825_0479:
	ax = ax + ax
	SCZO = cond(ax)
	v28 = bx
	bx = ax
	ax = v28
	switch (v29) { l1825_049A l1825_04E2 l1825_05D4 l1825_05D4 l1825_05D4 l1825_050A l1825_0550 l1825_0590 l1825_059C l1825_05A4 l1825_05D4 l1825_05D4 l1825_05D4 l1825_05D4 l1825_05D4 l1825_05D4 l1825_05D4 l1825_05D4 l1825_05D4 l1825_0482 }
	// succ:  l1825_049A l1825_04E2 l1825_05D4 l1825_05D4 l1825_05D4 l1825_050A l1825_0550 l1825_0590 l1825_059C l1825_05A4 l1825_05D4 l1825_05D4 l1825_05D4 l1825_05D4 l1825_05D4 l1825_05D4 l1825_05D4 l1825_05D4 l1825_05D4 l1825_0482
l1825_0482:
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	ax = Mem0[ss:bp - 8<i16>:word16]
	Mem0[es:bx + 8<i16>:word16] = ax
	Mem0[es:bx + 16<i16>:word16] = 0<16>
	Mem0[es:bx + 22<i16>:word16] = 0<16>
	goto l1825_04DA
	// succ:  l1825_04DA
l1825_049A:
	ax = Mem0[ss:bp - 12<i16>:word16]
	Mem0[ds:0x966<16>:word16] = ax
	ax = 0x95C<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v39 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v39
	v40 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v40
	call fn1825_6B02 (retsize: 4;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 12<i16>:word16] = ax
	SCZO = cond(ax - 0xBB8<16>)
	branch Test(EQ,Z) l1825_04BD
	// succ:  l1825_04BA l1825_04BD
l1825_04BA:
	goto l1825_05D4
	// succ:  l1825_05D4
l1825_04BD:
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	Mem0[es:bx + 24<i16>:word16] = 1<16>
	ax = Mem0[ss:bp - 8<i16>:word16]
	cx = ax
	ax = ax << 1<16>
	SCZO = cond(ax)
	ax = ax << 1<16>
	SCZO = cond(ax)
	ax = ax + cx
	SCZO = cond(ax)
	ax = ax << 1<16>
	SCZO = cond(ax)
	ax = ax + 0xA<16>
	SCZO = cond(ax)
	Mem0[es:bx + 28<i16>:word16] = ax
	// succ:  l1825_04DA
l1825_04DA:
	Mem0[ss:bp - 10<i16>:word16] = 1<16>
	goto l1825_05D4
	// succ:  l1825_05D4
l1825_04E2:
	ax = 1<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp + 6<i16>:word16]
	dx = Mem0[ss:bp + 8<i16>:word16]
	ax = ax + 0x22<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1825_66D4 (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 4<i16>:word16] = ax
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(GT,SZO) l1825_0503
	// succ:  l1825_0500 l1825_0503
l1825_0500:
	goto l1825_05D4
	// succ:  l1825_05D4
l1825_0503:
	Mem0[ss:bp - 8<i16>:word16] = ax
	goto l1825_05D4
	// succ:  l1825_05D4
l1825_050A:
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	ax = Mem0[ss:bp - 8<i16>:word16]
	Mem0[es:bx + 8<i16>:word16] = ax
	si = ax
	si = si << 1<16>
	SCZO = cond(si)
	si = si << 1<16>
	SCZO = cond(si)
	es_bx = Mem0[es:bx + 62<i16> + si:segptr32]
	ax = Mem0[es:bx:word16]
	ax = ax | Mem0[es:bx + 2<i16>:word16]
	SZ = cond(ax)
	O = false
	C = false
	branch Test(EQ,Z) l1825_0538
	// succ:  l1825_0527 l1825_0538
l1825_0527:
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	// succ:  l1825_052A
l1825_052A:
	Mem0[es:bx + 12<i16>:word16] = 1<16>
	Mem0[es:bx + 14<i16>:word16] = 1<16>
	goto l1825_04DA
	// succ:  l1825_04DA
l1825_0538:
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	Mem0[es:bx + 12<i16>:word16] = 0<16>
	Mem0[es:bx + 14<i16>:word16] = 0<16>
	Mem0[es:bx + 16<i16>:word16] = 0<16>
	goto l1825_04DA
	// succ:  l1825_04DA
l1825_0550:
	SCZO = cond(Mem0[ss:bp - 8<i16>:word16] - 1<16>)
	branch Test(LT,SO) l1825_05D4
	// succ:  l1825_0556 l1825_05D4
l1825_0556:
	v34 = Mem0[ss:bp - 8<i16>:word16] - 1<16>
	Mem0[ss:bp - 8<i16>:word16] = v34
	SZO = cond(v34)
	// succ:  l1825_0559
l1825_0559:
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	SCZO = cond(Mem0[es:bx + 20<i16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_05D4
	// succ:  l1825_0563 l1825_05D4
l1825_0563:
	si = Mem0[ss:bp - 8<i16>:word16]
	si = si << 1<16>
	SCZO = cond(si)
	si = si << 1<16>
	SCZO = cond(si)
	es_bx = Mem0[es:bx + 62<i16> + si:segptr32]
	ax = Mem0[es:bx:word16]
	ax = ax | Mem0[es:bx + 2<i16>:word16]
	SZ = cond(ax)
	O = false
	C = false
	branch Test(EQ,Z) l1825_05D4
	// succ:  l1825_0577 l1825_05D4
l1825_0577:
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	ax = Mem0[ss:bp - 8<i16>:word16]
	Mem0[es:bx + 8<i16>:word16] = ax
	Mem0[es:bx + 4<i16>:word16] = 1<16>
	Mem0[es:bx + 6<i16>:word16] = 0<16>
	goto l1825_052A
	// succ:  l1825_052A
l1825_0590:
	SCZO = cond(Mem0[ss:bp - 8<i16>:word16] - 5<16>)
	branch Test(GE,SO) l1825_05D4
	// succ:  l1825_0596 l1825_05D4
l1825_0596:
	v33 = Mem0[ss:bp - 8<i16>:word16] + 1<16>
	Mem0[ss:bp - 8<i16>:word16] = v33
	SZO = cond(v33)
	goto l1825_0559
	// succ:  l1825_0559
l1825_059C:
	Mem0[ss:bp - 8<i16>:word16] = 0<16>
	goto l1825_05D4
	// succ:  l1825_05D4
l1825_05A4:
	ax = Mem0[ss:bp - 2<i16>:word16]
	ax = ax - 1<16>
	SZO = cond(ax)
	goto l1825_0503
	// succ:  l1825_0503
l1825_05D4:
	SCZO = cond(Mem0[ss:bp - 10<i16>:word16] - 0<16>)
	branch Test(NE,Z) l1825_05DD
	// succ:  l1825_05DA l1825_05DD
l1825_05DA:
	goto l1825_03C8
	// succ:  l1825_03C8
l1825_05DD:
	ax = 1<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_0527 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	ax = Mem0[ss:bp - 12<i16>:word16]
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_037E_exit
fn1825_037E_exit:


// fn1825_05F2
// Return size: 4
define fn1825_05F2
fn1825_05F2_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l1825_05F2
l1825_05F2:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x10<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	ax = Mem0[es:bx + 8<i16>:word16]
	Mem0[ss:bp - 8<i16>:word16] = ax
	Mem0[ss:bp - 6<i16>:word16] = 0<16>
	si = ax
	si = si << 1<16>
	SCZO = cond(si)
	si = si << 1<16>
	SCZO = cond(si)
	v12 = Mem0[es:bx + 64<i16> + si:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v12
	v13 = Mem0[es:bx + 62<i16> + si:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v13
	call fn1825_0A7A (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 2<i16>:word16] = ax
	ax = ax | ax
	SZ = cond(ax)
	O = false
	C = false
	branch Test(NE,Z) l1825_0627
	// succ:  l1825_0624 l1825_0627
l1825_0624:
	goto l1825_06D8
	// succ:  l1825_06D8
l1825_0627:
	Mem0[ss:bp - 12<i16>:word16] = 0<16>
	Mem0[ss:bp - 4<i16>:word16] = 2<16>
	v18 = Mem0[ss:bp - 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v18
	v19 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v19
	v20 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v20
	call fn1825_0A00 (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	ax = ax + 1<16>
	SZO = cond(ax)
	Mem0[ss:bp - 10<i16>:word16] = ax
	goto l1825_06A7
	// succ:  l1825_06A7
l1825_0648:
	v23 = Mem0[ss:bp - 10<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v23
	v24 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v24
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	si = Mem0[ss:bp - 6<i16>:word16]
	cl = 2<8>
	si = si << cl
	SCZO = cond(si)
	ax = Mem0[ss:bp - 8<i16>:word16]
	ax = ax << 1<16>
	SCZO = cond(ax)
	ax = ax << 1<16>
	SCZO = cond(ax)
	ax = ax + Mem0[ss:bp + 6<i16>:word16]
	SCZO = cond(ax)
	dx = Mem0[ss:bp + 8<i16>:word16]
	ax = ax + 0x3E<16>
	SCZO = cond(ax)
	Mem0[ss:bp - 16<i16>:word16] = ax
	Mem0[ss:bp - 14<i16>:word16] = dx
	es_bx = Mem0[ss:bp - 16<i16>:segptr32]
	es_bx = Mem0[ds:bx + 0<16>:segptr32]
	v27 = Mem0[es:bx + 2<i16> + si:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v27
	v28 = Mem0[es:bx + si:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v28
	call fn2017_03F5 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 12<i16>:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	es_bx = Mem0[ss:bp - 16<i16>:segptr32]
	es_bx = Mem0[ds:bx + 0<16>:segptr32]
	v29 = Mem0[es:bx + 2<i16> + si:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v29
	v30 = Mem0[es:bx + si:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v30
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	v31 = Mem0[ss:bp - 4<i16>:word16] + 1<16>
	Mem0[ss:bp - 4<i16>:word16] = v31
	SZO = cond(v31)
	v32 = Mem0[ss:bp - 6<i16>:word16] + 1<16>
	Mem0[ss:bp - 6<i16>:word16] = v32
	SZO = cond(v32)
	// succ:  l1825_06A7
l1825_06A7:
	ax = Mem0[ss:bp - 2<i16>:word16]
	SCZO = cond(Mem0[ss:bp - 6<i16>:word16] - ax)
	branch Test(ULT,C) l1825_0648
	// succ:  l1825_06AF l1825_0648
l1825_06AF:
	Mem0[ss:bp - 4<i16>:word16] = 1<16>
	ax = 0xA2C<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 10<i16>:word16]
	ax = ax + Mem0[ss:bp - 12<i16>:word16]
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 6<i16>:word16]
	ax = ax + 2<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 10<i16>:word16]
	ax = ax - 1<16>
	SZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 1<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_05DB (retsize: 4;)
	sp = sp + 0xC<16>
	SCZO = cond(sp)
	// succ:  l1825_06D8
l1825_06D8:
	ax = Mem0[ss:bp - 2<i16>:word16]
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_05F2_exit
fn1825_05F2_exit:


// fn1825_06E0
// Return size: 4
define fn1825_06E0
fn1825_06E0_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l1825_06E0
l1825_06E0:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x18<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	ax = Mem0[es:bx + 8<i16>:word16]
	Mem0[ss:bp - 10<i16>:word16] = ax
	ax = Mem0[es:bx + 16<i16>:word16]
	Mem0[ss:bp - 8<i16>:word16] = ax
	di = Mem0[ss:bp - 10<i16>:word16]
	di = di << 1<16>
	SCZO = cond(di)
	di = di << 1<16>
	SCZO = cond(di)
	v13 = Mem0[es:bx + 64<i16> + di:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v13
	v14 = Mem0[es:bx + 62<i16> + di:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v14
	call fn1825_0A7A (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 2<i16>:word16] = ax
	si = ax
	si = si - 1<16>
	SZO = cond(si)
	SCZO = cond(Mem0[ss:bp - 8<i16>:word16] - si)
	branch Test(LE,SZO) l1825_071D
	// succ:  l1825_071A l1825_071D
l1825_071A:
	Mem0[ss:bp - 8<i16>:word16] = si
	// succ:  l1825_071D
l1825_071D:
	Mem0[ss:bp - 14<i16>:word16] = 1<16>
	Mem0[ss:bp - 20<i16>:word16] = 0<16>
	Mem0[ss:bp - 16<i16>:word16] = 0<16>
	Mem0[ss:bp - 12<i16>:word16] = 0<16>
	Mem0[ss:bp - 6<i16>:word16] = 2<16>
	v16 = Mem0[ss:bp - 10<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v16
	v17 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v17
	v18 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v18
	call fn1825_0A00 (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	ax = ax + 1<16>
	SZO = cond(ax)
	Mem0[ss:bp - 18<i16>:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_0527 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	goto l1825_09E2
	// succ:  l1825_09E2
l1825_0758:
	call fn1F38_07FA (retsize: 4;)
	si = Mem0[ss:bp - 8<i16>:word16]
	si = si + Mem0[ss:bp - 6<i16>:word16]
	SCZO = cond(si)
	v20 = Mem0[ss:bp - 18<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v20
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	di = Mem0[ss:bp - 8<i16>:word16]
	cl = 2<8>
	di = di << cl
	SCZO = cond(di)
	ax = Mem0[ss:bp - 10<i16>:word16]
	ax = ax << 1<16>
	SCZO = cond(ax)
	ax = ax << 1<16>
	SCZO = cond(ax)
	ax = ax + Mem0[ss:bp + 6<i16>:word16]
	SCZO = cond(ax)
	dx = Mem0[ss:bp + 8<i16>:word16]
	ax = ax + 0x3E<16>
	SCZO = cond(ax)
	Mem0[ss:bp - 24<i16>:word16] = ax
	Mem0[ss:bp - 22<i16>:word16] = dx
	es_bx = Mem0[ss:bp - 24<i16>:segptr32]
	es_bx = Mem0[ds:bx + 0<16>:segptr32]
	v24 = Mem0[es:bx + 2<i16> + di:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v24
	v25 = Mem0[es:bx + di:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v25
	call fn2017_03F5 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 20<i16>:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	es_bx = Mem0[ss:bp - 24<i16>:segptr32]
	es_bx = Mem0[ds:bx + 0<16>:segptr32]
	v26 = Mem0[es:bx + 2<i16> + di:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v26
	v27 = Mem0[es:bx + di:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v27
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	call fn1F38_0CC5 (retsize: 4;)
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 8<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn3431_07B6 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 14<i16>:word16] = ax
	call fn1F38_07E7 (retsize: 4;)
	v28 = Mem0[ss:bp - 18<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v28
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	v29 = Mem0[ss:bp - 20<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v29
	es_bx = Mem0[ss:bp - 24<i16>:segptr32]
	es_bx = Mem0[ds:bx + 0<16>:segptr32]
	v30 = Mem0[es:bx + 2<i16> + di:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v30
	v31 = Mem0[es:bx + di:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v31
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	ax = Mem0[ss:bp - 14<i16>:word16]
	ax = ax - 1<16>
	SCZO = cond(ax)
	v34 = ax
	SCZO = cond(ax - 0x13<16>)
	branch Test(ULE,CZ) l1825_0808
	// succ:  l1825_0805 l1825_0808
l1825_0805:
	goto l1825_09E2
	// succ:  l1825_09E2
l1825_0808:
	ax = ax + ax
	SCZO = cond(ax)
	v33 = bx
	bx = ax
	ax = v33
	switch (v34) { l1825_083A l1825_088A l1825_09E2 l1825_09E2 l1825_09E2 l1825_08B8 l1825_08D8 l1825_0928 l1825_09AA l1825_09B2 l1825_09E2 l1825_09E2 l1825_09E2 l1825_09E2 l1825_0990 l1825_099C l1825_09E2 l1825_09E2 l1825_09E2 l1825_0810 }
	// succ:  l1825_083A l1825_088A l1825_09E2 l1825_09E2 l1825_09E2 l1825_08B8 l1825_08D8 l1825_0928 l1825_09AA l1825_09B2 l1825_09E2 l1825_09E2 l1825_09E2 l1825_09E2 l1825_0990 l1825_099C l1825_09E2 l1825_09E2 l1825_09E2 l1825_0810
l1825_0810:
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	Mem0[es:bx + 20<i16>:word16] = 0<16>
	Mem0[es:bx + 4<i16>:word16] = 1<16>
	Mem0[es:bx + 6<i16>:word16] = 1<16>
	ax = Mem0[ss:bp - 10<i16>:word16]
	Mem0[es:bx + 8<i16>:word16] = ax
	Mem0[es:bx + 16<i16>:word16] = 0<16>
	Mem0[es:bx + 22<i16>:word16] = 0<16>
	goto l1825_0882
	// succ:  l1825_0882
l1825_083A:
	ax = Mem0[ss:bp - 14<i16>:word16]
	Mem0[ds:0x966<16>:word16] = ax
	ax = 0x95C<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v35 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v35
	v36 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v36
	call fn1825_6B02 (retsize: 4;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 14<i16>:word16] = ax
	SCZO = cond(ax - 0xBB8<16>)
	branch Test(EQ,Z) l1825_085D
	// succ:  l1825_085A l1825_085D
l1825_085A:
	goto l1825_09E2
	// succ:  l1825_09E2
l1825_085D:
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	Mem0[es:bx + 24<i16>:word16] = 2<16>
	ax = Mem0[ss:bp - 10<i16>:word16]
	cx = ax
	ax = ax << 1<16>
	SCZO = cond(ax)
	ax = ax << 1<16>
	SCZO = cond(ax)
	ax = ax + cx
	SCZO = cond(ax)
	ax = ax << 1<16>
	SCZO = cond(ax)
	ax = ax + 0xA<16>
	SCZO = cond(ax)
	Mem0[es:bx + 28<i16>:word16] = ax
	ax = Mem0[ss:bp - 8<i16>:word16]
	ax = ax + 1<16>
	SZO = cond(ax)
	v40 = Mem0[es:bx + 28<i16>:word16] + ax
	Mem0[es:bx + 28<i16>:word16] = v40
	SCZO = cond(v40)
	// succ:  l1825_0882
l1825_0882:
	Mem0[ss:bp - 12<i16>:word16] = 1<16>
	goto l1825_09E2
	// succ:  l1825_09E2
l1825_088A:
	ax = 1<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	si = Mem0[ss:bp - 10<i16>:word16]
	si = si << 1<16>
	SCZO = cond(si)
	si = si << 1<16>
	SCZO = cond(si)
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	v51 = Mem0[es:bx + 64<i16> + si:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v51
	v52 = Mem0[es:bx + 62<i16> + si:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v52
	call fn1825_66D4 (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 4<i16>:word16] = ax
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(GT,SZO) l1825_08B2
	// succ:  l1825_08AF l1825_08B2
l1825_08AF:
	goto l1825_09E2
	// succ:  l1825_09E2
l1825_08B2:
	Mem0[ss:bp - 8<i16>:word16] = ax
	goto l1825_09E2
	// succ:  l1825_09E2
l1825_08B8:
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	Mem0[es:bx + 4<i16>:word16] = 1<16>
	Mem0[es:bx + 6<i16>:word16] = 0<16>
	ax = Mem0[ss:bp - 10<i16>:word16]
	Mem0[es:bx + 8<i16>:word16] = ax
	ax = Mem0[ss:bp - 8<i16>:word16]
	Mem0[es:bx + 16<i16>:word16] = ax
	goto l1825_0882
	// succ:  l1825_0882
l1825_08D8:
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	SCZO = cond(Mem0[es:bx + 8<i16>:word16] - 1<16>)
	branch Test(LT,SO) l1825_0882
	// succ:  l1825_08E2 l1825_0882
l1825_08E2:
	v42 = Mem0[es:bx + 8<i16>:word16] - 1<16>
	Mem0[es:bx + 8<i16>:word16] = v42
	SZO = cond(v42)
	Mem0[es:bx + 20<i16>:word16] = 1<16>
	di = Mem0[es:bx + 8<i16>:word16]
	di = di << 1<16>
	SCZO = cond(di)
	di = di << 1<16>
	SCZO = cond(di)
	v43 = Mem0[es:bx + 64<i16> + di:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v43
	v44 = Mem0[es:bx + 62<i16> + di:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v44
	call fn1825_0A7A (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 4<i16>:word16] = ax
	ax = ax | ax
	SZ = cond(ax)
	O = false
	C = false
	branch Test(GT,SZO) l1825_0964
	// succ:  l1825_090A l1825_0964
l1825_090A:
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	Mem0[es:bx + 4<i16>:word16] = 1<16>
	Mem0[es:bx + 6<i16>:word16] = 1<16>
	Mem0[es:bx + 12<i16>:word16] = 0<16>
	Mem0[es:bx + 14<i16>:word16] = 0<16>
	goto l1825_0882
	// succ:  l1825_0882
l1825_0928:
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	SCZO = cond(Mem0[es:bx + 8<i16>:word16] - 5<16>)
	branch Test(LT,SO) l1825_0935
	// succ:  l1825_0932 l1825_0935
l1825_0932:
	goto l1825_0882
	// succ:  l1825_0882
l1825_0935:
	v48 = Mem0[es:bx + 8<i16>:word16] + 1<16>
	Mem0[es:bx + 8<i16>:word16] = v48
	SZO = cond(v48)
	ax = Mem0[ss:bp - 8<i16>:word16]
	Mem0[es:bx + 16<i16>:word16] = ax
	Mem0[es:bx + 20<i16>:word16] = 1<16>
	di = Mem0[es:bx + 8<i16>:word16]
	di = di << 1<16>
	SCZO = cond(di)
	di = di << 1<16>
	SCZO = cond(di)
	v49 = Mem0[es:bx + 64<i16> + di:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v49
	v50 = Mem0[es:bx + 62<i16> + di:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v50
	call fn1825_0A7A (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 4<i16>:word16] = ax
	ax = ax | ax
	SZ = cond(ax)
	O = false
	C = false
	branch Test(LE,SZO) l1825_090A
	// succ:  l1825_0964 l1825_090A
l1825_0964:
	si = ax
	si = si - 1<16>
	SZO = cond(si)
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	SCZO = cond(Mem0[es:bx + 16<i16>:word16] - si)
	branch Test(LE,SZO) l1825_0974
	// succ:  l1825_0970 l1825_0974
l1825_0970:
	Mem0[es:bx + 16<i16>:word16] = si
	// succ:  l1825_0974
l1825_0974:
	Mem0[es:bx + 4<i16>:word16] = 1<16>
	Mem0[es:bx + 6<i16>:word16] = 0<16>
	Mem0[es:bx + 12<i16>:word16] = 1<16>
	Mem0[es:bx + 14<i16>:word16] = 1<16>
	goto l1825_0882
	// succ:  l1825_0882
l1825_0990:
	SCZO = cond(Mem0[ss:bp - 8<i16>:word16] - 1<16>)
	branch Test(LT,SO) l1825_09E2
	// succ:  l1825_0996 l1825_09E2
l1825_0996:
	v41 = Mem0[ss:bp - 8<i16>:word16] - 1<16>
	Mem0[ss:bp - 8<i16>:word16] = v41
	SZO = cond(v41)
	goto l1825_09E2
	// succ:  l1825_09E2
l1825_099C:
	ax = Mem0[ss:bp - 8<i16>:word16]
	ax = ax + 1<16>
	SZO = cond(ax)
	SCZO = cond(ax - Mem0[ss:bp - 2<i16>:word16])
	branch Test(GE,SO) l1825_09E2
	// succ:  l1825_09A5 l1825_09E2
l1825_09A5:
	v38 = Mem0[ss:bp - 8<i16>:word16] + 1<16>
	Mem0[ss:bp - 8<i16>:word16] = v38
	SZO = cond(v38)
	goto l1825_09E2
	// succ:  l1825_09E2
l1825_09AA:
	Mem0[ss:bp - 8<i16>:word16] = 0<16>
	goto l1825_09E2
	// succ:  l1825_09E2
l1825_09B2:
	ax = Mem0[ss:bp - 2<i16>:word16]
	ax = ax - 1<16>
	SZO = cond(ax)
	goto l1825_08B2
	// succ:  l1825_08B2
l1825_09E2:
	SCZO = cond(Mem0[ss:bp - 12<i16>:word16] - 0<16>)
	branch Test(NE,Z) l1825_09EB
	// succ:  l1825_09E8 l1825_09EB
l1825_09E8:
	goto l1825_0758
	// succ:  l1825_0758
l1825_09EB:
	ax = 1<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_0527 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	ax = Mem0[ss:bp - 14<i16>:word16]
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	di = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_06E0_exit
fn1825_06E0_exit:


// fn1825_0A00
// Return size: 4
define fn1825_0A00
fn1825_0A00_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l1825_0A00
l1825_0A00:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 8<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	Mem0[ss:bp - 6<i16>:word16] = 0<16>
	Mem0[ss:bp - 8<i16>:word16] = 0<16>
	Mem0[ss:bp - 4<i16>:word16] = 0<16>
	ax = Mem0[ss:bp + 6<i16>:word16]
	dx = Mem0[ss:bp + 8<i16>:word16]
	ax = ax + 0x22<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1825_0A7A (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 2<i16>:word16] = ax
	goto l1825_0A59
	// succ:  l1825_0A59
l1825_0A2E:
	ax = Mem0[ss:bp - 2<i16>:word16]
	SCZO = cond(Mem0[ss:bp - 4<i16>:word16] - ax)
	branch Test(UGE,C) l1825_0A61
	// succ:  l1825_0A36 l1825_0A61
l1825_0A36:
	si = Mem0[ss:bp - 4<i16>:word16]
	si = si << 1<16>
	SCZO = cond(si)
	si = si << 1<16>
	SCZO = cond(si)
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	v15 = Mem0[es:bx + 36<i16> + si:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v15
	v16 = Mem0[es:bx + 34<i16> + si:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v16
	call fn2017_03F5 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 8<i16>:word16] = ax
	v17 = Mem0[ss:bp - 6<i16>:word16] + ax
	Mem0[ss:bp - 6<i16>:word16] = v17
	SCZO = cond(v17)
	v18 = Mem0[ss:bp - 4<i16>:word16] + 1<16>
	Mem0[ss:bp - 4<i16>:word16] = v18
	SZO = cond(v18)
	// succ:  l1825_0A59
l1825_0A59:
	ax = Mem0[ss:bp - 4<i16>:word16]
	SCZO = cond(Mem0[ss:bp + 10<i16>:word16] - ax)
	branch Test(UGT,CZ) l1825_0A2E
	// succ:  l1825_0A61 l1825_0A2E
l1825_0A61:
	ax = Mem0[ss:bp - 2<i16>:word16]
	SCZO = cond(Mem0[ss:bp - 4<i16>:word16] - ax)
	branch Test(UGE,C) l1825_0A72
	// succ:  l1825_0A69 l1825_0A72
l1825_0A69:
	ax = Mem0[ss:bp - 6<i16>:word16]
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_0A00_exit
l1825_0A72:
	ax = 0xFFFF<16>
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_0A00_exit
fn1825_0A00_exit:


// fn1825_0A7A
// Return size: 4
define fn1825_0A7A
fn1825_0A7A_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l1825_0A7A
l1825_0A7A:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	Mem0[ss:bp - 2<i16>:word16] = 0<16>
	// succ:  l1825_0A86
l1825_0A86:
	bx = Mem0[ss:bp - 2<i16>:word16]
	bx = bx << 1<16>
	SCZO = cond(bx)
	bx = bx << 1<16>
	SCZO = cond(bx)
	es_si = Mem0[ss:bp + 6<i16>:segptr32]
	ax = Mem0[es:bx + si:word16]
	ax = ax | Mem0[es:(bx + 2<i16>) + si:word16]
	SZ = cond(ax)
	O = false
	C = false
	branch Test(EQ,Z) l1825_0A9E
	// succ:  l1825_0A99 l1825_0A9E
l1825_0A99:
	v16 = Mem0[ss:bp - 2<i16>:word16] + 1<16>
	Mem0[ss:bp - 2<i16>:word16] = v16
	SZO = cond(v16)
	goto l1825_0A86
	// succ:  l1825_0A86
l1825_0A9E:
	ax = Mem0[ss:bp - 2<i16>:word16]
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_0A7A_exit
fn1825_0A7A_exit:


// fn1825_0AA6
// Return size: 4
define fn1825_0AA6
fn1825_0AA6_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l1825_0AA6
l1825_0AA6:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2<16>
	SCZO = cond(sp)
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	ax = Mem0[es:bx + 22<i16>:word16]
	ax = ax - 0xB<16>
	SCZO = cond(ax)
	v13 = ax
	SCZO = cond(ax - 0x34<16>)
	branch Test(ULE,CZ) l1825_0ABE
	// succ:  l1825_0ABB l1825_0ABE
l1825_0ABB:
	goto l1825_0BCE
	// succ:  l1825_0BCE
l1825_0ABE:
	ax = ax + ax
	SCZO = cond(ax)
	v12 = bx
	bx = ax
	ax = v12
	switch (v13) { l1825_0AC6 l1825_0AD8 l1825_0AE4 l1825_0AF0 l1825_0AFC l1825_0B08 l1825_0B14 l1825_0BCE l1825_0BCE l1825_0BCE l1825_0B20 l1825_0B2C l1825_0B38 l1825_0B44 l1825_0BCE l1825_0BCE l1825_0BCE l1825_0BCE l1825_0BCE l1825_0BCE l1825_0B52 l1825_0B66 l1825_0B6C l1825_0B7A l1825_0BCE l1825_0BCE l1825_0BCE l1825_0BCE l1825_0BCE l1825_0BCE l1825_0B88 l1825_0B88 l1825_0B88 l1825_0B88 l1825_0B88 l1825_0B88 l1825_0B88 l1825_0B88 l1825_0BCE l1825_0B96 l1825_0BCE l1825_0BCE l1825_0BCE l1825_0BCE l1825_0BCE l1825_0BCE l1825_0BCE l1825_0BCE l1825_0BCE l1825_0BCE l1825_0BA4 l1825_0BB2 l1825_0BC0 }
	// succ:  l1825_0AC6 l1825_0AD8 l1825_0AE4 l1825_0AF0 l1825_0AFC l1825_0B08 l1825_0B14 l1825_0BCE l1825_0BCE l1825_0BCE l1825_0B20 l1825_0B2C l1825_0B38 l1825_0B44 l1825_0BCE l1825_0BCE l1825_0BCE l1825_0BCE l1825_0BCE l1825_0BCE l1825_0B52 l1825_0B66 l1825_0B6C l1825_0B7A l1825_0BCE l1825_0BCE l1825_0BCE l1825_0BCE l1825_0BCE l1825_0BCE l1825_0B88 l1825_0B88 l1825_0B88 l1825_0B88 l1825_0B88 l1825_0B88 l1825_0B88 l1825_0B88 l1825_0BCE l1825_0B96 l1825_0BCE l1825_0BCE l1825_0BCE l1825_0BCE l1825_0BCE l1825_0BCE l1825_0BCE l1825_0BCE l1825_0BCE l1825_0BCE l1825_0BA4 l1825_0BB2 l1825_0BC0
l1825_0AC6:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = es
	v50 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v50
	call fn1825_0C68 (retsize: 4;)
	// succ:  l1825_0ACE
l1825_0ACE:
	sp = sp + 4<16>
	SCZO = cond(sp)
	// succ:  l1825_0AD1
l1825_0AD1:
	Mem0[ss:bp - 2<i16>:word16] = ax
	goto l1825_0C60
	// succ:  l1825_0C60
l1825_0AD8:
	v14 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v14
	v15 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v15
	call fn1825_0CBC (retsize: 4;)
	goto l1825_0ACE
	// succ:  l1825_0ACE
l1825_0AE4:
	v48 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v48
	v49 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v49
	call fn1825_0C7E (retsize: 4;)
	goto l1825_0ACE
	// succ:  l1825_0ACE
l1825_0AF0:
	v46 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v46
	v47 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v47
	call fn1825_23CA (retsize: 4;)
	goto l1825_0ACE
	// succ:  l1825_0ACE
l1825_0AFC:
	v44 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v44
	v45 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v45
	call fn1825_0CD2 (retsize: 4;)
	goto l1825_0ACE
	// succ:  l1825_0ACE
l1825_0B08:
	v16 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v16
	v17 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v17
	call fn1825_0D3C (retsize: 4;)
	goto l1825_0ACE
	// succ:  l1825_0ACE
l1825_0B14:
	v42 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v42
	v43 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v43
	call fn1825_0D5E (retsize: 4;)
	goto l1825_0ACE
	// succ:  l1825_0ACE
l1825_0B20:
	v40 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v40
	v41 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v41
	call fn1825_26D6 (retsize: 4;)
	goto l1825_0ACE
	// succ:  l1825_0ACE
l1825_0B2C:
	v36 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v36
	v37 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v37
	call fn1825_2880 (retsize: 4;)
	goto l1825_0ACE
	// succ:  l1825_0ACE
l1825_0B38:
	v34 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v34
	v35 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v35
	call fn1825_2A26 (retsize: 4;)
	goto l1825_0ACE
	// succ:  l1825_0ACE
l1825_0B44:
	v32 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v32
	v33 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v33
	call fn1825_3436 (retsize: 4;)
	goto l1825_0ACE
	// succ:  l1825_0ACE
l1825_0B52:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l1825_0B54
l1825_0B54:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v38 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v38
	v39 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v39
	call fn1825_4DA6 (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	goto l1825_0AD1
	// succ:  l1825_0AD1
l1825_0B66:
	ax = 1<16>
	goto l1825_0B54
	// succ:  l1825_0B54
l1825_0B6C:
	v18 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v18
	v19 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v19
	call fn1825_5154 (retsize: 4;)
	goto l1825_0ACE
	// succ:  l1825_0ACE
l1825_0B7A:
	v30 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v30
	v31 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v31
	call fn1825_5BD8 (retsize: 4;)
	goto l1825_0ACE
	// succ:  l1825_0ACE
l1825_0B88:
	v28 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v28
	v29 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v29
	call fn1825_23DA (retsize: 4;)
	goto l1825_0ACE
	// succ:  l1825_0ACE
l1825_0B96:
	v26 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v26
	v27 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v27
	call fn1825_0E72 (retsize: 4;)
	goto l1825_0ACE
	// succ:  l1825_0ACE
l1825_0BA4:
	v24 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v24
	v25 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v25
	call fn1825_1884 (retsize: 4;)
	goto l1825_0ACE
	// succ:  l1825_0ACE
l1825_0BB2:
	v22 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v22
	v23 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v23
	call fn1825_18A6 (retsize: 4;)
	goto l1825_0ACE
	// succ:  l1825_0ACE
l1825_0BC0:
	v20 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v20
	v21 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v21
	call fn1825_1FB6 (retsize: 4;)
	goto l1825_0ACE
	// succ:  l1825_0ACE
l1825_0BCE:
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	Mem0[es:bx + 22<i16>:word16] = 0<16>
	Mem0[es:bx + 4<i16>:word16] = 1<16>
	Mem0[es:bx + 6<i16>:word16] = 1<16>
	Mem0[es:bx + 12<i16>:word16] = 1<16>
	Mem0[es:bx + 14<i16>:word16] = 1<16>
	Mem0[ss:bp - 2<i16>:word16] = 1<16>
	// succ:  l1825_0C60
l1825_0C60:
	ax = Mem0[ss:bp - 2<i16>:word16]
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_0AA6_exit
fn1825_0AA6_exit:


// fn1825_0C68
// Return size: 4
define fn1825_0C68
fn1825_0C68_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l1825_0C68
l1825_0C68:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	Mem0[es:bx:word16] = 0<16>
	Mem0[es:bx + 2<i16>:word16] = 0<16>
	ax = ax - ax
	SCZO = cond(ax)
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_0C68_exit
fn1825_0C68_exit:


// fn1825_0C7E
// Return size: 4
define fn1825_0C7E
fn1825_0C7E_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l1825_0C7E
l1825_0C7E:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	ax = 0x41<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = 0xA<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x55B8<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	// succ:  l1825_0CA1
l1825_0CA1:
	call fn1F38_0CDC (retsize: 4;)
	ax = ax | ax
	SZ = cond(ax)
	O = false
	C = false
	branch Test(EQ,Z) l1825_0CA1
	// succ:  l1825_0CAA l1825_0CA1
l1825_0CAA:
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	Mem0[es:bx:word16] = 0<16>
	Mem0[es:bx + 2<i16>:word16] = 0<16>
	ax = ax - ax
	SCZO = cond(ax)
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_0C7E_exit
fn1825_0C7E_exit:


// fn1825_0CBC
// Return size: 4
define fn1825_0CBC
fn1825_0CBC_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l1825_0CBC
l1825_0CBC:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	Mem0[es:bx:word16] = 0<16>
	Mem0[es:bx + 2<i16>:word16] = 1<16>
	ax = ax - ax
	SCZO = cond(ax)
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_0CBC_exit
fn1825_0CBC_exit:


// fn1825_0CD2
// Return size: 4
define fn1825_0CD2
fn1825_0CD2_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l1825_0CD2
l1825_0CD2:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 2<i16>:word16] = 0<16>
	call fn1F38_094C (retsize: 4;)
	SCZO = cond(Mem0[ds:0x13B4<16>:word16] - 0<16>)
	branch Test(NE,Z) l1825_0CF3
	// succ:  l1825_0CE9 l1825_0CF3
l1825_0CE9:
	call fn2E37_0446 (retsize: 4;)
	call fn2C27_0112 (retsize: 4;)
	// succ:  l1825_0CF3
l1825_0CF3:
	ax = 0x55C4<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn38D6_0DFE (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 2<i16>:word16] = ax
	ax = ax | ax
	SZ = cond(ax)
	O = false
	C = false
	branch Test(EQ,Z) l1825_0D0D
	// succ:  l1825_0D07 l1825_0D0D
l1825_0D07:
	Mem0[ds:0x10D2<16>:word16] = 0x10<16>
	// succ:  l1825_0D0D
l1825_0D0D:
	SCZO = cond(Mem0[ds:0x13B4<16>:word16] - 0<16>)
	branch Test(NE,Z) l1825_0D1E
	// succ:  l1825_0D14 l1825_0D1E
l1825_0D14:
	call fn2C27_0140 (retsize: 4;)
	call fn2E37_0432 (retsize: 4;)
	// succ:  l1825_0D1E
l1825_0D1E:
	SCZO = cond(Mem0[ds:0xF02<16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_0D35
	// succ:  l1825_0D25 l1825_0D35
l1825_0D25:
	v13 = Mem0[ds:0x916<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v13
	v14 = Mem0[ds:0x914<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v14
	call fn1F38_0A4C (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	// succ:  l1825_0D35
l1825_0D35:
	ax = 1<16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_0CD2_exit
fn1825_0CD2_exit:


// fn1825_0D3C
// Return size: 4
define fn1825_0D3C
fn1825_0D3C_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l1825_0D3C
l1825_0D3C:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	es_bx = Mem0[es:bx + 94<i16>:segptr32]
	SCZO = cond(Mem0[es:bx:word16] - 1<16>)
	ax = ax - ax - C
	SCZO = cond(ax)
	C = ax != 0<16>
	ax = -ax
	SZO = cond(ax)
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	es_bx = Mem0[es:bx + 94<i16>:segptr32]
	Mem0[es:bx:word16] = ax
	ax = 1<16>
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_0D3C_exit
fn1825_0D3C_exit:


// fn1825_0D5E
// Return size: 4
define fn1825_0D5E
fn1825_0D5E_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l1825_0D5E
l1825_0D5E:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	v9 = Mem0[es:bx + 32<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v9
	v10 = Mem0[es:bx + 30<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v10
	call fn1F38_0A4C (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	v13 = Mem0[ds:0xF02<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v13
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	v14 = Mem0[es:bx + 32<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v14
	v15 = Mem0[es:bx + 30<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v15
	call fn21DC_09B4 (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	call fn1825_7106 (retsize: 4;)
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ds:0xEEE<16>:word16]
	ax = ax - 1<16>
	SZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	call fn21DC_04BA (retsize: 4;)
	ax = ax - ax
	SCZO = cond(ax)
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_0D5E_exit
fn1825_0D5E_exit:


// fn1825_0DA8
// Return size: 4
define fn1825_0DA8
fn1825_0DA8_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l1825_0DA8
l1825_0DA8:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 8<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	Mem0[ss:bp - 2<i16>:word16] = 0<16>
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	es_bx = Mem0[es:bx + 94<i16>:segptr32]
	SCZO = cond(Mem0[es:bx:word16] - 0<16>)
	branch Test(NE,Z) l1825_0DC4
	// succ:  l1825_0DC1 l1825_0DC4
l1825_0DC1:
	goto l1825_0E6A
	// succ:  l1825_0E6A
l1825_0DC4:
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	es_bx = Mem0[es:bx + 94<i16>:segptr32]
	ax = Mem0[es:bx + 2<i16>:word16]
	Mem0[ss:bp - 8<i16>:word16] = ax
	Mem0[ss:bp - 6<i16>:word16] = 0<16>
	goto l1825_0DFF
	// succ:  l1825_0DFF
l1825_0DDA:
	ax = 0x3E<16>
	dx_ax = Mem0[ss:bp - 6<i16>:word16] *u32 ax
	SCZO = cond(dx_ax)
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	cx = Mem0[es:bx + 94<i16>:word16]
	si = Mem0[es:bx + 96<i16>:word16]
	cx = cx + ax
	SCZO = cond(cx)
	cx = cx + 0x12<16>
	SCZO = cond(cx)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = cx
	call fn1825_5FCA (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	// succ:  l1825_0DF9
l1825_0DF9:
	Mem0[ss:bp - 2<i16>:word16] = ax
	// succ:  l1825_0DFC
l1825_0DFC:
	v19 = Mem0[ss:bp - 6<i16>:word16] + 1<16>
	Mem0[ss:bp - 6<i16>:word16] = v19
	SZO = cond(v19)
	// succ:  l1825_0DFF
l1825_0DFF:
	ax = Mem0[ss:bp - 8<i16>:word16]
	SCZO = cond(Mem0[ss:bp - 6<i16>:word16] - ax)
	branch Test(UGE,C) l1825_0E6A
	// succ:  l1825_0E07 l1825_0E6A
l1825_0E07:
	SCZO = cond(Mem0[ss:bp - 2<i16>:word16] - 0<16>)
	branch Test(NE,Z) l1825_0E6A
	// succ:  l1825_0E0D l1825_0E6A
l1825_0E0D:
	ax = 0x3E<16>
	dx_ax = Mem0[ss:bp - 6<i16>:word16] *u32 ax
	SCZO = cond(dx_ax)
	si = ax
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	es_bx = Mem0[es:bx + 94<i16>:segptr32]
	SCZO = cond(Mem0[es:bx + 4<i16> + si:word16] - 0<16>)
	branch Test(EQ,Z) l1825_0DFC
	// succ:  l1825_0E23 l1825_0DFC
l1825_0E23:
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	es_bx = Mem0[es:bx + 94<i16>:segptr32]
	ax = bx + 8<i16> + si
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = es
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1825_5F7C (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = ax | ax
	SZ = cond(ax)
	O = false
	C = false
	branch Test(EQ,Z) l1825_0DFC
	// succ:  l1825_0E3A l1825_0DFC
l1825_0E3A:
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	es_bx = Mem0[es:bx + 94<i16>:segptr32]
	SCZO = cond(Mem0[es:bx + 6<i16> + si:word16] - 0<16>)
	branch Test(NE,Z) l1825_0DDA
	// succ:  l1825_0E48 l1825_0DDA
l1825_0E48:
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	es_bx = Mem0[es:bx + 94<i16>:segptr32]
	ax = bx + 18<i16> + si
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = es
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn38D6_0CDE (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 4<i16>:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1825_5F68 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	goto l1825_0DF9
	// succ:  l1825_0DF9
l1825_0E6A:
	ax = Mem0[ss:bp - 2<i16>:word16]
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_0DA8_exit
fn1825_0DA8_exit:


// fn1825_0E72
// Return size: 4
define fn1825_0E72
fn1825_0E72_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l1825_0E72
l1825_0E72:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x28<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	Mem0[ss:bp - 32<i16>:word16] = 1<16>
	Mem0[ss:bp - 16<i16>:word16] = 5<16>
	Mem0[ss:bp - 30<i16>:word16] = 5<16>
	Mem0[ss:bp - 2<i16>:word16] = 0x4D<16>
	Mem0[ss:bp - 34<i16>:word16] = 7<16>
	SCZO = cond(Mem0[ds:0xF02<16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_0ECC
	// succ:  l1825_0E9A l1825_0ECC
l1825_0E9A:
	Mem0[ds:0xA16<16>:word16] = 5<16>
	Mem0[ds:0xA18<16>:word16] = 0<16>
	Mem0[ds:0xA1A<16>:word16] = 0x18<16>
	Mem0[ds:0xA1C<16>:word16] = 0x4F<16>
	Mem0[ds:0xA1E<16>:word16] = 0<16>
	ax = ax - ax
	SCZO = cond(ax)
	Mem0[ds:0xA22<16>:word16] = ax
	Mem0[ds:0xA20<16>:word16] = ax
	ax = 0xA16<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1825_4CFE (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	// succ:  l1825_0ECC
l1825_0ECC:
	ax = Mem0[ss:bp - 30<i16>:word16]
	ax = ax + 2<16>
	SCZO = cond(ax)
	Mem0[ss:bp - 14<i16>:word16] = ax
	Mem0[ss:bp - 26<i16>:word16] = 0<16>
	// succ:  l1825_0EDA
l1825_0EDA:
	bx = Mem0[ss:bp - 26<i16>:word16]
	bx = bx << 1<16>
	SCZO = cond(bx)
	bx = bx << 1<16>
	SCZO = cond(bx)
	es_si = Mem0[ss:bp + 6<i16>:segptr32]
	es_si = Mem0[es:si + 94<i16>:segptr32]
	ax = Mem0[es:bx + 0x3E4<16> + si:word16]
	dx = Mem0[es:bx + 0x3E6<16> + si:word16]
	Mem0[ss:bp - 40<i16>:word16] = ax
	Mem0[ss:bp - 38<i16>:word16] = dx
	ax = ax | dx
	SZ = cond(ax)
	O = false
	C = false
	branch Test(EQ,Z) l1825_0F20
	// succ:  l1825_0EFC l1825_0F20
l1825_0EFC:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	v19 = Mem0[ss:bp - 40<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v19
	call fn2017_03F5 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	si = Mem0[ss:bp - 26<i16>:word16]
	si = si << 1<16>
	SCZO = cond(si)
	cx = Mem0[ss:bp - 14<i16> + si:word16]
	cx = cx + ax
	SCZO = cond(cx)
	si = Mem0[ss:bp - 26<i16>:word16]
	si = si << 1<16>
	SCZO = cond(si)
	Mem0[ss:bp - 12<i16> + si:word16] = cx
	v21 = Mem0[ss:bp - 26<i16>:word16] + 1<16>
	Mem0[ss:bp - 26<i16>:word16] = v21
	SZO = cond(v21)
	goto l1825_0EDA
	// succ:  l1825_0EDA
l1825_0F20:
	Mem0[ss:bp - 18<i16>:word16] = 0<16>
	SCZO = cond(Mem0[ss:bp - 26<i16>:word16] - 0<16>)
	branch Test(LE,SZO) l1825_0F32
	// succ:  l1825_0F2B l1825_0F32
l1825_0F2B:
	ax = Mem0[ss:bp - 26<i16>:word16]
	ax = ax - 1<16>
	SZO = cond(ax)
	goto l1825_0F34
	// succ:  l1825_0F34
l1825_0F32:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l1825_0F34
l1825_0F34:
	Mem0[ss:bp - 22<i16>:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_0527 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 26<i16>:word16] = 0<16>
	goto l1825_1360
	// succ:  l1825_1360
l1825_0F4A:
	SCZO = cond(Mem0[ss:bp - 32<i16>:word16] - 0xBB8<16>)
	branch Test(NE,Z) l1825_0F54
	// succ:  l1825_0F51 l1825_0F54
l1825_0F51:
	goto l1825_1369
	// succ:  l1825_1369
l1825_0F54:
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	es_bx = Mem0[es:bx + 94<i16>:segptr32]
	ax = Mem0[es:bx + 2<i16>:word16]
	ax = ax + Mem0[ss:bp - 16<i16>:word16]
	SCZO = cond(ax)
	ax = ax + 2<16>
	SCZO = cond(ax)
	Mem0[ss:bp - 4<i16>:word16] = ax
	ax = Mem0[ss:bp - 16<i16>:word16]
	ax = ax + 1<16>
	SZO = cond(ax)
	Mem0[ss:bp - 24<i16>:word16] = ax
	ax = 0xA5E<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v27 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v27
	v28 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v28
	v29 = Mem0[ss:bp - 30<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v29
	v30 = Mem0[ss:bp - 16<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v30
	call fn1F38_05DB (retsize: 4;)
	sp = sp + 0xC<16>
	SCZO = cond(sp)
	ax = 0xA2C<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v31 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v31
	v32 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v32
	v33 = Mem0[ss:bp - 30<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v33
	v34 = Mem0[ss:bp - 16<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v34
	call fn1F38_05DB (retsize: 4;)
	sp = sp + 0xC<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 28<i16>:word16] = 0<16>
	goto l1825_0FFB
	// succ:  l1825_0FFB
l1825_0FA8:
	di = Mem0[ss:bp - 28<i16>:word16]
	di = di << 1<16>
	SCZO = cond(di)
	v35 = Mem0[ss:bp - 14<i16> + di:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v35
	v36 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v36
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	si = Mem0[ss:bp - 28<i16>:word16]
	cl = 2<8>
	si = si << cl
	SCZO = cond(si)
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	es_bx = Mem0[es:bx + 94<i16>:segptr32]
	v38 = Mem0[es:bx + 0x3E6<16> + si:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v38
	v39 = Mem0[es:bx + 0x3E4<16> + si:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v39
	call fn2017_03F5 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 36<i16>:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	es_bx = Mem0[es:bx + 94<i16>:segptr32]
	v40 = Mem0[es:bx + 0x3E6<16> + si:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v40
	v41 = Mem0[es:bx + 0x3E4<16> + si:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v41
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	v42 = Mem0[ss:bp - 28<i16>:word16] + 1<16>
	Mem0[ss:bp - 28<i16>:word16] = v42
	SZO = cond(v42)
	// succ:  l1825_0FFB
l1825_0FFB:
	ax = Mem0[ss:bp - 22<i16>:word16]
	SCZO = cond(Mem0[ss:bp - 28<i16>:word16] - ax)
	branch Test(LE,SZO) l1825_0FA8
	// succ:  l1825_1003 l1825_0FA8
l1825_1003:
	Mem0[ss:bp - 28<i16>:word16] = 0<16>
	goto l1825_116D
	// succ:  l1825_116D
l1825_100C:
	ax = 5<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x55D2<16>
	// succ:  l1825_1013
l1825_1013:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	ax = Mem0[ss:bp - 34<i16>:word16]
	ax = ax + 9<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 28<i16>:word16]
	ax = ax + Mem0[ss:bp - 24<i16>:word16]
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = 0x3E<16>
	dx_ax = Mem0[ss:bp - 28<i16>:word16] *s32 ax
	SCZO = cond(dx_ax)
	bx = ax
	es_si = Mem0[ss:bp + 6<i16>:segptr32]
	es_si = Mem0[es:si + 94<i16>:segptr32]
	SCZO = cond(Mem0[es:bx + 6<i16> + si:word16] - 0<16>)
	branch Test(NE,Z) l1825_1052
	// succ:  l1825_1049 l1825_1052
l1825_1049:
	ax = 6<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x55D8<16>
	goto l1825_1059
	// succ:  l1825_1059
l1825_1052:
	ax = 6<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x55E0<16>
	// succ:  l1825_1059
l1825_1059:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	si = Mem0[ss:bp - 28<i16>:word16]
	si = si + Mem0[ss:bp - 24<i16>:word16]
	SCZO = cond(si)
	ax = Mem0[ss:bp - 34<i16>:word16]
	ax = ax + 0x10<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = 4<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x55E8<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	ax = Mem0[ss:bp - 34<i16>:word16]
	ax = ax + 0x15<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = 0x3E<16>
	dx_ax = Mem0[ss:bp - 28<i16>:word16] *s32 ax
	SCZO = cond(dx_ax)
	di = ax
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	es_bx = Mem0[es:bx + 94<i16>:segptr32]
	ax = bx + 8<i16> + di
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = es
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn2017_03F5 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 36<i16>:word16] = ax
	ax = ax - 0xA<16>
	SCZO = cond(ax)
	cx = cx - cx - C
	SCZO = cond(cx)
	ax = ax & cx
	SZ = cond(ax)
	O = false
	C = false
	ax = ax + 0xA<16>
	SCZO = cond(ax)
	Mem0[ss:bp - 36<i16>:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	es_bx = Mem0[es:bx + 94<i16>:segptr32]
	ax = bx + 8<i16> + di
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = es
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	ax = Mem0[ss:bp - 34<i16>:word16]
	ax = ax + 0x20<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	es_bx = Mem0[es:bx + 94<i16>:segptr32]
	SCZO = cond(Mem0[es:bx + 6<i16> + di:word16] - 0<16>)
	branch Test(NE,Z) l1825_1102
	// succ:  l1825_10F9 l1825_1102
l1825_10F9:
	ax = 4<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x55EE<16>
	goto l1825_1109
	// succ:  l1825_1109
l1825_1102:
	ax = 4<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x55F4<16>
	// succ:  l1825_1109
l1825_1109:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	ax = Mem0[ss:bp - 34<i16>:word16]
	ax = ax + 0x26<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 28<i16>:word16]
	ax = ax + Mem0[ss:bp - 24<i16>:word16]
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = 0x3E<16>
	dx_ax = Mem0[ss:bp - 28<i16>:word16] *s32 ax
	SCZO = cond(dx_ax)
	si = ax
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	es_bx = Mem0[es:bx + 94<i16>:segptr32]
	ax = bx + 18<i16> + si
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = es
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn2017_03F5 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 36<i16>:word16] = ax
	ax = ax - 0x30<16>
	SCZO = cond(ax)
	cx = cx - cx - C
	SCZO = cond(cx)
	ax = ax & cx
	SZ = cond(ax)
	O = false
	C = false
	ax = ax + 0x30<16>
	SCZO = cond(ax)
	Mem0[ss:bp - 36<i16>:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	es_bx = Mem0[es:bx + 94<i16>:segptr32]
	ax = bx + 18<i16> + si
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = es
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	v62 = Mem0[ss:bp - 28<i16>:word16] + 1<16>
	Mem0[ss:bp - 28<i16>:word16] = v62
	SZO = cond(v62)
	// succ:  l1825_116D
l1825_116D:
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	es_bx = Mem0[es:bx + 94<i16>:segptr32]
	ax = Mem0[ss:bp - 28<i16>:word16]
	SCZO = cond(Mem0[es:bx + 2<i16>:word16] - ax)
	branch Test(ULE,CZ) l1825_11D2
	// succ:  l1825_117D l1825_11D2
l1825_117D:
	si = ax
	si = si + Mem0[ss:bp - 24<i16>:word16]
	SCZO = cond(si)
	v44 = Mem0[ss:bp - 34<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v44
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = 2<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 28<i16>:word16]
	ax = ax + 1<16>
	SZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1825_63F8 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = Mem0[ss:bp - 34<i16>:word16]
	ax = ax + 3<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = 0x3E<16>
	dx_ax = Mem0[ss:bp - 28<i16>:word16] *s32 ax
	SCZO = cond(dx_ax)
	bx = ax
	es_di = Mem0[ss:bp + 6<i16>:segptr32]
	es_di = Mem0[es:di + 94<i16>:segptr32]
	SCZO = cond(Mem0[es:bx + 4<i16> + di:word16] - 0<16>)
	branch Test(NE,Z) l1825_11C7
	// succ:  l1825_11C4 l1825_11C7
l1825_11C4:
	goto l1825_100C
	// succ:  l1825_100C
l1825_11C7:
	ax = 5<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x55CC<16>
	goto l1825_1013
	// succ:  l1825_1013
l1825_11D2:
	bx = Mem0[ss:bp - 26<i16>:word16]
	bx = bx << 1<16>
	SCZO = cond(bx)
	bx = bx + bp
	SCZO = cond(bx)
	si = Mem0[ds:bx - 14<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	v47 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v47
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	call fn1F38_07FA (retsize: 4;)
	di = Mem0[ss:bp - 26<i16>:word16]
	cl = 2<8>
	di = di << cl
	SCZO = cond(di)
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	es_bx = Mem0[es:bx + 94<i16>:segptr32]
	v48 = Mem0[es:bx + 0x3E6<16> + di:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v48
	v49 = Mem0[es:bx + 0x3E4<16> + di:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v49
	call fn2017_03F5 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 36<i16>:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	es_bx = Mem0[es:bx + 94<i16>:segptr32]
	v50 = Mem0[es:bx + 0x3E6<16> + di:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v50
	v51 = Mem0[es:bx + 0x3E4<16> + di:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v51
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 8<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn3431_07B6 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 32<i16>:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	v52 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v52
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	call fn1F38_07E7 (retsize: 4;)
	v53 = Mem0[ss:bp - 36<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v53
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	es_bx = Mem0[es:bx + 94<i16>:segptr32]
	v54 = Mem0[es:bx + 0x3E6<16> + di:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v54
	v55 = Mem0[es:bx + 0x3E4<16> + di:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v55
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	ax = Mem0[ss:bp - 32<i16>:word16]
	ax = ax - 1<16>
	SCZO = cond(ax)
	v57 = ax
	SCZO = cond(ax - 0x13<16>)
	branch Test(ULE,CZ) l1825_1277
	// succ:  l1825_1274 l1825_1277
l1825_1274:
	goto l1825_1360
	// succ:  l1825_1360
l1825_1277:
	ax = ax + ax
	SCZO = cond(ax)
	v56 = bx
	bx = ax
	ax = v56
	switch (v57) { l1825_1290 l1825_12C0 l1825_1360 l1825_1360 l1825_1360 l1825_12EA l1825_1318 l1825_1328 l1825_1333 l1825_1323 l1825_1360 l1825_1360 l1825_1360 l1825_1360 l1825_1360 l1825_1360 l1825_1360 l1825_1360 l1825_1360 l1825_1280 }
	// succ:  l1825_1290 l1825_12C0 l1825_1360 l1825_1360 l1825_1360 l1825_12EA l1825_1318 l1825_1328 l1825_1333 l1825_1323 l1825_1360 l1825_1360 l1825_1360 l1825_1360 l1825_1360 l1825_1360 l1825_1360 l1825_1360 l1825_1360 l1825_1280
l1825_1280:
	v60 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v60
	v61 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v61
	call fn1825_6D80 (retsize: 4;)
	// succ:  l1825_128A
l1825_128A:
	sp = sp + 4<16>
	SCZO = cond(sp)
	goto l1825_1360
	// succ:  l1825_1360
l1825_1290:
	ax = Mem0[ss:bp - 32<i16>:word16]
	Mem0[ds:0x966<16>:word16] = ax
	ax = 0x95C<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v68 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v68
	v69 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v69
	call fn1825_6B02 (retsize: 4;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 32<i16>:word16] = ax
	SCZO = cond(ax - 0xBB8<16>)
	branch Test(EQ,Z) l1825_12B3
	// succ:  l1825_12B0 l1825_12B3
l1825_12B0:
	goto l1825_1360
	// succ:  l1825_1360
l1825_12B3:
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	Mem0[es:bx + 24<i16>:word16] = 3<16>
	goto l1825_1360
	// succ:  l1825_1360
l1825_12C0:
	ax = 1<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	ax = Mem0[es:bx + 94<i16>:word16]
	dx = Mem0[es:bx + 96<i16>:word16]
	ax = ax + 0x3E4<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1825_66D4 (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 20<i16>:word16] = ax
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(LE,SZO) l1825_1360
	// succ:  l1825_12E3 l1825_1360
l1825_12E3:
	Mem0[ss:bp - 26<i16>:word16] = ax
	goto l1825_1360
	// succ:  l1825_1360
l1825_12EA:
	v64 = Mem0[ss:bp - 34<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v64
	ax = Mem0[ss:bp - 4<i16>:word16]
	ax = ax - 1<16>
	SZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v65 = Mem0[ss:bp - 26<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v65
	v66 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v66
	v67 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v67
	call fn1825_139A (retsize: 4;)
	sp = sp + 0xA<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 32<i16>:word16] = ax
	SCZO = cond(Mem0[ds:0xF02<16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_1360
	// succ:  l1825_130C l1825_1360
l1825_130C:
	ax = 0xA16<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1825_4D78 (retsize: 4;)
	goto l1825_128A
	// succ:  l1825_128A
l1825_1318:
	v58 = Mem0[ss:bp - 26<i16>:word16] - 1<16>
	Mem0[ss:bp - 26<i16>:word16] = v58
	SZO = cond(v58)
	ax = Mem0[ss:bp - 18<i16>:word16]
	SCZO = cond(Mem0[ss:bp - 26<i16>:word16] - ax)
	branch Test(GE,SO) l1825_1360
	// succ:  l1825_1323 l1825_1360
l1825_1323:
	ax = Mem0[ss:bp - 22<i16>:word16]
	goto l1825_12E3
	// succ:  l1825_12E3
l1825_1328:
	v63 = Mem0[ss:bp - 26<i16>:word16] + 1<16>
	Mem0[ss:bp - 26<i16>:word16] = v63
	SZO = cond(v63)
	ax = Mem0[ss:bp - 22<i16>:word16]
	SCZO = cond(Mem0[ss:bp - 26<i16>:word16] - ax)
	branch Test(LE,SZO) l1825_1360
	// succ:  l1825_1333 l1825_1360
l1825_1333:
	ax = Mem0[ss:bp - 18<i16>:word16]
	goto l1825_12E3
	// succ:  l1825_12E3
l1825_1360:
	SCZO = cond(Mem0[ss:bp - 32<i16>:word16] - 0x14<16>)
	branch Test(EQ,Z) l1825_1369
	// succ:  l1825_1366 l1825_1369
l1825_1366:
	goto l1825_0F4A
	// succ:  l1825_0F4A
l1825_1369:
	SCZO = cond(Mem0[ds:0xF02<16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_1384
	// succ:  l1825_1370 l1825_1384
l1825_1370:
	v23 = Mem0[ds:0xA1E<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v23
	v24 = Mem0[ds:0xA22<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v24
	v25 = Mem0[ds:0xA20<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v25
	call fn21DC_09B4 (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	// succ:  l1825_1384
l1825_1384:
	ax = 1<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_0527 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	ax = 1<16>
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	di = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_0E72_exit
fn1825_0E72_exit:


// fn1825_139A
// Return size: 4
define fn1825_139A
fn1825_139A_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l1825_139A
l1825_139A:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0xE<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	Mem0[ss:bp - 8<i16>:word16] = 1<16>
	Mem0[ss:bp - 2<i16>:word16] = 0<16>
	ax = Mem0[ss:bp + 10<i16>:word16]
	ax = ax | ax
	SZ = cond(ax)
	O = false
	C = false
	branch Test(EQ,Z) l1825_13CE
	// succ:  l1825_13B3 l1825_13CE
l1825_13B3:
	SCZO = cond(ax - 1<16>)
	branch Test(UGE,C) l1825_13BB
	// succ:  l1825_13B8 l1825_13BB
l1825_13B8:
	goto l1825_147F
	// succ:  l1825_147F
l1825_13BB:
	SCZO = cond(ax - 2<16>)
	branch Test(UGT,CZ) l1825_13C3
	// succ:  l1825_13C0 l1825_13C3
l1825_13C0:
	goto l1825_1494
	// succ:  l1825_1494
l1825_13C3:
	SCZO = cond(ax - 3<16>)
	branch Test(NE,Z) l1825_13CB
	// succ:  l1825_13C8 l1825_13CB
l1825_13C8:
	goto l1825_1760
	// succ:  l1825_1760
l1825_13CB:
	goto l1825_147F
	// succ:  l1825_147F
l1825_13CE:
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	es_bx = Mem0[es:bx + 94<i16>:segptr32]
	si = Mem0[es:bx + 2<i16>:word16]
	si = si | si
	SZ = cond(si)
	O = false
	C = false
	branch Test(NE,Z) l1825_13E0
	// succ:  l1825_13DD l1825_13E0
l1825_13DD:
	goto l1825_147F
	// succ:  l1825_147F
l1825_13E0:
	ax = Mem0[ss:bp + 14<i16>:word16]
	ax = ax + 1<16>
	SZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v18 = Mem0[ss:bp + 12<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v18
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = 0xE<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x55FA<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	ax = Mem0[ss:bp + 14<i16>:word16]
	ax = ax + 0x10<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v20 = Mem0[ss:bp + 12<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v20
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	Mem0[ds:0xA68<16>:byte] = 0<8>
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 1<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 3<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1825_648A (retsize: 4;)
	sp = sp + 0xC<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 10<i16>:word16] = ax
	SCZO = cond(ax - 0x14<16>)
	branch Test(EQ,Z) l1825_147F
	// succ:  l1825_1438 l1825_147F
l1825_1438:
	SCZO = cond(ax - 0xBB8<16>)
	branch Test(EQ,Z) l1825_147F
	// succ:  l1825_143D l1825_147F
l1825_143D:
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn38D6_0CDE (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 6<i16>:word16] = ax
	ax = ax | ax
	SZ = cond(ax)
	O = false
	C = false
	branch Test(LE,SZO) l1825_147F
	// succ:  l1825_1451 l1825_147F
l1825_1451:
	SCZO = cond(ax - si)
	branch Test(UGT,CZ) l1825_147F
	// succ:  l1825_1455 l1825_147F
l1825_1455:
	ax = 0x3E<16>
	dx_ax = Mem0[ss:bp - 6<i16>:word16] *s32 ax
	SCZO = cond(dx_ax)
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	cx = Mem0[es:bx + 94<i16>:word16]
	di = Mem0[es:bx + 96<i16>:word16]
	cx = cx + ax
	SCZO = cond(cx)
	cx = cx - 0x3A<16>
	SCZO = cond(cx)
	Mem0[ss:bp - 14<i16>:word16] = cx
	Mem0[ss:bp - 12<i16>:word16] = di
	es_bx = Mem0[ss:bp - 14<i16>:segptr32]
	SCZO = cond(Mem0[es:bx:word16] - 1<16>)
	ax = ax - ax - C
	SCZO = cond(ax)
	C = ax != 0<16>
	ax = -ax
	SZO = cond(ax)
	Mem0[es:bx:word16] = ax
	// succ:  l1825_147F
l1825_147F:
	SCZO = cond(Mem0[ss:bp - 10<i16>:word16] - 0xBB8<16>)
	branch Test(EQ,Z) l1825_148B
	// succ:  l1825_1486 l1825_148B
l1825_1486:
	Mem0[ss:bp - 10<i16>:word16] = 1<16>
	// succ:  l1825_148B
l1825_148B:
	ax = Mem0[ss:bp - 10<i16>:word16]
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	di = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_139A_exit
l1825_1494:
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	es_bx = Mem0[es:bx + 94<i16>:segptr32]
	si = Mem0[es:bx + 2<i16>:word16]
	SCZO = cond(si - 0x10<16>)
	branch Test(UGE,C) l1825_147F
	// succ:  l1825_14A4 l1825_147F
l1825_14A4:
	Mem0[ss:bp - 4<i16>:word16] = si
	v24 = Mem0[ss:bp + 14<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v24
	v25 = Mem0[ss:bp + 12<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v25
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = 4<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x560A<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	ax = Mem0[ss:bp + 14<i16>:word16]
	ax = ax + 0x10<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v26 = Mem0[ss:bp + 12<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v26
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	SCZO = cond(Mem0[ss:bp + 10<i16>:word16] - 1<16>)
	branch Test(NE,Z) l1825_14E8
	// succ:  l1825_14DE l1825_14E8
l1825_14DE:
	ax = 4<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x5610<16>
	goto l1825_14EF
	// succ:  l1825_14EF
l1825_14E8:
	ax = 4<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x5616<16>
	// succ:  l1825_14EF
l1825_14EF:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	si = Mem0[ss:bp + 14<i16>:word16]
	si = si + 5<16>
	SCZO = cond(si)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	v27 = Mem0[ss:bp + 12<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v27
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	Mem0[ds:0xA68<16>:byte] = 0<8>
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 1<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0xA<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1825_648A (retsize: 4;)
	sp = sp + 0xC<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 10<i16>:word16] = ax
	SCZO = cond(ax - 0x14<16>)
	branch Test(NE,Z) l1825_1535
	// succ:  l1825_1532 l1825_1535
l1825_1532:
	goto l1825_1740
	// succ:  l1825_1740
l1825_1535:
	SCZO = cond(ax - 0xBB8<16>)
	branch Test(NE,Z) l1825_153D
	// succ:  l1825_153A l1825_153D
l1825_153A:
	goto l1825_1740
	// succ:  l1825_1740
l1825_153D:
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn2017_03F5 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = ax | ax
	SZ = cond(ax)
	O = false
	C = false
	branch Test(NE,Z) l1825_15B7
	// succ:  l1825_154E l1825_15B7
l1825_154E:
	SCZO = cond(Mem0[ss:bp + 10<i16>:word16] - 1<16>)
	branch Test(NE,Z) l1825_15B7
	// succ:  l1825_1554 l1825_15B7
l1825_1554:
	ax = 0x16<16>
	dx_ax = Mem0[ds:0x128A<16>:word16] *u32 ax
	SCZO = cond(dx_ax)
	di = ax
	es_bx = Mem0[ds:0x1282<16>:segptr32]
	v30 = Mem0[es:bx + 20<i16> + di:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v30
	v31 = Mem0[es:bx + 18<i16> + di:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v31
	call fn2BC7_050A (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn2017_01BA (retsize: 4;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	v33 = Mem0[ss:bp + 12<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v33
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = 0xA<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x16<16>
	dx_ax = Mem0[ds:0x128A<16>:word16] *u32 ax
	SCZO = cond(dx_ax)
	di = ax
	es_bx = Mem0[ds:0x1282<16>:segptr32]
	v34 = Mem0[es:bx + 20<i16> + di:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v34
	v35 = Mem0[es:bx + 18<i16> + di:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v35
	call fn2BC7_050A (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	// succ:  l1825_15B7
l1825_15B7:
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x3E<16>
	dx_ax = Mem0[ss:bp - 4<i16>:word16] *u32 ax
	SCZO = cond(dx_ax)
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	cx = Mem0[es:bx + 94<i16>:word16]
	si = Mem0[es:bx + 96<i16>:word16]
	cx = cx + ax
	SCZO = cond(cx)
	cx = cx + 8<16>
	SCZO = cond(cx)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = cx
	call fn2017_01BA (retsize: 4;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	ax = Mem0[ss:bp + 14<i16>:word16]
	ax = ax + 0x15<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v36 = Mem0[ss:bp + 12<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v36
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	Mem0[ds:0xA68<16>:byte] = 0<8>
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	SCZO = cond(Mem0[ss:bp + 10<i16>:word16] - 1<16>)
	branch Test(NE,Z) l1825_1602
	// succ:  l1825_15FD l1825_1602
l1825_15FD:
	ax = 1<16>
	goto l1825_1604
	// succ:  l1825_1604
l1825_1602:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l1825_1604
l1825_1604:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x30<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1825_648A (retsize: 4;)
	sp = sp + 0xC<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 10<i16>:word16] = ax
	SCZO = cond(ax - 0x14<16>)
	branch Test(NE,Z) l1825_1620
	// succ:  l1825_161D l1825_1620
l1825_161D:
	goto l1825_1740
	// succ:  l1825_1740
l1825_1620:
	SCZO = cond(ax - 0xBB8<16>)
	branch Test(NE,Z) l1825_1628
	// succ:  l1825_1625 l1825_1628
l1825_1625:
	goto l1825_1740
	// succ:  l1825_1740
l1825_1628:
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn2017_03F5 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = ax | ax
	SZ = cond(ax)
	O = false
	C = false
	branch Test(NE,Z) l1825_163C
	// succ:  l1825_1639 l1825_163C
l1825_1639:
	goto l1825_1740
	// succ:  l1825_1740
l1825_163C:
	SCZO = cond(Mem0[ss:bp + 10<i16>:word16] - 2<16>)
	branch Test(EQ,Z) l1825_1645
	// succ:  l1825_1642 l1825_1645
l1825_1642:
	goto l1825_16D7
	// succ:  l1825_16D7
l1825_1645:
	ax = 0xC08<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1825_6042 (retsize: 4;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	al = Mem0[ds:0xC08<16>:byte]
	ah = ah - ah
	SCZO = cond(ah)
	ax = ax - 0x41<16>
	SCZO = cond(ax)
	v42 = ax
	SCZO = cond(ax - 0x14<16>)
	branch Test(UGT,CZ) l1825_16C4
	// succ:  l1825_1663 l1825_16C4
l1825_1663:
	ax = ax + ax
	SCZO = cond(ax)
	v41 = bx
	bx = ax
	ax = v41
	switch (v42) { l1825_166E l1825_16C4 l1825_166E l1825_166E l1825_16C4 l1825_16C4 l1825_16C4 l1825_16C4 l1825_16C4 l1825_16C4 l1825_16C4 l1825_167D l1825_166E l1825_166E l1825_16C4 l1825_16C4 l1825_16C4 l1825_16C4 l1825_16C4 l1825_16C4 l1825_1676 }
	// succ:  l1825_166E l1825_16C4 l1825_166E l1825_166E l1825_16C4 l1825_16C4 l1825_16C4 l1825_16C4 l1825_16C4 l1825_16C4 l1825_16C4 l1825_167D l1825_166E l1825_166E l1825_16C4 l1825_16C4 l1825_16C4 l1825_16C4 l1825_16C4 l1825_16C4 l1825_1676
l1825_166E:
	Mem0[ss:bp - 2<i16>:word16] = 2<16>
	goto l1825_16C4
	// succ:  l1825_16C4
l1825_1676:
	SCZO = cond(Mem0[ds:0xC09<16>:byte] - 0x49<8>)
	branch Test(NE,Z) l1825_1684
	// succ:  l1825_167D l1825_1684
l1825_167D:
	Mem0[ss:bp - 2<i16>:word16] = 0<16>
	goto l1825_16C4
	// succ:  l1825_16C4
l1825_1684:
	SCZO = cond(Mem0[ds:0xC09<16>:byte] - 0x45<8>)
	branch Test(NE,Z) l1825_1692
	// succ:  l1825_168B l1825_1692
l1825_168B:
	Mem0[ss:bp - 2<i16>:word16] = 1<16>
	goto l1825_16C4
	// succ:  l1825_16C4
l1825_1692:
	Mem0[ss:bp - 2<i16>:word16] = 3<16>
	// succ:  l1825_16C4
l1825_16C4:
	SCZO = cond(Mem0[ss:bp - 2<i16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_16D7
	// succ:  l1825_16CA l1825_16D7
l1825_16CA:
	v44 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v44
	call fn1825_6EA4 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 8<i16>:word16] = ax
	// succ:  l1825_16D7
l1825_16D7:
	SCZO = cond(Mem0[ss:bp - 8<i16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_1740
	// succ:  l1825_16DD l1825_1740
l1825_16DD:
	ax = 0x3E<16>
	dx_ax = Mem0[ss:bp - 4<i16>:word16] *u32 ax
	SCZO = cond(dx_ax)
	si = ax
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	es_bx = Mem0[es:bx + 94<i16>:segptr32]
	ax = bx + 18<i16> + si
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = es
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn2017_01BA (retsize: 4;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	es_bx = Mem0[es:bx + 94<i16>:segptr32]
	Mem0[es:bx + 4<i16> + si:word16] = 1<16>
	SCZO = cond(Mem0[ss:bp + 10<i16>:word16] - 1<16>)
	branch Test(NE,Z) l1825_1720
	// succ:  l1825_1711 l1825_1720
l1825_1711:
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	es_bx = Mem0[es:bx + 94<i16>:segptr32]
	Mem0[es:bx + 6<i16> + si:word16] = 0<16>
	goto l1825_1735
	// succ:  l1825_1735
l1825_1720:
	ax = 0x3E<16>
	dx_ax = Mem0[ss:bp - 4<i16>:word16] *u32 ax
	SCZO = cond(dx_ax)
	bx = ax
	es_si = Mem0[ss:bp + 6<i16>:segptr32]
	es_si = Mem0[es:si + 94<i16>:segptr32]
	Mem0[es:bx + 6<i16> + si:word16] = 1<16>
	// succ:  l1825_1735
l1825_1735:
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	es_bx = Mem0[es:bx + 94<i16>:segptr32]
	v43 = Mem0[es:bx + 2<i16>:word16] + 1<16>
	Mem0[es:bx + 2<i16>:word16] = v43
	SZO = cond(v43)
	// succ:  l1825_1740
l1825_1740:
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	es_bx = Mem0[es:bx + 94<i16>:segptr32]
	SCZO = cond(Mem0[es:bx + 2<i16>:word16] - 0<16>)
	branch Test(NE,Z) l1825_1751
	// succ:  l1825_174E l1825_1751
l1825_174E:
	goto l1825_147F
	// succ:  l1825_147F
l1825_1751:
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	es_bx = Mem0[es:bx + 94<i16>:segptr32]
	Mem0[es:bx:word16] = 1<16>
	goto l1825_147F
	// succ:  l1825_147F
l1825_1760:
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	es_bx = Mem0[es:bx + 94<i16>:segptr32]
	si = Mem0[es:bx + 2<i16>:word16]
	si = si | si
	SZ = cond(si)
	O = false
	C = false
	branch Test(NE,Z) l1825_1772
	// succ:  l1825_176F l1825_1772
l1825_176F:
	goto l1825_147F
	// succ:  l1825_147F
l1825_1772:
	ax = Mem0[ss:bp + 14<i16>:word16]
	ax = ax + 1<16>
	SZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v28 = Mem0[ss:bp + 12<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v28
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = 0xE<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x561C<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	ax = Mem0[ss:bp + 14<i16>:word16]
	ax = ax + 0x10<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v29 = Mem0[ss:bp + 12<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v29
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	Mem0[ds:0xA68<16>:byte] = 0<8>
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 1<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 3<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1825_648A (retsize: 4;)
	sp = sp + 0xC<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 10<i16>:word16] = ax
	SCZO = cond(ax - 0x14<16>)
	branch Test(NE,Z) l1825_17CD
	// succ:  l1825_17CA l1825_17CD
l1825_17CA:
	goto l1825_1864
	// succ:  l1825_1864
l1825_17CD:
	SCZO = cond(ax - 0xBB8<16>)
	branch Test(NE,Z) l1825_17D5
	// succ:  l1825_17D2 l1825_17D5
l1825_17D2:
	goto l1825_1864
	// succ:  l1825_1864
l1825_17D5:
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn38D6_0CDE (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 6<i16>:word16] = ax
	ax = ax | ax
	SZ = cond(ax)
	O = false
	C = false
	branch Test(LE,SZO) l1825_1864
	// succ:  l1825_17E9 l1825_1864
l1825_17E9:
	SCZO = cond(ax - si)
	branch Test(UGT,CZ) l1825_1864
	// succ:  l1825_17ED l1825_1864
l1825_17ED:
	Mem0[ss:bp - 4<i16>:word16] = ax
	goto l1825_1849
	// succ:  l1825_1849
l1825_17F2:
	ax = 0x3E<16>
	dx_ax = Mem0[ss:bp - 4<i16>:word16] *u32 ax
	SCZO = cond(dx_ax)
	si = ax
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	es_bx = Mem0[es:bx + 94<i16>:segptr32]
	ax = bx + 18<i16> + si
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = es
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	es_bx = Mem0[es:bx + 94<i16>:segptr32]
	ax = bx - 44<i16> + si
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = es
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn2017_01BA (retsize: 4;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	es_bx = Mem0[es:bx + 94<i16>:segptr32]
	ax = Mem0[es:bx + 4<i16> + si:word16]
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	es_bx = Mem0[es:bx + 94<i16>:segptr32]
	Mem0[es:bx - 58<i16> + si:word16] = ax
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	es_bx = Mem0[es:bx + 94<i16>:segptr32]
	ax = Mem0[es:bx + 6<i16> + si:word16]
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	es_bx = Mem0[es:bx + 94<i16>:segptr32]
	Mem0[es:bx - 56<i16> + si:word16] = ax
	v38 = Mem0[ss:bp - 4<i16>:word16] + 1<16>
	Mem0[ss:bp - 4<i16>:word16] = v38
	SZO = cond(v38)
	// succ:  l1825_1849
l1825_1849:
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	es_bx = Mem0[es:bx + 94<i16>:segptr32]
	ax = Mem0[ss:bp - 4<i16>:word16]
	SCZO = cond(Mem0[es:bx + 2<i16>:word16] - ax)
	branch Test(UGT,CZ) l1825_17F2
	// succ:  l1825_1859 l1825_17F2
l1825_1859:
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	es_bx = Mem0[es:bx + 94<i16>:segptr32]
	v37 = Mem0[es:bx + 2<i16>:word16] - 1<16>
	Mem0[es:bx + 2<i16>:word16] = v37
	SZO = cond(v37)
	// succ:  l1825_1864
l1825_1864:
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	es_bx = Mem0[es:bx + 94<i16>:segptr32]
	SCZO = cond(Mem0[es:bx + 2<i16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_1875
	// succ:  l1825_1872 l1825_1875
l1825_1872:
	goto l1825_147F
	// succ:  l1825_147F
l1825_1875:
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	es_bx = Mem0[es:bx + 94<i16>:segptr32]
	Mem0[es:bx:word16] = 0<16>
	goto l1825_147F
	// succ:  l1825_147F
fn1825_139A_exit:


// fn1825_1884
// Return size: 4
define fn1825_1884
fn1825_1884_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l1825_1884
l1825_1884:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	es_bx = Mem0[es:bx + 98<i16>:segptr32]
	SCZO = cond(Mem0[es:bx:word16] - 1<16>)
	ax = ax - ax - C
	SCZO = cond(ax)
	C = ax != 0<16>
	ax = -ax
	SZO = cond(ax)
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	es_bx = Mem0[es:bx + 98<i16>:segptr32]
	Mem0[es:bx:word16] = ax
	ax = 1<16>
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_1884_exit
fn1825_1884_exit:


// fn1825_18A6
// Return size: 4
define fn1825_18A6
fn1825_18A6_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l1825_18A6
l1825_18A6:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x2C<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	SCZO = cond(Mem0[ds:0xF02<16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_18E7
	// succ:  l1825_18B5 l1825_18E7
l1825_18B5:
	ax = Mem0[ss:bp - 16<i16>:word16]
	Mem0[ds:0xA16<16>:word16] = ax
	Mem0[ds:0xA18<16>:word16] = 0<16>
	Mem0[ds:0xA1A<16>:word16] = 0x18<16>
	Mem0[ds:0xA1C<16>:word16] = 0x4F<16>
	Mem0[ds:0xA1E<16>:word16] = 0<16>
	ax = ax - ax
	SCZO = cond(ax)
	Mem0[ds:0xA22<16>:word16] = ax
	Mem0[ds:0xA20<16>:word16] = ax
	ax = 0xA16<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1825_4CFE (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	// succ:  l1825_18E7
l1825_18E7:
	Mem0[ss:bp - 36<i16>:word16] = 1<16>
	Mem0[ss:bp - 2<i16>:word16] = 0x2C<16>
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	es_bx = Mem0[es:bx + 98<i16>:segptr32]
	ax = Mem0[es:bx + 6<i16>:word16]
	Mem0[ss:bp - 16<i16>:word16] = ax
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	es_bx = Mem0[es:bx + 98<i16>:segptr32]
	SCZO = cond(Mem0[es:bx + 10<i16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_1924
	// succ:  l1825_190D l1825_1924
l1825_190D:
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	es_bx = Mem0[es:bx + 98<i16>:segptr32]
	si = Mem0[es:bx + 4<i16>:word16]
	ax = si - 44<i16>
	Mem0[ss:bp - 34<i16>:word16] = ax
	ax = si - 1<i16>
	goto l1825_1936
	// succ:  l1825_1936
l1825_1924:
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	es_bx = Mem0[es:bx + 98<i16>:segptr32]
	ax = Mem0[es:bx + 8<i16>:word16]
	ax = ax + 1<16>
	SZO = cond(ax)
	Mem0[ss:bp - 34<i16>:word16] = ax
	ax = ax + Mem0[ss:bp - 2<i16>:word16]
	SCZO = cond(ax)
	// succ:  l1825_1936
l1825_1936:
	Mem0[ss:bp - 4<i16>:word16] = ax
	ax = Mem0[ss:bp - 34<i16>:word16]
	ax = ax + 1<16>
	SZO = cond(ax)
	Mem0[ss:bp - 38<i16>:word16] = ax
	ax = Mem0[ss:bp - 34<i16>:word16]
	ax = ax + 2<16>
	SCZO = cond(ax)
	Mem0[ss:bp - 14<i16>:word16] = ax
	Mem0[ss:bp - 26<i16>:word16] = 0<16>
	// succ:  l1825_194E
l1825_194E:
	bx = Mem0[ss:bp - 26<i16>:word16]
	bx = bx << 1<16>
	SCZO = cond(bx)
	bx = bx << 1<16>
	SCZO = cond(bx)
	es_si = Mem0[ss:bp + 6<i16>:segptr32]
	es_si = Mem0[es:si + 98<i16>:segptr32]
	ax = Mem0[es:bx + 0x22E<16> + si:word16]
	dx = Mem0[es:bx + 0x230<16> + si:word16]
	Mem0[ss:bp - 44<i16>:word16] = ax
	Mem0[ss:bp - 42<i16>:word16] = dx
	ax = ax | dx
	SZ = cond(ax)
	O = false
	C = false
	branch Test(EQ,Z) l1825_1994
	// succ:  l1825_1970 l1825_1994
l1825_1970:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	v21 = Mem0[ss:bp - 44<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v21
	call fn2017_03F5 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	si = Mem0[ss:bp - 26<i16>:word16]
	si = si << 1<16>
	SCZO = cond(si)
	cx = Mem0[ss:bp - 14<i16> + si:word16]
	cx = cx + ax
	SCZO = cond(cx)
	si = Mem0[ss:bp - 26<i16>:word16]
	si = si << 1<16>
	SCZO = cond(si)
	Mem0[ss:bp - 12<i16> + si:word16] = cx
	v23 = Mem0[ss:bp - 26<i16>:word16] + 1<16>
	Mem0[ss:bp - 26<i16>:word16] = v23
	SZO = cond(v23)
	goto l1825_194E
	// succ:  l1825_194E
l1825_1994:
	Mem0[ss:bp - 18<i16>:word16] = 0<16>
	SCZO = cond(Mem0[ss:bp - 26<i16>:word16] - 0<16>)
	branch Test(LE,SZO) l1825_19A6
	// succ:  l1825_199F l1825_19A6
l1825_199F:
	ax = Mem0[ss:bp - 26<i16>:word16]
	ax = ax - 1<16>
	SZO = cond(ax)
	goto l1825_19A8
	// succ:  l1825_19A8
l1825_19A6:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l1825_19A8
l1825_19A8:
	Mem0[ss:bp - 22<i16>:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_0527 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 26<i16>:word16] = 0<16>
	goto l1825_1D06
	// succ:  l1825_1D06
l1825_19BE:
	SCZO = cond(Mem0[ss:bp - 36<i16>:word16] - 0xBB8<16>)
	branch Test(NE,Z) l1825_19C8
	// succ:  l1825_19C5 l1825_19C8
l1825_19C5:
	goto l1825_1D0F
	// succ:  l1825_1D0F
l1825_19C8:
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	es_bx = Mem0[es:bx + 98<i16>:segptr32]
	ax = Mem0[es:bx + 12<i16>:word16]
	ax = ax + 2<16>
	SCZO = cond(ax)
	Mem0[ss:bp - 30<i16>:word16] = ax
	ax = Mem0[ss:bp - 16<i16>:word16]
	ax = ax + Mem0[ss:bp - 30<i16>:word16]
	SCZO = cond(ax)
	Mem0[ss:bp - 6<i16>:word16] = ax
	ax = Mem0[ss:bp - 16<i16>:word16]
	ax = ax + 1<16>
	SZO = cond(ax)
	Mem0[ss:bp - 24<i16>:word16] = ax
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	es_bx = Mem0[es:bx + 98<i16>:segptr32]
	SCZO = cond(Mem0[es:bx:word16] - 0<16>)
	branch Test(EQ,Z) l1825_1A03
	// succ:  l1825_19F6 l1825_1A03
l1825_19F6:
	v27 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v27
	v28 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v28
	call fn1825_2020 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	// succ:  l1825_1A03
l1825_1A03:
	ax = 0xA5E<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v29 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v29
	v30 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v30
	v31 = Mem0[ss:bp - 34<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v31
	v32 = Mem0[ss:bp - 16<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v32
	call fn1F38_05DB (retsize: 4;)
	sp = sp + 0xC<16>
	SCZO = cond(sp)
	ax = 0xA2C<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v33 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v33
	v34 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v34
	v35 = Mem0[ss:bp - 34<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v35
	v36 = Mem0[ss:bp - 16<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v36
	call fn1F38_05DB (retsize: 4;)
	sp = sp + 0xC<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 32<i16>:word16] = 0<16>
	goto l1825_1A8F
	// succ:  l1825_1A8F
l1825_1A3C:
	di = Mem0[ss:bp - 32<i16>:word16]
	di = di << 1<16>
	SCZO = cond(di)
	v37 = Mem0[ss:bp - 14<i16> + di:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v37
	v38 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v38
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	si = Mem0[ss:bp - 32<i16>:word16]
	cl = 2<8>
	si = si << cl
	SCZO = cond(si)
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	es_bx = Mem0[es:bx + 98<i16>:segptr32]
	v40 = Mem0[es:bx + 0x230<16> + si:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v40
	v41 = Mem0[es:bx + 0x22E<16> + si:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v41
	call fn2017_03F5 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 40<i16>:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	es_bx = Mem0[es:bx + 98<i16>:segptr32]
	v42 = Mem0[es:bx + 0x230<16> + si:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v42
	v43 = Mem0[es:bx + 0x22E<16> + si:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v43
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	v44 = Mem0[ss:bp - 32<i16>:word16] + 1<16>
	Mem0[ss:bp - 32<i16>:word16] = v44
	SZO = cond(v44)
	// succ:  l1825_1A8F
l1825_1A8F:
	ax = Mem0[ss:bp - 22<i16>:word16]
	SCZO = cond(Mem0[ss:bp - 32<i16>:word16] - ax)
	branch Test(LE,SZO) l1825_1A3C
	// succ:  l1825_1A97 l1825_1A3C
l1825_1A97:
	Mem0[ss:bp - 28<i16>:word16] = 0<16>
	goto l1825_1B09
	// succ:  l1825_1B09
l1825_1A9E:
	ax = 5<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x5632<16>
	// succ:  l1825_1AA5
l1825_1AA5:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	ax = Mem0[ss:bp - 38<i16>:word16]
	ax = ax + 0xA<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 28<i16>:word16]
	ax = ax + Mem0[ss:bp - 24<i16>:word16]
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = 0x22<16>
	dx_ax = Mem0[ss:bp - 28<i16>:word16] *s32 ax
	SCZO = cond(dx_ax)
	si = ax
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	es_bx = Mem0[es:bx + 98<i16>:segptr32]
	ax = bx + 16<i16> + si
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = es
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn2017_03F5 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 40<i16>:word16] = ax
	ax = ax - 0x20<16>
	SCZO = cond(ax)
	cx = cx - cx - C
	SCZO = cond(cx)
	ax = ax & cx
	SZ = cond(ax)
	O = false
	C = false
	ax = ax + 0x20<16>
	SCZO = cond(ax)
	Mem0[ss:bp - 40<i16>:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	es_bx = Mem0[es:bx + 98<i16>:segptr32]
	ax = bx + 16<i16> + si
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = es
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	v57 = Mem0[ss:bp - 28<i16>:word16] + 1<16>
	Mem0[ss:bp - 28<i16>:word16] = v57
	SZO = cond(v57)
	// succ:  l1825_1B09
l1825_1B09:
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	es_bx = Mem0[es:bx + 98<i16>:segptr32]
	ax = Mem0[ss:bp - 28<i16>:word16]
	SCZO = cond(Mem0[es:bx + 12<i16>:word16] - ax)
	branch Test(ULE,CZ) l1825_1B70
	// succ:  l1825_1B19 l1825_1B70
l1825_1B19:
	si = ax
	si = si + Mem0[ss:bp - 24<i16>:word16]
	SCZO = cond(si)
	ax = Mem0[ss:bp - 38<i16>:word16]
	ax = ax + 1<16>
	SZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = 2<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 28<i16>:word16]
	ax = ax + 1<16>
	SZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1825_63F8 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = Mem0[ss:bp - 38<i16>:word16]
	ax = ax + 4<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = 0x22<16>
	dx_ax = Mem0[ss:bp - 28<i16>:word16] *s32 ax
	SCZO = cond(dx_ax)
	bx = ax
	es_di = Mem0[ss:bp + 6<i16>:segptr32]
	es_di = Mem0[es:di + 98<i16>:segptr32]
	SCZO = cond(Mem0[es:bx + 14<i16> + di:word16] - 0<16>)
	branch Test(NE,Z) l1825_1B65
	// succ:  l1825_1B62 l1825_1B65
l1825_1B62:
	goto l1825_1A9E
	// succ:  l1825_1A9E
l1825_1B65:
	ax = 5<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x562C<16>
	goto l1825_1AA5
	// succ:  l1825_1AA5
l1825_1B70:
	bx = Mem0[ss:bp - 26<i16>:word16]
	bx = bx << 1<16>
	SCZO = cond(bx)
	bx = bx + bp
	SCZO = cond(bx)
	si = Mem0[ds:bx - 14<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	v48 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v48
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	call fn1F38_07FA (retsize: 4;)
	di = Mem0[ss:bp - 26<i16>:word16]
	cl = 2<8>
	di = di << cl
	SCZO = cond(di)
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	es_bx = Mem0[es:bx + 98<i16>:segptr32]
	v49 = Mem0[es:bx + 0x230<16> + di:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v49
	v50 = Mem0[es:bx + 0x22E<16> + di:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v50
	call fn2017_03F5 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 40<i16>:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	es_bx = Mem0[es:bx + 98<i16>:segptr32]
	v51 = Mem0[es:bx + 0x230<16> + di:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v51
	v52 = Mem0[es:bx + 0x22E<16> + di:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v52
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 8<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn3431_07B6 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 36<i16>:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	v53 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v53
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	call fn1F38_07E7 (retsize: 4;)
	v54 = Mem0[ss:bp - 40<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v54
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	es_bx = Mem0[es:bx + 98<i16>:segptr32]
	v55 = Mem0[es:bx + 0x230<16> + di:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v55
	v56 = Mem0[es:bx + 0x22E<16> + di:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v56
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	ax = Mem0[ss:bp - 36<i16>:word16]
	ax = ax - 1<16>
	SCZO = cond(ax)
	v59 = ax
	SCZO = cond(ax - 0x13<16>)
	branch Test(ULE,CZ) l1825_1C15
	// succ:  l1825_1C12 l1825_1C15
l1825_1C12:
	goto l1825_1D06
	// succ:  l1825_1D06
l1825_1C15:
	ax = ax + ax
	SCZO = cond(ax)
	v58 = bx
	bx = ax
	ax = v58
	switch (v59) { l1825_1C34 l1825_1C64 l1825_1D06 l1825_1D06 l1825_1D06 l1825_1C8E l1825_1CBE l1825_1CCE l1825_1CD9 l1825_1CC9 l1825_1D06 l1825_1D06 l1825_1D06 l1825_1D06 l1825_1D06 l1825_1D06 l1825_1D06 l1825_1D06 l1825_1D06 l1825_1C1E }
	// succ:  l1825_1C34 l1825_1C64 l1825_1D06 l1825_1D06 l1825_1D06 l1825_1C8E l1825_1CBE l1825_1CCE l1825_1CD9 l1825_1CC9 l1825_1D06 l1825_1D06 l1825_1D06 l1825_1D06 l1825_1D06 l1825_1D06 l1825_1D06 l1825_1D06 l1825_1D06 l1825_1C1E
l1825_1C1E:
	v66 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v66
	v67 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v67
	call fn1825_6D80 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	Mem0[ds:0x90A<16>:word16] = 0<16>
	goto l1825_1D06
	// succ:  l1825_1D06
l1825_1C34:
	ax = Mem0[ss:bp - 36<i16>:word16]
	Mem0[ds:0x966<16>:word16] = ax
	ax = 0x95C<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v60 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v60
	v61 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v61
	call fn1825_6B02 (retsize: 4;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 36<i16>:word16] = ax
	SCZO = cond(ax - 0xBB8<16>)
	branch Test(EQ,Z) l1825_1C57
	// succ:  l1825_1C54 l1825_1C57
l1825_1C54:
	goto l1825_1D06
	// succ:  l1825_1D06
l1825_1C57:
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	Mem0[es:bx + 24<i16>:word16] = 3<16>
	goto l1825_1D06
	// succ:  l1825_1D06
l1825_1C64:
	ax = 1<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	ax = Mem0[es:bx + 98<i16>:word16]
	dx = Mem0[es:bx + 100<i16>:word16]
	ax = ax + 0x22E<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1825_66D4 (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 20<i16>:word16] = ax
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(LE,SZO) l1825_1D06
	// succ:  l1825_1C87 l1825_1D06
l1825_1C87:
	Mem0[ss:bp - 26<i16>:word16] = ax
	goto l1825_1D06
	// succ:  l1825_1D06
l1825_1C8E:
	v62 = Mem0[ss:bp - 38<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v62
	ax = Mem0[ss:bp - 6<i16>:word16]
	ax = ax - 1<16>
	SZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v63 = Mem0[ss:bp - 26<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v63
	v64 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v64
	v65 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v65
	call fn1825_1D40 (retsize: 4;)
	sp = sp + 0xA<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 36<i16>:word16] = ax
	SCZO = cond(Mem0[ds:0xF02<16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_1D06
	// succ:  l1825_1CB0 l1825_1D06
l1825_1CB0:
	ax = 0xA16<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1825_4D78 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	goto l1825_1D06
	// succ:  l1825_1D06
l1825_1CBE:
	v69 = Mem0[ss:bp - 26<i16>:word16] - 1<16>
	Mem0[ss:bp - 26<i16>:word16] = v69
	SZO = cond(v69)
	ax = Mem0[ss:bp - 18<i16>:word16]
	SCZO = cond(Mem0[ss:bp - 26<i16>:word16] - ax)
	branch Test(GE,SO) l1825_1D06
	// succ:  l1825_1CC9 l1825_1D06
l1825_1CC9:
	ax = Mem0[ss:bp - 22<i16>:word16]
	goto l1825_1C87
	// succ:  l1825_1C87
l1825_1CCE:
	v68 = Mem0[ss:bp - 26<i16>:word16] + 1<16>
	Mem0[ss:bp - 26<i16>:word16] = v68
	SZO = cond(v68)
	ax = Mem0[ss:bp - 22<i16>:word16]
	SCZO = cond(Mem0[ss:bp - 26<i16>:word16] - ax)
	branch Test(LE,SZO) l1825_1D06
	// succ:  l1825_1CD9 l1825_1D06
l1825_1CD9:
	ax = Mem0[ss:bp - 18<i16>:word16]
	goto l1825_1C87
	// succ:  l1825_1C87
l1825_1D06:
	SCZO = cond(Mem0[ss:bp - 36<i16>:word16] - 0x14<16>)
	branch Test(EQ,Z) l1825_1D0F
	// succ:  l1825_1D0C l1825_1D0F
l1825_1D0C:
	goto l1825_19BE
	// succ:  l1825_19BE
l1825_1D0F:
	SCZO = cond(Mem0[ds:0xF02<16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_1D2A
	// succ:  l1825_1D16 l1825_1D2A
l1825_1D16:
	v24 = Mem0[ds:0xA1E<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v24
	v25 = Mem0[ds:0xA22<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v25
	v26 = Mem0[ds:0xA20<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v26
	call fn21DC_09B4 (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	// succ:  l1825_1D2A
l1825_1D2A:
	ax = 1<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_0527 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	ax = 1<16>
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	di = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_18A6_exit
fn1825_18A6_exit:


// fn1825_1D40
// Return size: 4
define fn1825_1D40
fn1825_1D40_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l1825_1D40
l1825_1D40:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0xA<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	ax = Mem0[ss:bp + 10<i16>:word16]
	ax = ax | ax
	SZ = cond(ax)
	O = false
	C = false
	branch Test(EQ,Z) l1825_1D62
	// succ:  l1825_1D4F l1825_1D62
l1825_1D4F:
	SCZO = cond(ax - 1<16>)
	branch Test(NE,Z) l1825_1D57
	// succ:  l1825_1D54 l1825_1D57
l1825_1D54:
	goto l1825_1E28
	// succ:  l1825_1E28
l1825_1D57:
	SCZO = cond(ax - 2<16>)
	branch Test(NE,Z) l1825_1D5F
	// succ:  l1825_1D5C l1825_1D5F
l1825_1D5C:
	goto l1825_1EBE
	// succ:  l1825_1EBE
l1825_1D5F:
	goto l1825_1E13
	// succ:  l1825_1E13
l1825_1D62:
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	es_bx = Mem0[es:bx + 98<i16>:segptr32]
	si = Mem0[es:bx + 12<i16>:word16]
	si = si | si
	SZ = cond(si)
	O = false
	C = false
	branch Test(NE,Z) l1825_1D74
	// succ:  l1825_1D71 l1825_1D74
l1825_1D71:
	goto l1825_1E13
	// succ:  l1825_1E13
l1825_1D74:
	ax = Mem0[ss:bp + 14<i16>:word16]
	ax = ax + 1<16>
	SZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v22 = Mem0[ss:bp + 12<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v22
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = 0xE<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x5638<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	ax = Mem0[ss:bp + 14<i16>:word16]
	ax = ax + 0x10<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v23 = Mem0[ss:bp + 12<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v23
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	Mem0[ds:0xA68<16>:byte] = 0<8>
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 1<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 3<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1825_648A (retsize: 4;)
	sp = sp + 0xC<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 6<i16>:word16] = ax
	SCZO = cond(ax - 0x14<16>)
	branch Test(EQ,Z) l1825_1E13
	// succ:  l1825_1DCC l1825_1E13
l1825_1DCC:
	SCZO = cond(ax - 0xBB8<16>)
	branch Test(EQ,Z) l1825_1E13
	// succ:  l1825_1DD1 l1825_1E13
l1825_1DD1:
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn38D6_0CDE (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 4<i16>:word16] = ax
	ax = ax | ax
	SZ = cond(ax)
	O = false
	C = false
	branch Test(LE,SZO) l1825_1E13
	// succ:  l1825_1DE5 l1825_1E13
l1825_1DE5:
	SCZO = cond(ax - si)
	branch Test(UGT,CZ) l1825_1E13
	// succ:  l1825_1DE9 l1825_1E13
l1825_1DE9:
	ax = 0x22<16>
	dx_ax = Mem0[ss:bp - 4<i16>:word16] *s32 ax
	SCZO = cond(dx_ax)
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	cx = Mem0[es:bx + 98<i16>:word16]
	di = Mem0[es:bx + 100<i16>:word16]
	cx = cx + ax
	SCZO = cond(cx)
	cx = cx - 0x14<16>
	SCZO = cond(cx)
	Mem0[ss:bp - 10<i16>:word16] = cx
	Mem0[ss:bp - 8<i16>:word16] = di
	es_bx = Mem0[ss:bp - 10<i16>:segptr32]
	SCZO = cond(Mem0[es:bx:word16] - 1<16>)
	ax = ax - ax - C
	SCZO = cond(ax)
	C = ax != 0<16>
	ax = -ax
	SZO = cond(ax)
	Mem0[es:bx:word16] = ax
	// succ:  l1825_1E13
l1825_1E13:
	SCZO = cond(Mem0[ss:bp - 6<i16>:word16] - 0xBB8<16>)
	branch Test(EQ,Z) l1825_1E1F
	// succ:  l1825_1E1A l1825_1E1F
l1825_1E1A:
	Mem0[ss:bp - 6<i16>:word16] = 1<16>
	// succ:  l1825_1E1F
l1825_1E1F:
	ax = Mem0[ss:bp - 6<i16>:word16]
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	di = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_1D40_exit
l1825_1E28:
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	es_bx = Mem0[es:bx + 98<i16>:segptr32]
	si = Mem0[es:bx + 12<i16>:word16]
	SCZO = cond(si - 0x10<16>)
	branch Test(UGE,C) l1825_1E13
	// succ:  l1825_1E38 l1825_1E13
l1825_1E38:
	ax = Mem0[ss:bp + 14<i16>:word16]
	ax = ax + 1<16>
	SZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v18 = Mem0[ss:bp + 12<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v18
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	Mem0[ds:0xA68<16>:byte] = 0<8>
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x20<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1825_648A (retsize: 4;)
	sp = sp + 0xC<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 6<i16>:word16] = ax
	SCZO = cond(ax - 0x14<16>)
	branch Test(EQ,Z) l1825_1E13
	// succ:  l1825_1E6A l1825_1E13
l1825_1E6A:
	SCZO = cond(ax - 0xBB8<16>)
	branch Test(EQ,Z) l1825_1E13
	// succ:  l1825_1E6F l1825_1E13
l1825_1E6F:
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn2017_03F5 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = ax | ax
	SZ = cond(ax)
	O = false
	C = false
	branch Test(EQ,Z) l1825_1E13
	// succ:  l1825_1E80 l1825_1E13
l1825_1E80:
	Mem0[ss:bp - 2<i16>:word16] = si
	ax = 0x22<16>
	dx_ax = si *u32 ax
	SCZO = cond(dx_ax)
	di = ax
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	es_bx = Mem0[es:bx + 98<i16>:segptr32]
	Mem0[es:bx + 14<i16> + di:word16] = 1<16>
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	es_bx = Mem0[es:bx + 98<i16>:segptr32]
	ax = bx + 16<i16> + di
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = es
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn2017_01BA (retsize: 4;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	es_bx = Mem0[es:bx + 98<i16>:segptr32]
	v21 = Mem0[es:bx + 12<i16>:word16] + 1<16>
	Mem0[es:bx + 12<i16>:word16] = v21
	SZO = cond(v21)
	goto l1825_1E13
	// succ:  l1825_1E13
l1825_1EBE:
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	es_bx = Mem0[es:bx + 98<i16>:segptr32]
	si = Mem0[es:bx + 12<i16>:word16]
	si = si | si
	SZ = cond(si)
	O = false
	C = false
	branch Test(NE,Z) l1825_1ED0
	// succ:  l1825_1ECD l1825_1ED0
l1825_1ECD:
	goto l1825_1E13
	// succ:  l1825_1E13
l1825_1ED0:
	ax = Mem0[ss:bp + 14<i16>:word16]
	ax = ax + 1<16>
	SZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v26 = Mem0[ss:bp + 12<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v26
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = 0xE<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x5648<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	ax = Mem0[ss:bp + 14<i16>:word16]
	ax = ax + 0x10<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v27 = Mem0[ss:bp + 12<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v27
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	Mem0[ds:0xA68<16>:byte] = 0<8>
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 1<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 3<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1825_648A (retsize: 4;)
	sp = sp + 0xC<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 6<i16>:word16] = ax
	SCZO = cond(ax - 0x14<16>)
	branch Test(NE,Z) l1825_1F2B
	// succ:  l1825_1F28 l1825_1F2B
l1825_1F28:
	goto l1825_1E13
	// succ:  l1825_1E13
l1825_1F2B:
	SCZO = cond(ax - 0xBB8<16>)
	branch Test(NE,Z) l1825_1F33
	// succ:  l1825_1F30 l1825_1F33
l1825_1F30:
	goto l1825_1E13
	// succ:  l1825_1E13
l1825_1F33:
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn38D6_0CDE (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 4<i16>:word16] = ax
	ax = ax | ax
	SZ = cond(ax)
	O = false
	C = false
	branch Test(GT,SZO) l1825_1F4A
	// succ:  l1825_1F47 l1825_1F4A
l1825_1F47:
	goto l1825_1E13
	// succ:  l1825_1E13
l1825_1F4A:
	SCZO = cond(ax - si)
	branch Test(ULE,CZ) l1825_1F51
	// succ:  l1825_1F4E l1825_1F51
l1825_1F4E:
	goto l1825_1E13
	// succ:  l1825_1E13
l1825_1F51:
	Mem0[ss:bp - 2<i16>:word16] = ax
	goto l1825_1F97
	// succ:  l1825_1F97
l1825_1F56:
	ax = 0x22<16>
	dx_ax = Mem0[ss:bp - 2<i16>:word16] *u32 ax
	SCZO = cond(dx_ax)
	si = ax
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	es_bx = Mem0[es:bx + 98<i16>:segptr32]
	ax = bx + 16<i16> + si
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = es
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	es_bx = Mem0[es:bx + 98<i16>:segptr32]
	ax = bx - 18<i16> + si
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = es
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn2017_01BA (retsize: 4;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	es_bx = Mem0[es:bx + 98<i16>:segptr32]
	ax = Mem0[es:bx + 14<i16> + si:word16]
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	es_bx = Mem0[es:bx + 98<i16>:segptr32]
	Mem0[es:bx - 20<i16> + si:word16] = ax
	v29 = Mem0[ss:bp - 2<i16>:word16] + 1<16>
	Mem0[ss:bp - 2<i16>:word16] = v29
	SZO = cond(v29)
	// succ:  l1825_1F97
l1825_1F97:
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	es_bx = Mem0[es:bx + 98<i16>:segptr32]
	ax = Mem0[ss:bp - 2<i16>:word16]
	SCZO = cond(Mem0[es:bx + 12<i16>:word16] - ax)
	branch Test(UGT,CZ) l1825_1F56
	// succ:  l1825_1FA7 l1825_1F56
l1825_1FA7:
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	es_bx = Mem0[es:bx + 98<i16>:segptr32]
	v28 = Mem0[es:bx + 12<i16>:word16] - 1<16>
	Mem0[es:bx + 12<i16>:word16] = v28
	SZO = cond(v28)
	goto l1825_1E13
	// succ:  l1825_1E13
fn1825_1D40_exit:


// fn1825_1FB6
// Return size: 4
define fn1825_1FB6
fn1825_1FB6_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l1825_1FB6
l1825_1FB6:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	es_bx = Mem0[es:bx + 98<i16>:segptr32]
	SCZO = cond(Mem0[es:bx + 10<i16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_1FF4
	// succ:  l1825_1FC7 l1825_1FF4
l1825_1FC7:
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	es_bx = Mem0[es:bx + 98<i16>:segptr32]
	Mem0[es:bx + 4<i16>:word16] = 1<16>
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	es_bx = Mem0[es:bx + 98<i16>:segptr32]
	Mem0[es:bx + 8<i16>:word16] = 0x17<16>
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	es_bx = Mem0[es:bx + 98<i16>:segptr32]
	Mem0[es:bx + 10<i16>:word16] = 0<16>
	ax = 1<16>
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_1FB6_exit
l1825_1FF4:
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	es_bx = Mem0[es:bx + 98<i16>:segptr32]
	Mem0[es:bx + 4<i16>:word16] = 0x38<16>
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	es_bx = Mem0[es:bx + 98<i16>:segptr32]
	Mem0[es:bx + 8<i16>:word16] = 0x4E<16>
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	es_bx = Mem0[es:bx + 98<i16>:segptr32]
	Mem0[es:bx + 10<i16>:word16] = 1<16>
	ax = 1<16>
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_1FB6_exit
fn1825_1FB6_exit:


// fn1825_2020
// Return size: 4
define fn1825_2020
fn1825_2020_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l1825_2020
l1825_2020:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x16<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	es_bx = Mem0[es:bx + 98<i16>:segptr32]
	ax = Mem0[es:bx:word16]
	Mem0[ss:bp - 8<i16>:word16] = ax
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	es_bx = Mem0[es:bx + 98<i16>:segptr32]
	ax = Mem0[es:bx + 2<i16>:word16]
	Mem0[ss:bp - 6<i16>:word16] = ax
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	es_bx = Mem0[es:bx + 98<i16>:segptr32]
	ax = Mem0[es:bx + 4<i16>:word16]
	Mem0[ss:bp - 14<i16>:word16] = ax
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	es_bx = Mem0[es:bx + 98<i16>:segptr32]
	ax = Mem0[es:bx + 6<i16>:word16]
	Mem0[ss:bp - 4<i16>:word16] = ax
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	es_bx = Mem0[es:bx + 98<i16>:segptr32]
	ax = Mem0[es:bx + 8<i16>:word16]
	Mem0[ss:bp - 2<i16>:word16] = ax
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	es_bx = Mem0[es:bx + 98<i16>:segptr32]
	ax = Mem0[es:bx + 12<i16>:word16]
	Mem0[ss:bp - 12<i16>:word16] = ax
	ax = 0xA5E<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v14 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v14
	v15 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v15
	v16 = Mem0[ss:bp - 14<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v16
	v17 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v17
	call fn1F38_05DB (retsize: 4;)
	sp = sp + 0xC<16>
	SCZO = cond(sp)
	ax = 0xA2C<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v18 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v18
	v19 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v19
	v20 = Mem0[ss:bp - 14<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v20
	v21 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v21
	call fn1F38_05DB (retsize: 4;)
	sp = sp + 0xC<16>
	SCZO = cond(sp)
	si = Mem0[ss:bp - 14<i16>:word16]
	si = si + 1<16>
	SZO = cond(si)
	di = Mem0[ss:bp - 6<i16>:word16]
	di = di + 1<16>
	SZO = cond(di)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = 5<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x5658<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	ax = Mem0[ss:bp - 14<i16>:word16]
	ax = ax + 6<16>
	SCZO = cond(ax)
	Mem0[ss:bp - 18<i16>:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = 0x16<16>
	dx_ax = Mem0[ds:0x128A<16>:word16] *u32 ax
	SCZO = cond(dx_ax)
	bx = ax
	bx = bx + Mem0[ds:0x1282<16>:word16]
	SCZO = cond(bx)
	es = Mem0[ds:0x1284<16>:selector]
	v24 = Mem0[es:bx + 20<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v24
	v25 = Mem0[es:bx + 18<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v25
	call fn2BC7_050A (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn2017_03F5 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 16<i16>:word16] = ax
	ax = ax - 0xA<16>
	SCZO = cond(ax)
	cx = cx - cx - C
	SCZO = cond(cx)
	ax = ax & cx
	SZ = cond(ax)
	O = false
	C = false
	ax = ax + 0xA<16>
	SCZO = cond(ax)
	Mem0[ss:bp - 16<i16>:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x16<16>
	dx_ax = Mem0[ds:0x128A<16>:word16] *u32 ax
	SCZO = cond(dx_ax)
	bx = ax
	bx = bx + Mem0[ds:0x1282<16>:word16]
	SCZO = cond(bx)
	es = Mem0[ds:0x1284<16>:selector]
	v31 = Mem0[es:bx + 20<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v31
	v32 = Mem0[es:bx + 18<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v32
	call fn2BC7_050A (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	di = Mem0[ss:bp - 6<i16>:word16]
	di = di + 2<16>
	SCZO = cond(di)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = 6<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x565E<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	v33 = Mem0[ss:bp - 18<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v33
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = 6<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v34 = Mem0[ds:0x127A<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v34
	call fn1825_63F8 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	di = Mem0[ss:bp - 6<i16>:word16]
	di = di + 3<16>
	SCZO = cond(di)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = 0xC<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x5664<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	ax = Mem0[ss:bp - 14<i16>:word16]
	ax = ax + 0xE<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	es_bx = Mem0[es:bx + 94<i16>:segptr32]
	SCZO = cond(Mem0[es:bx:word16] - 0<16>)
	branch Test(EQ,Z) l1825_21CE
	// succ:  l1825_21C4 l1825_21CE
l1825_21C4:
	ax = 4<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x5672<16>
	goto l1825_21D5
	// succ:  l1825_21D5
l1825_21CE:
	ax = 5<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x5678<16>
	// succ:  l1825_21D5
l1825_21D5:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	SCZO = cond(Mem0[ss:bp - 12<i16>:word16] - 0<16>)
	branch Test(NE,Z) l1825_21E8
	// succ:  l1825_21E5 l1825_21E8
l1825_21E5:
	goto l1825_22B6
	// succ:  l1825_22B6
l1825_21E8:
	v36 = Mem0[ss:bp - 6<i16>:word16] + 4<16>
	Mem0[ss:bp - 6<i16>:word16] = v36
	SCZO = cond(v36)
	ax = Mem0[ss:bp - 4<i16>:word16]
	ax = ax + Mem0[ss:bp - 12<i16>:word16]
	SCZO = cond(ax)
	ax = ax + 1<16>
	SZO = cond(ax)
	Mem0[ss:bp - 4<i16>:word16] = ax
	ax = 0xA5E<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v37 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v37
	v38 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v38
	v39 = Mem0[ss:bp - 14<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v39
	v40 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v40
	call fn1F38_05DB (retsize: 4;)
	sp = sp + 0xC<16>
	SCZO = cond(sp)
	ax = 0xA40<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v41 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v41
	v42 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v42
	v43 = Mem0[ss:bp - 14<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v43
	v44 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v44
	call fn1F38_05DB (retsize: 4;)
	sp = sp + 0xC<16>
	SCZO = cond(sp)
	v45 = Mem0[ss:bp - 6<i16>:word16] + 1<16>
	Mem0[ss:bp - 6<i16>:word16] = v45
	SZO = cond(v45)
	v46 = Mem0[ss:bp - 14<i16>:word16] + 1<16>
	Mem0[ss:bp - 14<i16>:word16] = v46
	SZO = cond(v46)
	Mem0[ss:bp - 10<i16>:word16] = 0<16>
	goto l1825_224D
	// succ:  l1825_224D
l1825_2236:
	ax = 5<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x567E<16>
	// succ:  l1825_223D
l1825_223D:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	v49 = Mem0[ss:bp - 6<i16>:word16] + 1<16>
	Mem0[ss:bp - 6<i16>:word16] = v49
	SZO = cond(v49)
	v50 = Mem0[ss:bp - 10<i16>:word16] + 1<16>
	Mem0[ss:bp - 10<i16>:word16] = v50
	SZO = cond(v50)
	// succ:  l1825_224D
l1825_224D:
	ax = Mem0[ss:bp - 12<i16>:word16]
	SCZO = cond(Mem0[ss:bp - 10<i16>:word16] - ax)
	branch Test(UGE,C) l1825_22B6
	// succ:  l1825_2255 l1825_22B6
l1825_2255:
	v47 = Mem0[ss:bp - 14<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v47
	v48 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v48
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = 0x22<16>
	dx_ax = Mem0[ss:bp - 10<i16>:word16] *u32 ax
	SCZO = cond(dx_ax)
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	cx = Mem0[es:bx + 98<i16>:word16]
	si = Mem0[es:bx + 100<i16>:word16]
	cx = cx + ax
	SCZO = cond(cx)
	Mem0[ss:bp - 22<i16>:word16] = cx
	Mem0[ss:bp - 20<i16>:word16] = si
	es_bx = Mem0[ss:bp - 22<i16>:segptr32]
	SCZO = cond(Mem0[es:bx + 14<i16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_2236
	// succ:  l1825_2286 l1825_2236
l1825_2286:
	ax = 1<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = cx
	dx = si
	ax = ax + 0x10<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1825_6078 (retsize: 4;)
	sp = sp + 0xA<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 16<i16>:word16] = ax
	ax = ax - 0x14<16>
	SCZO = cond(ax)
	cx = cx - cx - C
	SCZO = cond(cx)
	ax = ax & cx
	SZ = cond(ax)
	O = false
	C = false
	ax = ax + 0x14<16>
	SCZO = cond(ax)
	Mem0[ss:bp - 16<i16>:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0xA68<16>
	goto l1825_223D
	// succ:  l1825_223D
l1825_22B6:
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	di = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_2020_exit
fn1825_2020_exit:


// fn1825_22BC
// Return size: 4
define fn1825_22BC
fn1825_22BC_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l1825_22BC
l1825_22BC:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 6<16>
	SCZO = cond(sp)
	ax = Mem0[ds:0x209A<16>:word16]
	Mem0[ds:0xA2A<16>:word16] = ax
	Mem0[ds:0x209A<16>:word16] = 1<16>
	call fn1F38_0517 (retsize: 4;)
	al = ah
	ah = ah - ah
	SCZO = cond(ah)
	Mem0[ss:bp - 2<i16>:word16] = ax
	call fn1F38_0517 (retsize: 4;)
	ah = ah - ah
	SCZO = cond(ah)
	Mem0[ss:bp - 6<i16>:word16] = ax
	SCZO = cond(Mem0[ds:0xF02<16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_22F8
	// succ:  l1825_22EB l1825_22F8
l1825_22EB:
	v12 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v12
	v13 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v13
	call fn1825_2338 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	// succ:  l1825_22F8
l1825_22F8:
	call fn1825_70D4 (retsize: 4;)
	v14 = Mem0[ds:0xEE6<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v14
	call fn1825_7078 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	v15 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v15
	v16 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v16
	call fn1825_2020 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	call fn1825_7106 (retsize: 4;)
	SCZO = cond(Mem0[ds:0xF02<16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_2323
	// succ:  l1825_231F l1825_2323
l1825_231F:
	call fn1825_23A8 (retsize: 4;)
	// succ:  l1825_2323
l1825_2323:
	v17 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v17
	v18 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v18
	call fn1F38_04E7 (retsize: 4;)
	ax = Mem0[ds:0xA2A<16>:word16]
	Mem0[ds:0x209A<16>:word16] = ax
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_22BC_exit
fn1825_22BC_exit:


// fn1825_2338
// Return size: 4
define fn1825_2338
fn1825_2338_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l1825_2338
l1825_2338:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	es_bx = Mem0[es:bx + 98<i16>:segptr32]
	ax = Mem0[es:bx + 2<i16>:word16]
	Mem0[ds:0x9FA<16>:word16] = ax
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	es_bx = Mem0[es:bx + 98<i16>:segptr32]
	ax = Mem0[es:bx + 4<i16>:word16]
	Mem0[ds:0x9FC<16>:word16] = ax
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	es_bx = Mem0[es:bx + 98<i16>:segptr32]
	ax = Mem0[es:bx + 6<i16>:word16]
	Mem0[ds:0x9FE<16>:word16] = ax
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	es_bx = Mem0[es:bx + 98<i16>:segptr32]
	ax = Mem0[es:bx + 8<i16>:word16]
	Mem0[ds:0xA00<16>:word16] = ax
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	es_bx = Mem0[es:bx + 98<i16>:segptr32]
	si = Mem0[es:bx + 12<i16>:word16]
	si = si | si
	SZ = cond(si)
	O = false
	C = false
	branch Test(EQ,Z) l1825_238B
	// succ:  l1825_2383 l1825_238B
l1825_2383:
	v16 = Mem0[ds:0x9FE<16>:word16] + si
	Mem0[ds:0x9FE<16>:word16] = v16
	SCZO = cond(v16)
	v18 = Mem0[ds:0x9FE<16>:word16] + 1<16>
	Mem0[ds:0x9FE<16>:word16] = v18
	SZO = cond(v18)
	// succ:  l1825_238B
l1825_238B:
	Mem0[ds:0xA02<16>:word16] = 0<16>
	ax = ax - ax
	SCZO = cond(ax)
	Mem0[ds:0xA06<16>:word16] = ax
	Mem0[ds:0xA04<16>:word16] = ax
	ax = 0x9FA<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1825_4CFE (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_2338_exit
fn1825_2338_exit:


// fn1825_23A8
// Return size: 4
define fn1825_23A8
fn1825_23A8_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l1825_23A8
l1825_23A8:
	ax = 0x9FA<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1825_4D78 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	v8 = Mem0[ds:0xA02<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v8
	v9 = Mem0[ds:0xA06<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v9
	v10 = Mem0[ds:0xA04<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v10
	call fn21DC_09B4 (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	return
	// succ:  fn1825_23A8_exit
fn1825_23A8_exit:


// fn1825_23CA
// Return size: 4
define fn1825_23CA
fn1825_23CA_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l1825_23CA
l1825_23CA:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	Mem0[es:bx:word16] = 1<16>
	ax = ax - ax
	SCZO = cond(ax)
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_23CA_exit
fn1825_23CA_exit:


// fn1825_23DA
// Return size: 4
define fn1825_23DA
fn1825_23DA_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l1825_23DA
l1825_23DA:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 4<16>
	SCZO = cond(sp)
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	ax = Mem0[es:bx + 22<i16>:word16]
	ax = ax - 0x29<16>
	SCZO = cond(ax)
	v13 = ax
	SCZO = cond(ax - 7<16>)
	branch Test(UGT,CZ) l1825_243E
	// succ:  l1825_23EF l1825_243E
l1825_23EF:
	ax = ax + ax
	SCZO = cond(ax)
	v12 = bx
	bx = ax
	ax = v12
	switch (v13) { l1825_23F8 l1825_2404 l1825_240A l1825_2410 l1825_2416 l1825_241C l1825_2428 l1825_2422 }
	// succ:  l1825_23F8 l1825_2404 l1825_240A l1825_2410 l1825_2416 l1825_241C l1825_2428 l1825_2422
l1825_23F8:
	ax = 0xD56<16>
	// succ:  l1825_23FB
l1825_23FB:
	Mem0[ss:bp - 4<i16>:word16] = ax
	Mem0[ss:bp - 2<i16>:word16] = ds
	goto l1825_243E
	// succ:  l1825_243E
l1825_2404:
	ax = 0xDC6<16>
	goto l1825_23FB
	// succ:  l1825_23FB
l1825_240A:
	ax = 0xEAA<16>
	goto l1825_23FB
	// succ:  l1825_23FB
l1825_2410:
	ax = 0xC22<16>
	goto l1825_23FB
	// succ:  l1825_23FB
l1825_2416:
	ax = 0xCE6<16>
	goto l1825_23FB
	// succ:  l1825_23FB
l1825_241C:
	ax = 0xE2E<16>
	goto l1825_23FB
	// succ:  l1825_23FB
l1825_2422:
	ax = 0xCAA<16>
	goto l1825_23FB
	// succ:  l1825_23FB
l1825_2428:
	ax = 0xC46<16>
	goto l1825_23FB
	// succ:  l1825_23FB
l1825_243E:
	v14 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v14
	v15 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v15
	call fn1825_2450 (retsize: 4;)
	ax = 1<16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_23DA_exit
fn1825_23DA_exit:


// fn1825_2450
// Return size: 4
define fn1825_2450
fn1825_2450_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l1825_2450
l1825_2450:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0xA<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	Mem0[ss:bp - 6<i16>:word16] = 5<16>
	Mem0[ss:bp - 10<i16>:word16] = 0<16>
	Mem0[ss:bp - 4<i16>:word16] = 0x16<16>
	Mem0[ss:bp - 2<i16>:word16] = 0x4F<16>
	SCZO = cond(Mem0[ds:0x9CA<16>:word16] - 0<16>)
	branch Test(NE,Z) l1825_24CD
	// succ:  l1825_2472 l1825_24CD
l1825_2472:
	Mem0[ds:0x9C8<16>:word16] = 1<16>
	Mem0[ds:0x9CA<16>:word16] = 0<16>
	Mem0[ds:0x9CC<16>:word16] = 0<16>
	Mem0[ds:0x9CE<16>:word16] = 0<16>
	Mem0[ds:0x9D0<16>:word16] = 0<16>
	Mem0[ds:0x9D4<16>:word16] = 0<16>
	Mem0[ds:0x9D6<16>:word16] = 0<16>
	Mem0[ds:0x9D8<16>:word16] = 0<16>
	Mem0[ds:0x9DA<16>:word16] = 0<16>
	Mem0[ds:0x9DC<16>:word16] = 0<16>
	Mem0[ds:0x9E2<16>:word16] = 6<16>
	ax = Mem0[ss:bp - 4<i16>:word16]
	ax = ax - 1<16>
	SZO = cond(ax)
	Mem0[ds:0x9E4<16>:word16] = ax
	ax = Mem0[ds:0x9E2<16>:word16]
	Mem0[ds:0x9E0<16>:word16] = ax
	Mem0[ds:0x9DE<16>:word16] = 1<16>
	Mem0[ds:0x9E6<16>:word16] = 0x10<16>
	// succ:  l1825_24CD
l1825_24CD:
	Mem0[ds:0x9D2<16>:word16] = 1<16>
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_0527 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	ax = 0xA5E<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v12 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v12
	v13 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v13
	v14 = Mem0[ss:bp - 10<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v14
	v15 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v15
	call fn1F38_05DB (retsize: 4;)
	sp = sp + 0xC<16>
	SCZO = cond(sp)
	ax = 0xA36<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v16 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v16
	v17 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v17
	v18 = Mem0[ss:bp - 10<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v18
	v19 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v19
	call fn1F38_05DB (retsize: 4;)
	sp = sp + 0xC<16>
	SCZO = cond(sp)
	Mem0[ds:0x9D8<16>:word16] = 0<16>
	goto l1825_251C
	// succ:  l1825_251C
l1825_2518:
	v25 = Mem0[ds:0x9D8<16>:word16] + 1<16>
	Mem0[ds:0x9D8<16>:word16] = v25
	SZO = cond(v25)
	// succ:  l1825_251C
l1825_251C:
	si = Mem0[ds:0x9D8<16>:word16]
	si = si << 1<16>
	SCZO = cond(si)
	si = si << 1<16>
	SCZO = cond(si)
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	es_bx = Mem0[ds:bx + 0<16> + si:segptr32]
	SCZO = cond(Mem0[es:bx:byte] - 0x1A<8>)
	branch Test(NE,Z) l1825_2518
	// succ:  l1825_2530 l1825_2518
l1825_2530:
	v23 = Mem0[ds:0x9D8<16>:word16] - 1<16>
	Mem0[ds:0x9D8<16>:word16] = v23
	SZO = cond(v23)
	SCZO = cond(Mem0[ds:0x9D8<16>:word16] - 1<16>)
	ax = ax - ax - C
	SCZO = cond(ax)
	C = ax != 0<16>
	ax = -ax
	SZO = cond(ax)
	Mem0[ss:bp - 8<i16>:word16] = ax
	goto l1825_2596
	// succ:  l1825_2596
l1825_2542:
	ax = 0x9C8<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v26 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v26
	v27 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v27
	v28 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v28
	v29 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v29
	v30 = Mem0[ss:bp - 10<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v30
	v31 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v31
	call fn1825_25AE (retsize: 4;)
	sp = sp + 0x10<16>
	SCZO = cond(sp)
	ax = 1<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x9C8<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1825_67EE (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	SCZO = cond(Mem0[ds:0x9CC<16>:word16] - 0<16>)
	branch Test(NE,Z) l1825_257F
	// succ:  l1825_2577 l1825_257F
l1825_2577:
	SCZO = cond(Mem0[ds:0x9D2<16>:word16] - 0xBB8<16>)
	branch Test(NE,Z) l1825_2584
	// succ:  l1825_257F l1825_2584
l1825_257F:
	ax = 1<16>
	goto l1825_2586
	// succ:  l1825_2586
l1825_2584:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l1825_2586
l1825_2586:
	Mem0[ss:bp - 8<i16>:word16] = ax
	SCZO = cond(Mem0[ds:0x9CC<16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_2596
	// succ:  l1825_2590 l1825_2596
l1825_2590:
	Mem0[ds:0x9CA<16>:word16] = 0<16>
	// succ:  l1825_2596
l1825_2596:
	SCZO = cond(Mem0[ss:bp - 8<i16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_2542
	// succ:  l1825_259C l1825_2542
l1825_259C:
	ax = 1<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_0527 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_2450_exit
fn1825_2450_exit:


// fn1825_25AE
// Return size: 4
define fn1825_25AE
fn1825_25AE_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l1825_25AE
l1825_25AE:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 4<16>
	SCZO = cond(sp)
	ax = 0xA5E<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v9 = Mem0[ss:bp + 12<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v9
	v10 = Mem0[ss:bp + 10<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v10
	v11 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v11
	v12 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v12
	call fn1F38_05DB (retsize: 4;)
	sp = sp + 0xC<16>
	SCZO = cond(sp)
	ax = 0xA36<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v13 = Mem0[ss:bp + 12<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v13
	v14 = Mem0[ss:bp + 10<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v14
	v15 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v15
	v16 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v16
	call fn1F38_05DB (retsize: 4;)
	sp = sp + 0xC<16>
	SCZO = cond(sp)
	es_bx = Mem0[ss:bp + 18<i16>:segptr32]
	ax = Mem0[es:bx + 18<i16>:word16]
	Mem0[ss:bp - 4<i16>:word16] = ax
	ax = Mem0[es:bx + 26<i16>:word16]
	Mem0[ss:bp - 2<i16>:word16] = ax
	Mem0[es:bx + 20<i16>:word16] = 0<16>
	goto l1825_2637
	// succ:  l1825_2637
l1825_2600:
	ax = Mem0[ss:bp - 2<i16>:word16]
	SCZO = cond(Mem0[es:bx + 28<i16>:word16] - ax)
	branch Test(ULT,C) l1825_2640
	// succ:  l1825_2609 l1825_2640
l1825_2609:
	ax = Mem0[es:bx + 22<i16>:word16]
	ax = ax + 1<16>
	SZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v23 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v23
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	v24 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v24
	v25 = Mem0[ss:bp + 16<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v25
	v26 = Mem0[ss:bp + 14<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v26
	call fn1825_2696 (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	v27 = Mem0[ss:bp - 4<i16>:word16] + 1<16>
	Mem0[ss:bp - 4<i16>:word16] = v27
	SZO = cond(v27)
	v28 = Mem0[ss:bp - 2<i16>:word16] + 1<16>
	Mem0[ss:bp - 2<i16>:word16] = v28
	SZO = cond(v28)
	es_bx = Mem0[ss:bp + 18<i16>:segptr32]
	v29 = Mem0[es:bx + 20<i16>:word16] + 1<16>
	Mem0[es:bx + 20<i16>:word16] = v29
	SZO = cond(v29)
	// succ:  l1825_2637
l1825_2637:
	ax = Mem0[ss:bp - 4<i16>:word16]
	SCZO = cond(Mem0[es:bx + 16<i16>:word16] - ax)
	branch Test(UGE,C) l1825_2600
	// succ:  l1825_2640 l1825_2600
l1825_2640:
	ax = Mem0[es:bx + 14<i16>:word16]
	SCZO = cond(Mem0[es:bx + 18<i16>:word16] - ax)
	branch Test(ULE,CZ) l1825_2650
	// succ:  l1825_264A l1825_2650
l1825_264A:
	ax = 1<16>
	goto l1825_2652
	// succ:  l1825_2652
l1825_2650:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l1825_2652
l1825_2652:
	Mem0[es:bx + 6<i16>:word16] = ax
	ax = Mem0[ss:bp - 2<i16>:word16]
	SCZO = cond(Mem0[es:bx + 28<i16>:word16] - ax)
	branch Test(UGE,C) l1825_266E
	// succ:  l1825_265F l1825_266E
l1825_265F:
	ax = Mem0[ss:bp - 4<i16>:word16]
	SCZO = cond(Mem0[es:bx + 16<i16>:word16] - ax)
	branch Test(ULT,C) l1825_266E
	// succ:  l1825_2668 l1825_266E
l1825_2668:
	ax = 1<16>
	goto l1825_2670
	// succ:  l1825_2670
l1825_266E:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l1825_2670
l1825_2670:
	Mem0[es:bx + 8<i16>:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = es
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bx
	ax = 0x4F<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v30 = Mem0[ss:bp + 12<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v30
	v31 = Mem0[ss:bp + 10<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v31
	v32 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v32
	v33 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v33
	call fn1825_675E (retsize: 4;)
	es_bx = Mem0[ss:bp + 18<i16>:segptr32]
	Mem0[es:bx:word16] = 0<16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_25AE_exit
fn1825_25AE_exit:


// fn1825_2696
// Return size: 4
define fn1825_2696
fn1825_2696_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l1825_2696
l1825_2696:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 4<16>
	SCZO = cond(sp)
	ax = Mem0[ss:bp + 10<i16>:word16]
	ax = ax << 1<16>
	SCZO = cond(ax)
	ax = ax << 1<16>
	SCZO = cond(ax)
	ax = ax + Mem0[ss:bp + 6<i16>:word16]
	SCZO = cond(ax)
	dx = Mem0[ss:bp + 8<i16>:word16]
	Mem0[ss:bp - 4<i16>:word16] = ax
	Mem0[ss:bp - 2<i16>:word16] = dx
	es_bx = Mem0[ss:bp - 4<i16>:segptr32]
	v12 = Mem0[es:bx + 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v12
	v13 = Mem0[es:bx:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v13
	call fn2017_03F5 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	es_bx = Mem0[ss:bp - 4<i16>:segptr32]
	v14 = Mem0[es:bx + 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v14
	v15 = Mem0[es:bx:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v15
	call fn1F38_049F (retsize: 4;)
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_2696_exit
fn1825_2696_exit:


// fn1825_26D6
// Return size: 4
define fn1825_26D6
fn1825_26D6_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l1825_26D6
l1825_26D6:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x10<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	Mem0[ss:bp - 6<i16>:word16] = 5<16>
	Mem0[ss:bp - 12<i16>:word16] = 5<16>
	Mem0[ss:bp - 4<i16>:word16] = 0xC<16>
	Mem0[ss:bp - 2<i16>:word16] = 0x4B<16>
	Mem0[ss:bp - 8<i16>:word16] = 6<16>
	Mem0[ss:bp - 14<i16>:word16] = 7<16>
	Mem0[ds:0xA68<16>:byte] = 0<8>
	ax = 0xA5E<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v11 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v11
	v12 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v12
	ax = 5<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_05DB (retsize: 4;)
	sp = sp + 0xC<16>
	SCZO = cond(sp)
	ax = 0xA2C<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v13 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v13
	v14 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v14
	ax = 5<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_05DB (retsize: 4;)
	sp = sp + 0xC<16>
	SCZO = cond(sp)
	v15 = Mem0[ss:bp - 14<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v15
	v16 = Mem0[ss:bp - 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v16
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = 0xA<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x5684<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	v17 = Mem0[ss:bp - 14<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v17
	ax = Mem0[ss:bp - 8<i16>:word16]
	ax = ax + 3<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = 5<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x5690<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 10<i16>:word16] = 1<16>
	// succ:  l1825_2778
l1825_2778:
	SCZO = cond(Mem0[ss:bp - 10<i16>:word16] - 0xBB8<16>)
	branch Test(NE,Z) l1825_2782
	// succ:  l1825_277F l1825_2782
l1825_277F:
	goto l1825_285B
	// succ:  l1825_285B
l1825_2782:
	si = Mem0[ss:bp - 14<i16>:word16]
	si = si + 2<16>
	SCZO = cond(si)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	ax = Mem0[ss:bp - 8<i16>:word16]
	ax = ax + 1<16>
	SZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x40<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0xAE8<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1825_648A (retsize: 4;)
	sp = sp + 0xC<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 10<i16>:word16] = ax
	ax = 0xAE8<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn2017_03F5 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 16<i16>:word16] = ax
	SCZO = cond(Mem0[ss:bp - 10<i16>:word16] - 0x14<16>)
	branch Test(EQ,Z) l1825_282F
	// succ:  l1825_27C4 l1825_282F
l1825_27C4:
	SCZO = cond(Mem0[ss:bp - 10<i16>:word16] - 0xBB8<16>)
	branch Test(EQ,Z) l1825_282F
	// succ:  l1825_27CB l1825_282F
l1825_27CB:
	ax = ax | ax
	SZ = cond(ax)
	O = false
	C = false
	branch Test(EQ,Z) l1825_282F
	// succ:  l1825_27CF l1825_282F
l1825_27CF:
	di = Mem0[ss:bp - 8<i16>:word16]
	di = di + 4<16>
	SCZO = cond(di)
	ax = 0xA5E<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 2<i16>:word16]
	ax = ax - 1<16>
	SZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 4<i16>:word16]
	ax = ax - 1<16>
	SZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 12<i16>:word16]
	ax = ax + 1<16>
	SZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	call fn1F38_05DB (retsize: 4;)
	sp = sp + 0xC<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = 1<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0xAE8<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1825_6078 (retsize: 4;)
	sp = sp + 0xA<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 16<i16>:word16] = ax
	ax = ax - 0x40<16>
	SCZO = cond(ax)
	cx = cx - cx - C
	SCZO = cond(cx)
	ax = ax & cx
	SZ = cond(ax)
	O = false
	C = false
	ax = ax + 0x40<16>
	SCZO = cond(ax)
	Mem0[ss:bp - 16<i16>:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	// succ:  l1825_282F
l1825_282F:
	ax = 0xA5E<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 2<i16>:word16]
	ax = ax - 1<16>
	SZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 8<i16>:word16]
	ax = ax + 2<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 12<i16>:word16]
	ax = ax + 1<16>
	SZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 8<i16>:word16]
	ax = ax + 1<16>
	SZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_05DB (retsize: 4;)
	sp = sp + 0xC<16>
	SCZO = cond(sp)
	SCZO = cond(Mem0[ss:bp - 10<i16>:word16] - 0x14<16>)
	branch Test(EQ,Z) l1825_285B
	// succ:  l1825_2858 l1825_285B
l1825_2858:
	goto l1825_2778
	// succ:  l1825_2778
l1825_285B:
	SCZO = cond(Mem0[ss:bp - 10<i16>:word16] - 0x14<16>)
	branch Test(NE,Z) l1825_2876
	// succ:  l1825_2861 l1825_2876
l1825_2861:
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	Mem0[es:bx + 12<i16>:word16] = 1<16>
	Mem0[es:bx + 14<i16>:word16] = 1<16>
	Mem0[es:bx + 22<i16>:word16] = 0<16>
	// succ:  l1825_2876
l1825_2876:
	ax = 1<16>
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	di = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_26D6_exit
fn1825_26D6_exit:


// fn1825_2880
// Return size: 4
define fn1825_2880
fn1825_2880_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l1825_2880
l1825_2880:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0xC<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	Mem0[ss:bp - 8<i16>:word16] = 5<16>
	Mem0[ss:bp - 12<i16>:word16] = 0x14<16>
	Mem0[ss:bp - 4<i16>:word16] = 0x17<16>
	Mem0[ss:bp - 2<i16>:word16] = 0x2A<16>
	SCZO = cond(Mem0[ds:0x982<16>:word16] - 0<16>)
	branch Test(NE,Z) l1825_28FD
	// succ:  l1825_28A2 l1825_28FD
l1825_28A2:
	Mem0[ds:0x980<16>:word16] = 1<16>
	Mem0[ds:0x982<16>:word16] = 0<16>
	Mem0[ds:0x984<16>:word16] = 0<16>
	Mem0[ds:0x986<16>:word16] = 0<16>
	Mem0[ds:0x988<16>:word16] = 0<16>
	Mem0[ds:0x98C<16>:word16] = 1<16>
	Mem0[ds:0x98E<16>:word16] = 1<16>
	Mem0[ds:0x990<16>:word16] = 0<16>
	Mem0[ds:0x992<16>:word16] = 1<16>
	Mem0[ds:0x994<16>:word16] = 0<16>
	Mem0[ds:0x99A<16>:word16] = 6<16>
	ax = Mem0[ss:bp - 4<i16>:word16]
	ax = ax - 1<16>
	SZO = cond(ax)
	Mem0[ds:0x99C<16>:word16] = ax
	ax = Mem0[ds:0x99A<16>:word16]
	Mem0[ds:0x998<16>:word16] = ax
	Mem0[ds:0x996<16>:word16] = 0x15<16>
	Mem0[ds:0x99E<16>:word16] = 0x11<16>
	// succ:  l1825_28FD
l1825_28FD:
	Mem0[ds:0x98A<16>:word16] = 1<16>
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_0527 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	ax = 0xA5E<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v12 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v12
	v13 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v13
	v14 = Mem0[ss:bp - 12<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v14
	v15 = Mem0[ss:bp - 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v15
	call fn1F38_05DB (retsize: 4;)
	sp = sp + 0xC<16>
	SCZO = cond(sp)
	ax = 0xA36<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v16 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v16
	v17 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v17
	v18 = Mem0[ss:bp - 12<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v18
	v19 = Mem0[ss:bp - 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v19
	call fn1F38_05DB (retsize: 4;)
	sp = sp + 0xC<16>
	SCZO = cond(sp)
	Mem0[ds:0x990<16>:word16] = 0<16>
	ax = 1<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1825_6E18 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	goto l1825_2967
	// succ:  l1825_2967
l1825_2954:
	v23 = Mem0[ds:0x990<16>:word16] + 1<16>
	Mem0[ds:0x990<16>:word16] = v23
	SZO = cond(v23)
	ax = 0x16<16>
	dx_ax = Mem0[ss:bp - 6<i16>:word16] *u32 ax
	SCZO = cond(dx_ax)
	bx = ax
	es_si = Mem0[ds:0x1282<16>:segptr32]
	ax = Mem0[es:bx + si:word16]
	// succ:  l1825_2967
l1825_2967:
	Mem0[ss:bp - 6<i16>:word16] = ax
	ax = ax | ax
	SZ = cond(ax)
	O = false
	C = false
	branch Test(NE,Z) l1825_2954
	// succ:  l1825_296E l1825_2954
l1825_296E:
	SCZO = cond(Mem0[ds:0x990<16>:word16] - 1<16>)
	ax = ax - ax - C
	SCZO = cond(ax)
	C = ax != 0<16>
	ax = -ax
	SZO = cond(ax)
	goto l1825_29B8
	// succ:  l1825_29B8
l1825_297A:
	ax = 0x980<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v29 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v29
	v30 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v30
	v31 = Mem0[ss:bp - 12<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v31
	v32 = Mem0[ss:bp - 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v32
	call fn1825_5850 (retsize: 4;)
	sp = sp + 0xC<16>
	SCZO = cond(sp)
	ax = 1<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x980<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1825_67EE (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	SCZO = cond(Mem0[ds:0x984<16>:word16] - 0<16>)
	branch Test(NE,Z) l1825_29B1
	// succ:  l1825_29A9 l1825_29B1
l1825_29A9:
	SCZO = cond(Mem0[ds:0x98A<16>:word16] - 0xBB8<16>)
	branch Test(NE,Z) l1825_29B6
	// succ:  l1825_29B1 l1825_29B6
l1825_29B1:
	ax = 1<16>
	goto l1825_29B8
	// succ:  l1825_29B8
l1825_29B6:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l1825_29B8
l1825_29B8:
	Mem0[ss:bp - 10<i16>:word16] = ax
	ax = ax | ax
	SZ = cond(ax)
	O = false
	C = false
	branch Test(EQ,Z) l1825_297A
	// succ:  l1825_29BF l1825_297A
l1825_29BF:
	SCZO = cond(Mem0[ds:0x990<16>:word16] - 0<16>)
	branch Test(NE,Z) l1825_2A05
	// succ:  l1825_29C6 l1825_2A05
l1825_29C6:
	call fn1F38_07FA (retsize: 4;)
	ax = Mem0[ss:bp - 12<i16>:word16]
	ax = ax + 3<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v28 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v28
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = 9<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x5696<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 8<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn3431_07B6 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	Mem0[ds:0x98A<16>:word16] = ax
	call fn1F38_07E7 (retsize: 4;)
	// succ:  l1825_2A05
l1825_2A05:
	SCZO = cond(Mem0[ds:0x984<16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_2A12
	// succ:  l1825_2A0C l1825_2A12
l1825_2A0C:
	Mem0[ds:0x982<16>:word16] = 0<16>
	// succ:  l1825_2A12
l1825_2A12:
	ax = 1<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_0527 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	ax = 1<16>
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_2880_exit
fn1825_2880_exit:


// fn1825_2A26
// Return size: 4
define fn1825_2A26
fn1825_2A26_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l1825_2A26
l1825_2A26:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0xC<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 6<i16>:word16] = 5<16>
	Mem0[ss:bp - 12<i16>:word16] = 0xA<16>
	Mem0[ss:bp - 4<i16>:word16] = 0x16<16>
	Mem0[ss:bp - 2<i16>:word16] = 0x46<16>
	SCZO = cond(Mem0[ds:0x982<16>:word16] - 0<16>)
	branch Test(NE,Z) l1825_2AA2
	// succ:  l1825_2A47 l1825_2AA2
l1825_2A47:
	Mem0[ds:0x980<16>:word16] = 1<16>
	Mem0[ds:0x982<16>:word16] = 0<16>
	Mem0[ds:0x984<16>:word16] = 0<16>
	Mem0[ds:0x986<16>:word16] = 0<16>
	Mem0[ds:0x988<16>:word16] = 0<16>
	Mem0[ds:0x98C<16>:word16] = 1<16>
	Mem0[ds:0x98E<16>:word16] = 1<16>
	Mem0[ds:0x990<16>:word16] = 0<16>
	Mem0[ds:0x992<16>:word16] = 1<16>
	Mem0[ds:0x994<16>:word16] = 0<16>
	Mem0[ds:0x99A<16>:word16] = 6<16>
	ax = Mem0[ss:bp - 4<i16>:word16]
	ax = ax - 1<16>
	SZO = cond(ax)
	Mem0[ds:0x99C<16>:word16] = ax
	ax = Mem0[ds:0x99A<16>:word16]
	Mem0[ds:0x998<16>:word16] = ax
	Mem0[ds:0x996<16>:word16] = 0xB<16>
	Mem0[ds:0x99E<16>:word16] = 0x10<16>
	// succ:  l1825_2AA2
l1825_2AA2:
	Mem0[ds:0x98A<16>:word16] = 1<16>
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_0527 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	ax = 0xA5E<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v11 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v11
	v12 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v12
	v13 = Mem0[ss:bp - 12<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v13
	v14 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v14
	call fn1F38_05DB (retsize: 4;)
	sp = sp + 0xC<16>
	SCZO = cond(sp)
	ax = 0xA36<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v15 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v15
	v16 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v16
	v17 = Mem0[ss:bp - 12<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v17
	v18 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v18
	call fn1F38_05DB (retsize: 4;)
	sp = sp + 0xC<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 8<i16>:word16] = 0<16>
	goto l1825_2AEF
	// succ:  l1825_2AEF
l1825_2AEC:
	v22 = Mem0[ss:bp - 8<i16>:word16] + 1<16>
	Mem0[ss:bp - 8<i16>:word16] = v22
	SZO = cond(v22)
	// succ:  l1825_2AEF
l1825_2AEF:
	bx = Mem0[ss:bp - 8<i16>:word16]
	cl = 4<8>
	bx = bx << cl
	SCZO = cond(bx)
	SCZO = cond(Mem0[ds:bx + 0x50<16>:word16] - 0<16>)
	branch Test(NE,Z) l1825_2AEC
	// succ:  l1825_2AFD l1825_2AEC
l1825_2AFD:
	ax = Mem0[ss:bp - 8<i16>:word16]
	Mem0[ds:0x990<16>:word16] = ax
	SCZO = cond(ax - 1<16>)
	ax = ax - ax - C
	SCZO = cond(ax)
	C = ax != 0<16>
	ax = -ax
	SZO = cond(ax)
	goto l1825_2B4A
	// succ:  l1825_2B4A
l1825_2B0C:
	ax = 0x980<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v25 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v25
	v26 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v26
	v27 = Mem0[ss:bp - 12<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v27
	v28 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v28
	call fn1825_2B6E (retsize: 4;)
	sp = sp + 0xC<16>
	SCZO = cond(sp)
	ax = 1<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x980<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1825_67EE (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	SCZO = cond(Mem0[ds:0x984<16>:word16] - 0<16>)
	branch Test(NE,Z) l1825_2B43
	// succ:  l1825_2B3B l1825_2B43
l1825_2B3B:
	SCZO = cond(Mem0[ds:0x98A<16>:word16] - 0xBB8<16>)
	branch Test(NE,Z) l1825_2B48
	// succ:  l1825_2B43 l1825_2B48
l1825_2B43:
	ax = 1<16>
	goto l1825_2B4A
	// succ:  l1825_2B4A
l1825_2B48:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l1825_2B4A
l1825_2B4A:
	Mem0[ss:bp - 10<i16>:word16] = ax
	ax = ax | ax
	SZ = cond(ax)
	O = false
	C = false
	branch Test(EQ,Z) l1825_2B0C
	// succ:  l1825_2B51 l1825_2B0C
l1825_2B51:
	SCZO = cond(Mem0[ds:0x984<16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_2B5E
	// succ:  l1825_2B58 l1825_2B5E
l1825_2B58:
	Mem0[ds:0x982<16>:word16] = 0<16>
	// succ:  l1825_2B5E
l1825_2B5E:
	ax = 1<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_0527 (retsize: 4;)
	ax = 1<16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_2A26_exit
fn1825_2A26_exit:


// fn1825_2B6E
// Return size: 4
define fn1825_2B6E
fn1825_2B6E_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l1825_2B6E
l1825_2B6E:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 4<16>
	SCZO = cond(sp)
	ax = 0xA5E<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v9 = Mem0[ss:bp + 12<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v9
	v10 = Mem0[ss:bp + 10<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v10
	v11 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v11
	v12 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v12
	call fn1F38_05DB (retsize: 4;)
	sp = sp + 0xC<16>
	SCZO = cond(sp)
	ax = 0xA36<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v13 = Mem0[ss:bp + 12<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v13
	v14 = Mem0[ss:bp + 10<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v14
	v15 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v15
	v16 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v16
	call fn1F38_05DB (retsize: 4;)
	sp = sp + 0xC<16>
	SCZO = cond(sp)
	es_bx = Mem0[ss:bp + 14<i16>:segptr32]
	ax = Mem0[es:bx + 18<i16>:word16]
	Mem0[ss:bp - 4<i16>:word16] = ax
	ax = Mem0[es:bx + 26<i16>:word16]
	Mem0[ss:bp - 2<i16>:word16] = ax
	Mem0[es:bx + 20<i16>:word16] = 0<16>
	goto l1825_2BF3
	// succ:  l1825_2BF3
l1825_2BC0:
	ax = Mem0[ss:bp - 2<i16>:word16]
	SCZO = cond(Mem0[es:bx + 28<i16>:word16] - ax)
	branch Test(ULT,C) l1825_2BFC
	// succ:  l1825_2BC9 l1825_2BFC
l1825_2BC9:
	ax = Mem0[es:bx + 22<i16>:word16]
	ax = ax + 1<16>
	SZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v23 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v23
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = Mem0[ss:bp - 4<i16>:word16]
	ax = ax - 1<16>
	SZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1825_2C52 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	v24 = Mem0[ss:bp - 4<i16>:word16] + 1<16>
	Mem0[ss:bp - 4<i16>:word16] = v24
	SZO = cond(v24)
	v25 = Mem0[ss:bp - 2<i16>:word16] + 1<16>
	Mem0[ss:bp - 2<i16>:word16] = v25
	SZO = cond(v25)
	es_bx = Mem0[ss:bp + 14<i16>:segptr32]
	v26 = Mem0[es:bx + 20<i16>:word16] + 1<16>
	Mem0[es:bx + 20<i16>:word16] = v26
	SZO = cond(v26)
	// succ:  l1825_2BF3
l1825_2BF3:
	ax = Mem0[ss:bp - 4<i16>:word16]
	SCZO = cond(Mem0[es:bx + 16<i16>:word16] - ax)
	branch Test(UGE,C) l1825_2BC0
	// succ:  l1825_2BFC l1825_2BC0
l1825_2BFC:
	ax = Mem0[es:bx + 14<i16>:word16]
	SCZO = cond(Mem0[es:bx + 18<i16>:word16] - ax)
	branch Test(ULE,CZ) l1825_2C0C
	// succ:  l1825_2C06 l1825_2C0C
l1825_2C06:
	ax = 1<16>
	goto l1825_2C0E
	// succ:  l1825_2C0E
l1825_2C0C:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l1825_2C0E
l1825_2C0E:
	Mem0[es:bx + 6<i16>:word16] = ax
	ax = Mem0[ss:bp - 2<i16>:word16]
	SCZO = cond(Mem0[es:bx + 28<i16>:word16] - ax)
	branch Test(UGE,C) l1825_2C2A
	// succ:  l1825_2C1B l1825_2C2A
l1825_2C1B:
	ax = Mem0[ss:bp - 4<i16>:word16]
	SCZO = cond(Mem0[es:bx + 16<i16>:word16] - ax)
	branch Test(ULT,C) l1825_2C2A
	// succ:  l1825_2C24 l1825_2C2A
l1825_2C24:
	ax = 1<16>
	goto l1825_2C2C
	// succ:  l1825_2C2C
l1825_2C2A:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l1825_2C2C
l1825_2C2C:
	Mem0[es:bx + 8<i16>:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = es
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bx
	ax = 0x3C<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v27 = Mem0[ss:bp + 12<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v27
	v28 = Mem0[ss:bp + 10<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v28
	v29 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v29
	v30 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v30
	call fn1825_675E (retsize: 4;)
	es_bx = Mem0[ss:bp + 14<i16>:segptr32]
	Mem0[es:bx:word16] = 0<16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_2B6E_exit
fn1825_2B6E_exit:


// fn1825_2C52
// Return size: 4
define fn1825_2C52
fn1825_2C52_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l1825_2C52
l1825_2C52:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 4<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	call fn1F38_0517 (retsize: 4;)
	ah = ah - ah
	SCZO = cond(ah)
	Mem0[ss:bp - 2<i16>:word16] = ax
	si = Mem0[ss:bp + 6<i16>:word16]
	cl = 4<8>
	si = si << cl
	SCZO = cond(si)
	ax = si
	ax = ax + 0x52<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn2017_03F5 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 4<i16>:word16] = ax
	v12 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v12
	call fn1F38_0517 (retsize: 4;)
	al = ah
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	v14 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v14
	ax = si
	ax = ax + 0x52<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	v15 = Mem0[ds:si + 0x50<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v15
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1825_2CF2 (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 4<i16>:word16] = ax
	ax = ax - 0x28<16>
	SCZO = cond(ax)
	cx = cx - cx - C
	SCZO = cond(cx)
	ax = ax & cx
	SZ = cond(ax)
	O = false
	C = false
	ax = ax + 0x28<16>
	SCZO = cond(ax)
	Mem0[ss:bp - 4<i16>:word16] = ax
	ax = Mem0[ss:bp - 2<i16>:word16]
	ax = ax + 0x10<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_0517 (retsize: 4;)
	al = ah
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	v20 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v20
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_2C52_exit
fn1825_2C52_exit:


// fn1825_2CF2
// Return size: 4
define fn1825_2CF2
fn1825_2CF2_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l1825_2CF2
l1825_2CF2:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	Mem0[es:bx:byte] = 0<8>
	ax = Mem0[ss:bp + 10<i16>:word16]
	SCZO = cond(ax - 0x23<16>)
	branch Test(NE,Z) l1825_2D0B
	// succ:  l1825_2D08 l1825_2D0B
l1825_2D08:
	goto l1825_2F78
	// succ:  l1825_2F78
l1825_2D0B:
	branch Test(ULE,CZ) l1825_2D10
	// succ:  l1825_2D0D l1825_2D10
l1825_2D0D:
	goto l1825_31B4
	// succ:  l1825_31B4
l1825_2D10:
	ax = ax - 6<16>
	SCZO = cond(ax)
	v44 = ax
	SCZO = cond(ax - 0x1A<16>)
	branch Test(UGT,CZ) l1825_2D5F
	// succ:  l1825_2D18 l1825_2D5F
l1825_2D18:
	ax = ax + ax
	SCZO = cond(ax)
	v43 = bx
	bx = ax
	ax = v43
	switch (v44) { l1825_2D20 l1825_2D5F l1825_2D5F l1825_2D5F l1825_2D72 l1825_2D5F l1825_2D5F l1825_2D5F l1825_2D5F l1825_2D90 l1825_2D5F l1825_2DA2 l1825_2D5F l1825_2D5F l1825_2DB4 l1825_2D5F l1825_2DC4 l1825_2DD6 l1825_2DE8 l1825_2D5F l1825_2DFA l1825_2D5F l1825_2E4A l1825_2E80 l1825_2EC0 l1825_2ED4 l1825_2F64 }
	// succ:  l1825_2D20 l1825_2D5F l1825_2D5F l1825_2D5F l1825_2D72 l1825_2D5F l1825_2D5F l1825_2D5F l1825_2D5F l1825_2D90 l1825_2D5F l1825_2DA2 l1825_2D5F l1825_2D5F l1825_2DB4 l1825_2D5F l1825_2DC4 l1825_2DD6 l1825_2DE8 l1825_2D5F l1825_2DFA l1825_2D5F l1825_2E4A l1825_2E80 l1825_2EC0 l1825_2ED4 l1825_2F64
l1825_2D20:
	SCZO = cond(Mem0[ds:0x2094<16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_2D2C
	// succ:  l1825_2D27 l1825_2D2C
l1825_2D27:
	ax = 0x56A0<16>
	goto l1825_2D2F
	// succ:  l1825_2D2F
l1825_2D2C:
	ax = 0x56A4<16>
	// succ:  l1825_2D2F
l1825_2D2F:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v60 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v60
	v61 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v61
	call fn2017_01BA (retsize: 4;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	SCZO = cond(Mem0[ds:0x20B8<16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_2D4C
	// succ:  l1825_2D46 l1825_2D4C
l1825_2D46:
	ax = 0x56A8<16>
	goto l1825_2D4F
	// succ:  l1825_2D4F
l1825_2D4C:
	ax = 0x56B0<16>
	// succ:  l1825_2D4F
l1825_2D4F:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v62 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v62
	v63 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v63
	call fn2017_037D (retsize: 4;)
	// succ:  l1825_2D5C
l1825_2D5C:
	sp = sp + 8<16>
	SCZO = cond(sp)
	// succ:  l1825_2D5F
l1825_2D5F:
	v17 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v17
	v18 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v18
	call fn2017_03F5 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_2CF2_exit
l1825_2D72:
	SCZO = cond(Mem0[ds:0x2096<16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_2D7E
	// succ:  l1825_2D79 l1825_2D7E
l1825_2D79:
	ax = 0x56BA<16>
	goto l1825_2D81
	// succ:  l1825_2D81
l1825_2D7E:
	ax = 0x56BE<16>
	// succ:  l1825_2D81
l1825_2D81:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	// succ:  l1825_2D82
l1825_2D82:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v15 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v15
	v16 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v16
	call fn2017_01BA (retsize: 4;)
	goto l1825_2D5C
	// succ:  l1825_2D5C
l1825_2D90:
	SCZO = cond(Mem0[ds:0x13E6<16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_2D9C
	// succ:  l1825_2D97 l1825_2D9C
l1825_2D97:
	ax = 0x56C2<16>
	goto l1825_2D81
	// succ:  l1825_2D81
l1825_2D9C:
	ax = 0x56C6<16>
	goto l1825_2D81
	// succ:  l1825_2D81
l1825_2DA2:
	SCZO = cond(Mem0[ds:0x20A6<16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_2DAE
	// succ:  l1825_2DA9 l1825_2DAE
l1825_2DA9:
	ax = 0x56CA<16>
	goto l1825_2D81
	// succ:  l1825_2D81
l1825_2DAE:
	ax = 0x56CE<16>
	goto l1825_2D81
	// succ:  l1825_2D81
l1825_2DB4:
	v58 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v58
	v59 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v59
	call fn1825_324A (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	goto l1825_2D5F
	// succ:  l1825_2D5F
l1825_2DC4:
	SCZO = cond(Mem0[ds:0x2098<16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_2DD0
	// succ:  l1825_2DCB l1825_2DD0
l1825_2DCB:
	ax = 0x56D2<16>
	goto l1825_2D81
	// succ:  l1825_2D81
l1825_2DD0:
	ax = 0x56D6<16>
	goto l1825_2D81
	// succ:  l1825_2D81
l1825_2DD6:
	SCZO = cond(Mem0[ds:0xA2A<16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_2DE2
	// succ:  l1825_2DDD l1825_2DE2
l1825_2DDD:
	ax = 0x56DA<16>
	goto l1825_2D81
	// succ:  l1825_2D81
l1825_2DE2:
	ax = 0x56DE<16>
	goto l1825_2D81
	// succ:  l1825_2D81
l1825_2DE8:
	SCZO = cond(Mem0[ds:0xA28<16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_2DF4
	// succ:  l1825_2DEF l1825_2DF4
l1825_2DEF:
	ax = 0x56E2<16>
	goto l1825_2D81
	// succ:  l1825_2D81
l1825_2DF4:
	ax = 0x56E6<16>
	goto l1825_2D81
	// succ:  l1825_2D81
l1825_2DFA:
	ax = Mem0[ds:0x128E<16>:word16]
	v57 = ax
	SCZO = cond(ax - 6<16>)
	branch Test(ULE,CZ) l1825_2E05
	// succ:  l1825_2E02 l1825_2E05
l1825_2E02:
	goto l1825_2D5F
	// succ:  l1825_2D5F
l1825_2E05:
	ax = ax + ax
	SCZO = cond(ax)
	v56 = bx
	bx = ax
	ax = v56
	switch (v57) { l1825_2E0E l1825_2E14 l1825_2E1A l1825_2E20 l1825_2E26 l1825_2E2C l1825_2E32 }
	// succ:  l1825_2E0E l1825_2E14 l1825_2E1A l1825_2E20 l1825_2E26 l1825_2E2C l1825_2E32
l1825_2E0E:
	ax = 0x56EA<16>
	goto l1825_2D81
	// succ:  l1825_2D81
l1825_2E14:
	ax = 0x56F4<16>
	goto l1825_2D81
	// succ:  l1825_2D81
l1825_2E1A:
	ax = 0x56FE<16>
	goto l1825_2D81
	// succ:  l1825_2D81
l1825_2E20:
	ax = 0x5704<16>
	goto l1825_2D81
	// succ:  l1825_2D81
l1825_2E26:
	ax = 0x570C<16>
	goto l1825_2D81
	// succ:  l1825_2D81
l1825_2E2C:
	ax = 0x5714<16>
	goto l1825_2D81
	// succ:  l1825_2D81
l1825_2E32:
	ax = 0x571C<16>
	goto l1825_2D81
	// succ:  l1825_2D81
l1825_2E4A:
	SCZO = cond(Mem0[ds:0x13F8<16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_2E7A
	// succ:  l1825_2E51 l1825_2E7A
l1825_2E51:
	ax = 0x7F<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v46 = Mem0[ds:0x13F8<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v46
	// succ:  l1825_2E59
l1825_2E59:
	v38 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v38
	v39 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v39
	call fn38D6_0D68 (retsize: 4;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	v40 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v40
	v41 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v41
	call fn2017_03D0 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	// succ:  l1825_2E75
l1825_2E75:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	goto l1825_2D82
	// succ:  l1825_2D82
l1825_2E7A:
	ax = 0x5724<16>
	goto l1825_2D81
	// succ:  l1825_2D81
l1825_2E80:
	ax = 0x13FA<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn2017_03F5 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = ax | ax
	SZ = cond(ax)
	O = false
	C = false
	branch Test(EQ,Z) l1825_2EA6
	// succ:  l1825_2E91 l1825_2EA6
l1825_2E91:
	ax = 0x13FA<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn2017_03F5 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = ax + 1<16>
	SZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x13FA<16>
	goto l1825_2EAD
	// succ:  l1825_2EAD
l1825_2EA6:
	ax = 7<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x5726<16>
	// succ:  l1825_2EAD
l1825_2EAD:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v35 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v35
	v36 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v36
	call fn2017_02EC (retsize: 4;)
	sp = sp + 0xA<16>
	SCZO = cond(sp)
	goto l1825_2D5F
	// succ:  l1825_2D5F
l1825_2EC0:
	SCZO = cond(Mem0[ds:0x13E8<16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_2ECE
	// succ:  l1825_2EC7 l1825_2ECE
l1825_2EC7:
	ax = 0x572E<16>
	goto l1825_2D81
	// succ:  l1825_2D81
l1825_2ECE:
	ax = 0x5732<16>
	goto l1825_2D81
	// succ:  l1825_2D81
l1825_2ED4:
	SCZO = cond(Mem0[ds:0x209C<16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_2EE0
	// succ:  l1825_2EDB l1825_2EE0
l1825_2EDB:
	ax = 0x5736<16>
	goto l1825_2EE3
	// succ:  l1825_2EE3
l1825_2EE0:
	ax = 0x573A<16>
	// succ:  l1825_2EE3
l1825_2EE3:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v47 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v47
	v48 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v48
	call fn2017_01BA (retsize: 4;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	ax = 0x573E<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v49 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v49
	v50 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v50
	call fn2017_037D (retsize: 4;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	v51 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v51
	v52 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v52
	call fn2017_03F5 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 2<i16>:word16] = ax
	bx = ax
	es_si = Mem0[ss:bp + 6<i16>:segptr32]
	al = Mem0[ds:0x20B6<16>:byte]
	Mem0[es:bx + si:byte] = al
	si = bx
	bx = Mem0[ss:bp + 6<i16>:word16]
	Mem0[es:bx + 1<i16> + si:byte] = 0<8>
	ax = 0x5746<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = es
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bx
	call fn2017_037D (retsize: 4;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	v54 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v54
	v55 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v55
	call fn2017_03F5 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 2<i16>:word16] = ax
	bx = ax
	es_si = Mem0[ss:bp + 6<i16>:segptr32]
	al = Mem0[ds:0x20B7<16>:byte]
	Mem0[es:bx + si:byte] = al
	si = bx
	bx = Mem0[ss:bp + 6<i16>:word16]
	Mem0[es:bx + 1<i16> + si:byte] = 0<8>
	goto l1825_2D5F
	// succ:  l1825_2D5F
l1825_2F64:
	SCZO = cond(Mem0[ds:0x20B0<16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_2F72
	// succ:  l1825_2F6B l1825_2F72
l1825_2F6B:
	ax = 0x574E<16>
	goto l1825_2D81
	// succ:  l1825_2D81
l1825_2F72:
	ax = 0x5754<16>
	goto l1825_2D81
	// succ:  l1825_2D81
l1825_2F78:
	SCZO = cond(Mem0[ds:0x20A4<16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_2F86
	// succ:  l1825_2F7F l1825_2F86
l1825_2F7F:
	ax = 0x575C<16>
	goto l1825_2D81
	// succ:  l1825_2D81
l1825_2F86:
	ax = 0x5760<16>
	goto l1825_2D81
	// succ:  l1825_2D81
l1825_2F8C:
	SCZO = cond(Mem0[ds:0x13EA<16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_2F9A
	// succ:  l1825_2F93 l1825_2F9A
l1825_2F93:
	ax = 0x5764<16>
	goto l1825_2D81
	// succ:  l1825_2D81
l1825_2F9A:
	ax = 0x5768<16>
	goto l1825_2D81
	// succ:  l1825_2D81
l1825_2FA0:
	SCZO = cond(Mem0[ds:0x13F0<16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_2FAE
	// succ:  l1825_2FA7 l1825_2FAE
l1825_2FA7:
	ax = 0x576C<16>
	goto l1825_2D81
	// succ:  l1825_2D81
l1825_2FAE:
	ax = 0x5770<16>
	goto l1825_2D81
	// succ:  l1825_2D81
l1825_2FB4:
	SCZO = cond(Mem0[ds:0x13EC<16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_2FC2
	// succ:  l1825_2FBB l1825_2FC2
l1825_2FBB:
	ax = 0x5774<16>
	goto l1825_2D81
	// succ:  l1825_2D81
l1825_2FC2:
	ax = 0x5778<16>
	goto l1825_2D81
	// succ:  l1825_2D81
l1825_2FC8:
	ax = Mem0[ds:0x20BC<16>:word16]
	ax = ax | Mem0[ds:0x20BE<16>:word16]
	SZ = cond(ax)
	O = false
	C = false
	branch Test(EQ,Z) l1825_2FE0
	// succ:  l1825_2FD1 l1825_2FE0
l1825_2FD1:
	es_bx = Mem0[ds:0x20BC<16>:segptr32]
	ax = Mem0[es:bx + 10<i16>:word16]
	dx = Mem0[es:bx + 12<i16>:word16]
	goto l1825_2E75
	// succ:  l1825_2E75
l1825_2FE0:
	ax = 0x577C<16>
	dx = ds
	goto l1825_2E75
	// succ:  l1825_2E75
l1825_2FE8:
	SCZO = cond(Mem0[ds:0x20B4<16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_2FFA
	// succ:  l1825_2FEF l1825_2FFA
l1825_2FEF:
	ax = 0x7F<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v37 = Mem0[ds:0x20B4<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v37
	goto l1825_2E59
	// succ:  l1825_2E59
l1825_2FFA:
	ax = 0x5786<16>
	goto l1825_2D81
	// succ:  l1825_2D81
l1825_3000:
	SCZO = cond(Mem0[ds:0x209E<16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_300E
	// succ:  l1825_3007 l1825_300E
l1825_3007:
	ax = 0x5788<16>
	goto l1825_2D81
	// succ:  l1825_2D81
l1825_300E:
	ax = 0x578C<16>
	goto l1825_2D81
	// succ:  l1825_2D81
l1825_3014:
	ax = 0x143A<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn2017_03F5 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = ax | ax
	SZ = cond(ax)
	O = false
	C = false
	branch Test(EQ,Z) l1825_303A
	// succ:  l1825_3025 l1825_303A
l1825_3025:
	ax = 0x143A<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn2017_03F5 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = ax + 1<16>
	SZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x143A<16>
	goto l1825_2EAD
	// succ:  l1825_2EAD
l1825_303A:
	ax = 7<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x5790<16>
	goto l1825_2EAD
	// succ:  l1825_2EAD
l1825_3044:
	SCZO = cond(Mem0[ds:0x20A0<16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_3052
	// succ:  l1825_304B l1825_3052
l1825_304B:
	ax = 0x5798<16>
	goto l1825_2D81
	// succ:  l1825_2D81
l1825_3052:
	ax = 0x579C<16>
	goto l1825_2D81
	// succ:  l1825_2D81
l1825_3058:
	SCZO = cond(Mem0[ds:0xC0C<16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_306A
	// succ:  l1825_305F l1825_306A
l1825_305F:
	ax = 0x7F<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v45 = Mem0[ds:0xC0C<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v45
	goto l1825_30BB
	// succ:  l1825_30BB
l1825_306A:
	ax = 2<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x57A0<16>
	goto l1825_2EAD
	// succ:  l1825_2EAD
l1825_3074:
	SCZO = cond(Mem0[ds:0xC0E<16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_3086
	// succ:  l1825_307B l1825_3086
l1825_307B:
	ax = 0x7F<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v64 = Mem0[ds:0xC0E<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v64
	goto l1825_30BB
	// succ:  l1825_30BB
l1825_3086:
	ax = 2<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x57A2<16>
	goto l1825_2EAD
	// succ:  l1825_2EAD
l1825_3090:
	SCZO = cond(Mem0[ds:0x21C2<16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_30A2
	// succ:  l1825_3097 l1825_30A2
l1825_3097:
	ax = 0x7F<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v65 = Mem0[ds:0x21C2<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v65
	goto l1825_30BB
	// succ:  l1825_30BB
l1825_30A2:
	ax = 2<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x57A4<16>
	goto l1825_2EAD
	// succ:  l1825_2EAD
l1825_30AC:
	SCZO = cond(Mem0[ds:0x21C4<16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_3124
	// succ:  l1825_30B3 l1825_3124
l1825_30B3:
	ax = 0x7F<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v19 = Mem0[ds:0x21C4<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v19
	// succ:  l1825_30BB
l1825_30BB:
	v20 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v20
	v21 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v21
	call fn38D6_0D68 (retsize: 4;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	v22 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v22
	v23 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v23
	call fn2017_03D0 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn2017_03F5 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v25 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v25
	v26 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v26
	call fn2017_03D0 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v27 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v27
	v28 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v28
	call fn2017_02EC (retsize: 4;)
	sp = sp + 0xA<16>
	SCZO = cond(sp)
	v29 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v29
	v30 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v30
	call fn2017_03D0 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn2017_03F5 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	bx = ax
	es_si = Mem0[ss:bp + 6<i16>:segptr32]
	Mem0[es:bx + si:byte] = 0<8>
	goto l1825_2D5F
	// succ:  l1825_2D5F
l1825_3124:
	ax = 2<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x57A6<16>
	goto l1825_2EAD
	// succ:  l1825_2EAD
l1825_312E:
	SCZO = cond(Mem0[ds:0x20A2<16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_313C
	// succ:  l1825_3135 l1825_313C
l1825_3135:
	ax = 0x57A8<16>
	goto l1825_2D81
	// succ:  l1825_2D81
l1825_313C:
	ax = 0x57AC<16>
	goto l1825_2D81
	// succ:  l1825_2D81
l1825_3142:
	SCZO = cond(Mem0[ds:0x13F2<16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_3150
	// succ:  l1825_3149 l1825_3150
l1825_3149:
	ax = 0x57B0<16>
	goto l1825_2D81
	// succ:  l1825_2D81
l1825_3150:
	ax = 0x57B4<16>
	goto l1825_2D81
	// succ:  l1825_2D81
l1825_3156:
	SCZO = cond(Mem0[ds:0x13EE<16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_3164
	// succ:  l1825_315D l1825_3164
l1825_315D:
	ax = 0x57B8<16>
	goto l1825_2D81
	// succ:  l1825_2D81
l1825_3164:
	ax = 0x57BC<16>
	goto l1825_2D81
	// succ:  l1825_2D81
l1825_316A:
	SCZO = cond(Mem0[ds:0x20A8<16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_3178
	// succ:  l1825_3171 l1825_3178
l1825_3171:
	ax = 0x57C0<16>
	goto l1825_2D81
	// succ:  l1825_2D81
l1825_3178:
	ax = 0x57C4<16>
	goto l1825_2D81
	// succ:  l1825_2D81
l1825_31B4:
	SCZO = cond(ax - 0x4B<16>)
	branch Test(NE,Z) l1825_31BC
	// succ:  l1825_31B9 l1825_31BC
l1825_31B9:
	goto l1825_3044
	// succ:  l1825_3044
l1825_31BC:
	branch Test(UGT,CZ) l1825_3200
	// succ:  l1825_31BE l1825_3200
l1825_31BE:
	SCZO = cond(ax - 0x2B<16>)
	branch Test(NE,Z) l1825_31C6
	// succ:  l1825_31C3 l1825_31C6
l1825_31C3:
	goto l1825_2FB4
	// succ:  l1825_2FB4
l1825_31C6:
	branch Test(UGT,CZ) l1825_31DC
	// succ:  l1825_31C8 l1825_31DC
l1825_31C8:
	SCZO = cond(ax - 0x24<16>)
	branch Test(NE,Z) l1825_31D0
	// succ:  l1825_31CD l1825_31D0
l1825_31CD:
	goto l1825_2F8C
	// succ:  l1825_2F8C
l1825_31D0:
	SCZO = cond(ax - 0x26<16>)
	branch Test(NE,Z) l1825_31D8
	// succ:  l1825_31D5 l1825_31D8
l1825_31D5:
	goto l1825_2FA0
	// succ:  l1825_2FA0
l1825_31D8:
	goto l1825_2D5F
	// succ:  l1825_2D5F
l1825_31DC:
	SCZO = cond(ax - 0x2D<16>)
	branch Test(NE,Z) l1825_31E4
	// succ:  l1825_31E1 l1825_31E4
l1825_31E1:
	goto l1825_2FC8
	// succ:  l1825_2FC8
l1825_31E4:
	SCZO = cond(ax - 0x37<16>)
	branch Test(NE,Z) l1825_31EC
	// succ:  l1825_31E9 l1825_31EC
l1825_31E9:
	goto l1825_3000
	// succ:  l1825_3000
l1825_31EC:
	SCZO = cond(ax - 0x3D<16>)
	branch Test(NE,Z) l1825_31F4
	// succ:  l1825_31F1 l1825_31F4
l1825_31F1:
	goto l1825_2FE8
	// succ:  l1825_2FE8
l1825_31F4:
	SCZO = cond(ax - 0x48<16>)
	branch Test(NE,Z) l1825_31FC
	// succ:  l1825_31F9 l1825_31FC
l1825_31F9:
	goto l1825_3014
	// succ:  l1825_3014
l1825_31FC:
	goto l1825_2D5F
	// succ:  l1825_2D5F
l1825_3200:
	SCZO = cond(ax - 0x57<16>)
	branch Test(NE,Z) l1825_3208
	// succ:  l1825_3205 l1825_3208
l1825_3205:
	goto l1825_30AC
	// succ:  l1825_30AC
l1825_3208:
	branch Test(UGT,CZ) l1825_3226
	// succ:  l1825_320A l1825_3226
l1825_320A:
	SCZO = cond(ax - 0x52<16>)
	branch Test(NE,Z) l1825_3212
	// succ:  l1825_320F l1825_3212
l1825_320F:
	goto l1825_3058
	// succ:  l1825_3058
l1825_3212:
	SCZO = cond(ax - 0x53<16>)
	branch Test(NE,Z) l1825_321A
	// succ:  l1825_3217 l1825_321A
l1825_3217:
	goto l1825_3074
	// succ:  l1825_3074
l1825_321A:
	SCZO = cond(ax - 0x56<16>)
	branch Test(NE,Z) l1825_3222
	// succ:  l1825_321F l1825_3222
l1825_321F:
	goto l1825_3090
	// succ:  l1825_3090
l1825_3222:
	goto l1825_2D5F
	// succ:  l1825_2D5F
l1825_3226:
	SCZO = cond(ax - 0x59<16>)
	branch Test(NE,Z) l1825_322E
	// succ:  l1825_322B l1825_322E
l1825_322B:
	goto l1825_312E
	// succ:  l1825_312E
l1825_322E:
	SCZO = cond(ax - 0x5D<16>)
	branch Test(NE,Z) l1825_3236
	// succ:  l1825_3233 l1825_3236
l1825_3233:
	goto l1825_3142
	// succ:  l1825_3142
l1825_3236:
	SCZO = cond(ax - 0x66<16>)
	branch Test(NE,Z) l1825_323E
	// succ:  l1825_323B l1825_323E
l1825_323B:
	goto l1825_3156
	// succ:  l1825_3156
l1825_323E:
	SCZO = cond(ax - 0x6A<16>)
	branch Test(NE,Z) l1825_3246
	// succ:  l1825_3243 l1825_3246
l1825_3243:
	goto l1825_316A
	// succ:  l1825_316A
l1825_3246:
	goto l1825_2D5F
	// succ:  l1825_2D5F
fn1825_2CF2_exit:


// fn1825_324A
// Return size: 4
define fn1825_324A
fn1825_324A_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l1825_324A
l1825_324A:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	Mem0[ss:bp - 2<i16>:word16] = 0<16>
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v9 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v9
	v10 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v10
	v12 = Mem0[ds:0xC10<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v12
	call fn1825_336C (retsize: 4;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 2<i16>:word16] = ax
	SCZO = cond(Mem0[ds:0xC12<16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_3293
	// succ:  l1825_3274 l1825_3293
l1825_3274:
	bx = ax
	v15 = Mem0[ss:bp - 2<i16>:word16] + 1<16>
	Mem0[ss:bp - 2<i16>:word16] = v15
	SZO = cond(v15)
	es_si = Mem0[ss:bp + 6<i16>:segptr32]
	Mem0[es:bx + si:byte] = 0x2F<8>
	v19 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v19
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = es
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	v20 = Mem0[ds:0xC12<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v20
	call fn1825_336C (retsize: 4;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 2<i16>:word16] = ax
	// succ:  l1825_3293
l1825_3293:
	bx = Mem0[ss:bp - 2<i16>:word16]
	v21 = Mem0[ss:bp - 2<i16>:word16] + 1<16>
	Mem0[ss:bp - 2<i16>:word16] = v21
	SZO = cond(v21)
	es_si = Mem0[ss:bp + 6<i16>:segptr32]
	Mem0[es:bx + si:byte] = 0x2C<8>
	v22 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v22
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = es
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	v23 = Mem0[ds:0xC14<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v23
	call fn1825_336C (retsize: 4;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 2<i16>:word16] = ax
	SCZO = cond(Mem0[ds:0xC16<16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_32D9
	// succ:  l1825_32BA l1825_32D9
l1825_32BA:
	bx = ax
	v24 = Mem0[ss:bp - 2<i16>:word16] + 1<16>
	Mem0[ss:bp - 2<i16>:word16] = v24
	SZO = cond(v24)
	es = Mem0[ss:bp + 8<i16>:selector]
	Mem0[es:bx + si:byte] = 0x2F<8>
	v25 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v25
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = es
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	v26 = Mem0[ds:0xC16<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v26
	call fn1825_336C (retsize: 4;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 2<i16>:word16] = ax
	// succ:  l1825_32D9
l1825_32D9:
	bx = Mem0[ss:bp - 2<i16>:word16]
	v27 = Mem0[ss:bp - 2<i16>:word16] + 1<16>
	Mem0[ss:bp - 2<i16>:word16] = v27
	SZO = cond(v27)
	es_si = Mem0[ss:bp + 6<i16>:segptr32]
	Mem0[es:bx + si:byte] = 0x2C<8>
	v28 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v28
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = es
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	v29 = Mem0[ds:0xC1C<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v29
	call fn1825_336C (retsize: 4;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 2<i16>:word16] = ax
	bx = ax
	v30 = Mem0[ss:bp - 2<i16>:word16] + 1<16>
	Mem0[ss:bp - 2<i16>:word16] = v30
	SZO = cond(v30)
	es = Mem0[ss:bp + 8<i16>:selector]
	Mem0[es:bx + si:byte] = 0x2C<8>
	v31 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v31
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = es
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	v32 = Mem0[ds:0xC1E<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v32
	call fn1825_336C (retsize: 4;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 2<i16>:word16] = ax
	bx = ax
	v33 = Mem0[ss:bp - 2<i16>:word16] + 1<16>
	Mem0[ss:bp - 2<i16>:word16] = v33
	SZO = cond(v33)
	es = Mem0[ss:bp + 8<i16>:selector]
	Mem0[es:bx + si:byte] = 0x2C<8>
	v34 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v34
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = es
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	v35 = Mem0[ds:0xC18<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v35
	call fn1825_336C (retsize: 4;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 2<i16>:word16] = ax
	SCZO = cond(Mem0[ds:0xC1A<16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_335D
	// succ:  l1825_333E l1825_335D
l1825_333E:
	bx = ax
	v36 = Mem0[ss:bp - 2<i16>:word16] + 1<16>
	Mem0[ss:bp - 2<i16>:word16] = v36
	SZO = cond(v36)
	es = Mem0[ss:bp + 8<i16>:selector]
	Mem0[es:bx + si:byte] = 0x2F<8>
	v37 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v37
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = es
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	v38 = Mem0[ds:0xC1A<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v38
	call fn1825_336C (retsize: 4;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 2<i16>:word16] = ax
	// succ:  l1825_335D
l1825_335D:
	bx = Mem0[ss:bp - 2<i16>:word16]
	es_si = Mem0[ss:bp + 6<i16>:segptr32]
	Mem0[es:bx + si:byte] = 0<8>
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_324A_exit
fn1825_324A_exit:


// fn1825_336C
// Return size: 4
define fn1825_336C
fn1825_336C_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l1825_336C
l1825_336C:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	SZP = cond(Mem0[ss:bp + 6<i16>:byte] & 0x80<8>)
	O = false
	C = false
	branch Test(EQ,Z) l1825_3383
	// succ:  l1825_3376 l1825_3383
l1825_3376:
	bx = Mem0[ss:bp + 12<i16>:word16]
	v12 = Mem0[ss:bp + 12<i16>:word16] + 1<16>
	Mem0[ss:bp + 12<i16>:word16] = v12
	SZO = cond(v12)
	es_si = Mem0[ss:bp + 8<i16>:segptr32]
	Mem0[es:bx + si:byte] = 0x57<8>
	// succ:  l1825_3383
l1825_3383:
	SZP = cond(Mem0[ss:bp + 6<i16>:byte] & 1<8>)
	O = false
	C = false
	branch Test(EQ,Z) l1825_3396
	// succ:  l1825_3389 l1825_3396
l1825_3389:
	bx = Mem0[ss:bp + 12<i16>:word16]
	v16 = Mem0[ss:bp + 12<i16>:word16] + 1<16>
	Mem0[ss:bp + 12<i16>:word16] = v16
	SZO = cond(v16)
	es_si = Mem0[ss:bp + 8<i16>:segptr32]
	Mem0[es:bx + si:byte] = 0x42<8>
	// succ:  l1825_3396
l1825_3396:
	SZP = cond(Mem0[ss:bp + 6<i16>:byte] & 2<8>)
	O = false
	C = false
	branch Test(EQ,Z) l1825_33A9
	// succ:  l1825_339C l1825_33A9
l1825_339C:
	bx = Mem0[ss:bp + 12<i16>:word16]
	v17 = Mem0[ss:bp + 12<i16>:word16] + 1<16>
	Mem0[ss:bp + 12<i16>:word16] = v17
	SZO = cond(v17)
	es_si = Mem0[ss:bp + 8<i16>:segptr32]
	Mem0[es:bx + si:byte] = 0x47<8>
	// succ:  l1825_33A9
l1825_33A9:
	SZP = cond(Mem0[ss:bp + 6<i16>:byte] & 4<8>)
	O = false
	C = false
	branch Test(EQ,Z) l1825_33BC
	// succ:  l1825_33AF l1825_33BC
l1825_33AF:
	bx = Mem0[ss:bp + 12<i16>:word16]
	v18 = Mem0[ss:bp + 12<i16>:word16] + 1<16>
	Mem0[ss:bp + 12<i16>:word16] = v18
	SZO = cond(v18)
	es_si = Mem0[ss:bp + 8<i16>:segptr32]
	Mem0[es:bx + si:byte] = 0x52<8>
	// succ:  l1825_33BC
l1825_33BC:
	SZP = cond(Mem0[ss:bp + 6<i16>:word16] & 0x100<16>)
	O = false
	C = false
	branch Test(EQ,Z) l1825_33D0
	// succ:  l1825_33C3 l1825_33D0
l1825_33C3:
	bx = Mem0[ss:bp + 12<i16>:word16]
	v19 = Mem0[ss:bp + 12<i16>:word16] + 1<16>
	Mem0[ss:bp + 12<i16>:word16] = v19
	SZO = cond(v19)
	es_si = Mem0[ss:bp + 8<i16>:segptr32]
	Mem0[es:bx + si:byte] = 0x49<8>
	// succ:  l1825_33D0
l1825_33D0:
	SZP = cond(Mem0[ss:bp + 6<i16>:byte] & 0x20<8>)
	O = false
	C = false
	branch Test(EQ,Z) l1825_33E3
	// succ:  l1825_33D6 l1825_33E3
l1825_33D6:
	bx = Mem0[ss:bp + 12<i16>:word16]
	v20 = Mem0[ss:bp + 12<i16>:word16] + 1<16>
	Mem0[ss:bp + 12<i16>:word16] = v20
	SZO = cond(v20)
	es_si = Mem0[ss:bp + 8<i16>:segptr32]
	Mem0[es:bx + si:byte] = 0x55<8>
	// succ:  l1825_33E3
l1825_33E3:
	SZP = cond(Mem0[ss:bp + 6<i16>:byte] & 0x40<8>)
	O = false
	C = false
	branch Test(EQ,Z) l1825_33F6
	// succ:  l1825_33E9 l1825_33F6
l1825_33E9:
	bx = Mem0[ss:bp + 12<i16>:word16]
	v21 = Mem0[ss:bp + 12<i16>:word16] + 1<16>
	Mem0[ss:bp + 12<i16>:word16] = v21
	SZO = cond(v21)
	es_si = Mem0[ss:bp + 8<i16>:segptr32]
	Mem0[es:bx + si:byte] = 0x4E<8>
	// succ:  l1825_33F6
l1825_33F6:
	SZP = cond(Mem0[ss:bp + 6<i16>:word16] & 0x200<16>)
	O = false
	C = false
	branch Test(EQ,Z) l1825_340A
	// succ:  l1825_33FD l1825_340A
l1825_33FD:
	bx = Mem0[ss:bp + 12<i16>:word16]
	v22 = Mem0[ss:bp + 12<i16>:word16] + 1<16>
	Mem0[ss:bp + 12<i16>:word16] = v22
	SZO = cond(v22)
	es_si = Mem0[ss:bp + 8<i16>:segptr32]
	Mem0[es:bx + si:byte] = 0x58<8>
	// succ:  l1825_340A
l1825_340A:
	SZP = cond(Mem0[ss:bp + 6<i16>:byte] & 0x10<8>)
	O = false
	C = false
	branch Test(EQ,Z) l1825_341D
	// succ:  l1825_3410 l1825_341D
l1825_3410:
	bx = Mem0[ss:bp + 12<i16>:word16]
	v23 = Mem0[ss:bp + 12<i16>:word16] + 1<16>
	Mem0[ss:bp + 12<i16>:word16] = v23
	SZO = cond(v23)
	es_si = Mem0[ss:bp + 8<i16>:segptr32]
	Mem0[es:bx + si:byte] = 0x2A<8>
	// succ:  l1825_341D
l1825_341D:
	SZP = cond(Mem0[ss:bp + 6<i16>:byte] & 8<8>)
	O = false
	C = false
	branch Test(EQ,Z) l1825_3430
	// succ:  l1825_3423 l1825_3430
l1825_3423:
	bx = Mem0[ss:bp + 12<i16>:word16]
	v24 = Mem0[ss:bp + 12<i16>:word16] + 1<16>
	Mem0[ss:bp + 12<i16>:word16] = v24
	SZO = cond(v24)
	es_si = Mem0[ss:bp + 8<i16>:segptr32]
	Mem0[es:bx + si:byte] = 0x2B<8>
	// succ:  l1825_3430
l1825_3430:
	ax = Mem0[ss:bp + 12<i16>:word16]
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_336C_exit
fn1825_336C_exit:


// fn1825_3436
// Return size: 4
define fn1825_3436
fn1825_3436_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l1825_3436
l1825_3436:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0xE<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	Mem0[ss:bp - 6<i16>:word16] = 2<16>
	Mem0[ss:bp - 12<i16>:word16] = 4<16>
	Mem0[ss:bp - 4<i16>:word16] = 0x14<16>
	Mem0[ss:bp - 2<i16>:word16] = 0x11<16>
	SCZO = cond(Mem0[ds:0x982<16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_345C
	// succ:  l1825_3459 l1825_345C
l1825_3459:
	goto l1825_34EE
	// succ:  l1825_34EE
l1825_345C:
	SCZO = cond(Mem0[ds:0x9A6<16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_3466
	// succ:  l1825_3463 l1825_3466
l1825_3463:
	goto l1825_34EE
	// succ:  l1825_34EE
l1825_3466:
	Mem0[ds:0x980<16>:word16] = 1<16>
	Mem0[ds:0x982<16>:word16] = 0<16>
	Mem0[ds:0x984<16>:word16] = 0<16>
	Mem0[ds:0x986<16>:word16] = 0<16>
	Mem0[ds:0x988<16>:word16] = 0<16>
	Mem0[ds:0x98C<16>:word16] = 1<16>
	Mem0[ds:0x98E<16>:word16] = 1<16>
	Mem0[ds:0x990<16>:word16] = 0<16>
	Mem0[ds:0x992<16>:word16] = 1<16>
	Mem0[ds:0x994<16>:word16] = 0<16>
	Mem0[ds:0x99A<16>:word16] = 3<16>
	ax = Mem0[ss:bp - 4<i16>:word16]
	ax = ax - 1<16>
	SZO = cond(ax)
	Mem0[ds:0x99C<16>:word16] = ax
	ax = Mem0[ds:0x99A<16>:word16]
	Mem0[ds:0x998<16>:word16] = ax
	Mem0[ds:0x996<16>:word16] = 5<16>
	Mem0[ds:0x99E<16>:word16] = 0x11<16>
	Mem0[ds:0x9EC<16>:word16] = 2<16>
	ax = Mem0[ss:bp - 2<i16>:word16]
	ax = ax + 1<16>
	SZO = cond(ax)
	Mem0[ds:0x9EE<16>:word16] = ax
	ax = Mem0[ss:bp - 4<i16>:word16]
	Mem0[ds:0x9F0<16>:word16] = ax
	ax = Mem0[ss:bp - 2<i16>:word16]
	ax = ax + 0x3D<16>
	SCZO = cond(ax)
	Mem0[ds:0x9F2<16>:word16] = ax
	Mem0[ds:0x9F4<16>:word16] = 0<16>
	ax = ax - ax
	SCZO = cond(ax)
	Mem0[ds:0x9F8<16>:word16] = ax
	Mem0[ds:0x9F6<16>:word16] = ax
	Mem0[ds:0xA26<16>:word16] = ax
	// succ:  l1825_34EE
l1825_34EE:
	SCZO = cond(Mem0[ds:0x9A6<16>:word16] - 0<16>)
	branch Test(NE,Z) l1825_3556
	// succ:  l1825_34F5 l1825_3556
l1825_34F5:
	SCZO = cond(Mem0[ds:0x982<16>:word16] - 0<16>)
	branch Test(NE,Z) l1825_3556
	// succ:  l1825_34FC l1825_3556
l1825_34FC:
	Mem0[ds:0x9A4<16>:word16] = 1<16>
	Mem0[ds:0x9A6<16>:word16] = 0<16>
	Mem0[ds:0x9A8<16>:word16] = 0<16>
	Mem0[ds:0x9AA<16>:word16] = 0<16>
	Mem0[ds:0x9AC<16>:word16] = 0<16>
	Mem0[ds:0x9B0<16>:word16] = 0<16>
	Mem0[ds:0x9B2<16>:word16] = 0<16>
	Mem0[ds:0x9B4<16>:word16] = 0<16>
	Mem0[ds:0x9B6<16>:word16] = 0<16>
	Mem0[ds:0x9B8<16>:word16] = 0<16>
	Mem0[ds:0x9BE<16>:word16] = 0<16>
	Mem0[ds:0x9C0<16>:word16] = 0<16>
	Mem0[ds:0x9BC<16>:word16] = 0<16>
	Mem0[ds:0x9BA<16>:word16] = 0<16>
	Mem0[ds:0x9C2<16>:word16] = 0x10<16>
	// succ:  l1825_3556
l1825_3556:
	Mem0[ds:0x98A<16>:word16] = 1<16>
	Mem0[ds:0x9AE<16>:word16] = 1<16>
	Mem0[ds:0xA24<16>:word16] = 0<16>
	Mem0[ds:0x990<16>:word16] = 0<16>
	Mem0[ss:bp - 8<i16>:word16] = 1<16>
	// succ:  l1825_3573
l1825_3573:
	bx = Mem0[ss:bp - 8<i16>:word16]
	bx = bx << 1<16>
	SCZO = cond(bx)
	bx = bx << 1<16>
	SCZO = cond(bx)
	es_si = Mem0[ds:0x130A<16>:segptr32]
	ax = Mem0[es:bx + si:word16]
	ax = ax | Mem0[es:(bx + 2<i16>) + si:word16]
	SZ = cond(ax)
	O = false
	C = false
	branch Test(EQ,Z) l1825_358B
	// succ:  l1825_3587 l1825_358B
l1825_3587:
	v19 = Mem0[ds:0x990<16>:word16] + 1<16>
	Mem0[ds:0x990<16>:word16] = v19
	SZO = cond(v19)
	// succ:  l1825_358B
l1825_358B:
	v20 = Mem0[ss:bp - 8<i16>:word16] + 1<16>
	Mem0[ss:bp - 8<i16>:word16] = v20
	SZO = cond(v20)
	SCZO = cond(Mem0[ss:bp - 8<i16>:word16] - 0x100<16>)
	branch Test(ULT,C) l1825_3573
	// succ:  l1825_3595 l1825_3573
l1825_3595:
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_0527 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	ax = 0x9EC<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1825_4CFE (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = 0xA5E<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v21 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v21
	v22 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v22
	v23 = Mem0[ss:bp - 12<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v23
	v24 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v24
	call fn1F38_05DB (retsize: 4;)
	sp = sp + 0xC<16>
	SCZO = cond(sp)
	ax = 0xA2C<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v25 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v25
	v26 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v26
	v27 = Mem0[ss:bp - 12<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v27
	v28 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v28
	call fn1F38_05DB (retsize: 4;)
	sp = sp + 0xC<16>
	SCZO = cond(sp)
	si = Mem0[ss:bp - 4<i16>:word16]
	si = si + 1<16>
	SZO = cond(si)
	di = Mem0[ss:bp - 4<i16>:word16]
	di = di + 3<16>
	SCZO = cond(di)
	ax = Mem0[ss:bp - 12<i16>:word16]
	ax = ax + 0x4A<16>
	SCZO = cond(ax)
	Mem0[ss:bp - 14<i16>:word16] = ax
	ax = 0xA5E<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v29 = Mem0[ss:bp - 14<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v29
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	v30 = Mem0[ss:bp - 12<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v30
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	call fn1F38_05DB (retsize: 4;)
	sp = sp + 0xC<16>
	SCZO = cond(sp)
	ax = 0xA2C<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v31 = Mem0[ss:bp - 14<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v31
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	v32 = Mem0[ss:bp - 12<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v32
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	call fn1F38_05DB (retsize: 4;)
	sp = sp + 0xC<16>
	SCZO = cond(sp)
	ax = 0xA24<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v33 = Mem0[ss:bp - 12<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v33
	v34 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v34
	call fn1825_3BCE (retsize: 4;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	SCZO = cond(Mem0[ds:0x990<16>:word16] - 1<16>)
	ax = ax - ax - C
	SCZO = cond(ax)
	C = ax != 0<16>
	ax = -ax
	SZO = cond(ax)
	goto l1825_36CE
	// succ:  l1825_36CE
l1825_363A:
	SCZO = cond(Mem0[ds:0xA24<16>:word16] - 0<16>)
	branch Test(NE,Z) l1825_3668
	// succ:  l1825_3641 l1825_3668
l1825_3641:
	ax = 0xA24<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x9EC<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x9A4<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x980<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v36 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v36
	v37 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v37
	v38 = Mem0[ss:bp - 12<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v38
	v39 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v39
	call fn1825_3766 (retsize: 4;)
	sp = sp + 0x18<16>
	SCZO = cond(sp)
	// succ:  l1825_3668
l1825_3668:
	SCZO = cond(Mem0[ds:0x98A<16>:word16] - 6<16>)
	branch Test(EQ,Z) l1825_367D
	// succ:  l1825_366F l1825_367D
l1825_366F:
	SCZO = cond(Mem0[ds:0x98A<16>:word16] - 8<16>)
	branch Test(EQ,Z) l1825_367D
	// succ:  l1825_3676 l1825_367D
l1825_3676:
	SCZO = cond(Mem0[ds:0x9A6<16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_36A8
	// succ:  l1825_367D l1825_36A8
l1825_367D:
	ax = 0xA24<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x9EC<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v40 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v40
	v41 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v41
	v42 = Mem0[ss:bp - 12<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v42
	v43 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v43
	ax = 1<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x9A4<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x980<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1825_3CDC (retsize: 4;)
	sp = sp + 0x1A<16>
	SCZO = cond(sp)
	// succ:  l1825_36A8
l1825_36A8:
	SCZO = cond(Mem0[ds:0x984<16>:word16] - 0<16>)
	branch Test(NE,Z) l1825_36C6
	// succ:  l1825_36AF l1825_36C6
l1825_36AF:
	SCZO = cond(Mem0[ds:0x9A8<16>:word16] - 0<16>)
	branch Test(NE,Z) l1825_36C6
	// succ:  l1825_36B6 l1825_36C6
l1825_36B6:
	SCZO = cond(Mem0[ds:0x98A<16>:word16] - 0xBB8<16>)
	branch Test(EQ,Z) l1825_36C6
	// succ:  l1825_36BE l1825_36C6
l1825_36BE:
	SCZO = cond(Mem0[ds:0x9AE<16>:word16] - 0xBB8<16>)
	branch Test(NE,Z) l1825_36CC
	// succ:  l1825_36C6 l1825_36CC
l1825_36C6:
	ax = 1<16>
	goto l1825_36CE
	// succ:  l1825_36CE
l1825_36CC:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l1825_36CE
l1825_36CE:
	Mem0[ss:bp - 10<i16>:word16] = ax
	ax = ax | ax
	SZ = cond(ax)
	O = false
	C = false
	branch Test(NE,Z) l1825_36D8
	// succ:  l1825_36D5 l1825_36D8
l1825_36D5:
	goto l1825_363A
	// succ:  l1825_363A
l1825_36D8:
	SCZO = cond(Mem0[ds:0x990<16>:word16] - 0<16>)
	branch Test(NE,Z) l1825_371B
	// succ:  l1825_36DF l1825_371B
l1825_36DF:
	call fn1F38_07FA (retsize: 4;)
	ax = Mem0[ss:bp - 12<i16>:word16]
	ax = ax + 2<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v35 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v35
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = 9<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x57C8<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x980<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1825_67EE (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	call fn1F38_07E7 (retsize: 4;)
	// succ:  l1825_371B
l1825_371B:
	SCZO = cond(Mem0[ds:0x984<16>:word16] - 0<16>)
	branch Test(NE,Z) l1825_3729
	// succ:  l1825_3722 l1825_3729
l1825_3722:
	SCZO = cond(Mem0[ds:0x9A8<16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_3735
	// succ:  l1825_3729 l1825_3735
l1825_3729:
	Mem0[ds:0x982<16>:word16] = 0<16>
	Mem0[ds:0x9A6<16>:word16] = 0<16>
	// succ:  l1825_3735
l1825_3735:
	SCZO = cond(Mem0[ds:0xF02<16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_3750
	// succ:  l1825_373C l1825_3750
l1825_373C:
	v44 = Mem0[ds:0x9F4<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v44
	v45 = Mem0[ds:0x9F8<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v45
	v46 = Mem0[ds:0x9F6<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v46
	call fn21DC_09B4 (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	// succ:  l1825_3750
l1825_3750:
	ax = 1<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_0527 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	ax = 1<16>
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	di = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_3436_exit
fn1825_3436_exit:


// fn1825_3766
// Return size: 4
define fn1825_3766
fn1825_3766_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l1825_3766
l1825_3766:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0xA<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 8<i16>:word16] = 0<16>
	// succ:  l1825_3771
l1825_3771:
	es_bx = Mem0[ss:bp + 18<i16>:segptr32]
	SCZO = cond(Mem0[es:bx + 2<i16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_377E
	// succ:  l1825_377B l1825_377E
l1825_377B:
	goto l1825_3986
	// succ:  l1825_3986
l1825_377E:
	es_bx = Mem0[ss:bp + 14<i16>:segptr32]
	SCZO = cond(Mem0[es:bx:word16] - 0<16>)
	branch Test(NE,Z) l1825_378E
	// succ:  l1825_3787 l1825_378E
l1825_3787:
	SCZO = cond(Mem0[es:bx + 2<i16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_37A3
	// succ:  l1825_378E l1825_37A3
l1825_378E:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = es
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bx
	v11 = Mem0[ss:bp + 12<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v11
	v12 = Mem0[ss:bp + 10<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v12
	v13 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v13
	v14 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v14
	call fn1825_39DE (retsize: 4;)
	sp = sp + 0xC<16>
	SCZO = cond(sp)
	// succ:  l1825_37A3
l1825_37A3:
	v25 = Mem0[ss:bp + 28<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v25
	v26 = Mem0[ss:bp + 26<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v26
	v27 = Mem0[ss:bp + 24<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v27
	v28 = Mem0[ss:bp + 22<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v28
	v29 = Mem0[ss:bp + 12<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v29
	v30 = Mem0[ss:bp + 10<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v30
	v31 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v31
	v32 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v32
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v33 = Mem0[ss:bp + 20<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v33
	v34 = Mem0[ss:bp + 18<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v34
	v35 = Mem0[ss:bp + 16<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v35
	v36 = Mem0[ss:bp + 14<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v36
	call fn1825_3CDC (retsize: 4;)
	sp = sp + 0x1A<16>
	SCZO = cond(sp)
	es_bx = Mem0[ss:bp + 14<i16>:segptr32]
	v37 = Mem0[es:bx + 12<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v37
	call fn1825_3AF8 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 4<i16>:word16] = ax
	Mem0[ss:bp - 2<i16>:word16] = dx
	ax = 0xC<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x20<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0xBE8<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn2017_0228 (retsize: 4;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	es_bx = Mem0[ss:bp - 4<i16>:segptr32]
	es_bx = Mem0[es:bx + 62<i16>:segptr32]
	v39 = Mem0[es:bx + 12<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v39
	v40 = Mem0[es:bx + 10<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v40
	call fn2017_03F5 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 10<i16>:word16] = ax
	ax = ax + 1<16>
	SZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	es_bx = Mem0[ss:bp - 4<i16>:segptr32]
	es_bx = Mem0[es:bx + 62<i16>:segptr32]
	v42 = Mem0[es:bx + 12<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v42
	v43 = Mem0[es:bx + 10<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v43
	ax = 0xBE9<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn2017_02EC (retsize: 4;)
	sp = sp + 0xA<16>
	SCZO = cond(sp)
	call fn1F38_07FA (retsize: 4;)
	es_bx = Mem0[ss:bp + 14<i16>:segptr32]
	v44 = Mem0[es:bx + 22<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v44
	v45 = Mem0[es:bx + 24<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v45
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = 0xC<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0xBE8<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	call fn1F38_07E7 (retsize: 4;)
	es_bx = Mem0[ss:bp + 14<i16>:segptr32]
	ax = Mem0[es:bx + 24<i16>:word16]
	Mem0[ss:bp - 6<i16>:word16] = ax
	Mem0[es:bx + 2<i16>:word16] = 0<16>
	es_bx = Mem0[ss:bp + 18<i16>:segptr32]
	Mem0[es:bx:word16] = 1<16>
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v46 = Mem0[ss:bp + 16<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v46
	v47 = Mem0[ss:bp + 14<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v47
	call fn1825_67EE (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	es_bx = Mem0[ss:bp + 14<i16>:segptr32]
	v48 = Mem0[es:bx + 22<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v48
	v49 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v49
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = 0xC<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0xBE8<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	es_bx = Mem0[ss:bp + 14<i16>:segptr32]
	SCZO = cond(Mem0[es:bx + 10<i16>:word16] - 6<16>)
	branch Test(EQ,Z) l1825_38BC
	// succ:  l1825_38B5 l1825_38BC
l1825_38B5:
	SCZO = cond(Mem0[es:bx + 10<i16>:word16] - 8<16>)
	branch Test(NE,Z) l1825_38DD
	// succ:  l1825_38BC l1825_38DD
l1825_38BC:
	v50 = Mem0[es:bx + 22<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v50
	v51 = Mem0[es:bx + 24<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v51
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = 1<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x57D2<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	// succ:  l1825_38DD
l1825_38DD:
	es_bx = Mem0[ss:bp + 14<i16>:segptr32]
	SCZO = cond(Mem0[es:bx + 4<i16>:word16] - 0<16>)
	branch Test(NE,Z) l1825_38FD
	// succ:  l1825_38E7 l1825_38FD
l1825_38E7:
	SCZO = cond(Mem0[es:bx + 10<i16>:word16] - 0xBB8<16>)
	branch Test(EQ,Z) l1825_38FD
	// succ:  l1825_38EF l1825_38FD
l1825_38EF:
	SCZO = cond(Mem0[es:bx + 10<i16>:word16] - 6<16>)
	branch Test(EQ,Z) l1825_38FD
	// succ:  l1825_38F6 l1825_38FD
l1825_38F6:
	SCZO = cond(Mem0[es:bx + 10<i16>:word16] - 8<16>)
	branch Test(NE,Z) l1825_3902
	// succ:  l1825_38FD l1825_3902
l1825_38FD:
	ax = 1<16>
	goto l1825_3904
	// succ:  l1825_3904
l1825_3902:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l1825_3904
l1825_3904:
	Mem0[ss:bp - 8<i16>:word16] = ax
	ax = ax | ax
	SZ = cond(ax)
	O = false
	C = false
	branch Test(NE,Z) l1825_3915
	// succ:  l1825_390B l1825_3915
l1825_390B:
	es_bx = Mem0[ss:bp + 14<i16>:segptr32]
	SCZO = cond(Mem0[es:bx + 10<i16>:word16] - 0xF<16>)
	branch Test(EQ,Z) l1825_3949
	// succ:  l1825_3915 l1825_3949
l1825_3915:
	es_bx = Mem0[ss:bp + 14<i16>:segptr32]
	SCZO = cond(Mem0[es:bx + 10<i16>:word16] - 0x10<16>)
	branch Test(EQ,Z) l1825_3949
	// succ:  l1825_391F l1825_3949
l1825_391F:
	SCZO = cond(Mem0[es:bx + 10<i16>:word16] - 9<16>)
	branch Test(EQ,Z) l1825_3949
	// succ:  l1825_3926 l1825_3949
l1825_3926:
	SCZO = cond(Mem0[es:bx + 10<i16>:word16] - 0xA<16>)
	branch Test(EQ,Z) l1825_3949
	// succ:  l1825_392D l1825_3949
l1825_392D:
	SCZO = cond(Mem0[es:bx + 10<i16>:word16] - 0x20<16>)
	branch Test(EQ,Z) l1825_3949
	// succ:  l1825_3934 l1825_3949
l1825_3934:
	SCZO = cond(Mem0[es:bx + 10<i16>:word16] - 0x21<16>)
	branch Test(EQ,Z) l1825_3949
	// succ:  l1825_393B l1825_3949
l1825_393B:
	SCZO = cond(Mem0[es:bx + 10<i16>:word16] - 0x22<16>)
	branch Test(EQ,Z) l1825_3949
	// succ:  l1825_3942 l1825_3949
l1825_3942:
	SCZO = cond(Mem0[es:bx + 10<i16>:word16] - 0x23<16>)
	branch Test(NE,Z) l1825_39C8
	// succ:  l1825_3949 l1825_39C8
l1825_3949:
	es_bx = Mem0[ss:bp + 18<i16>:segptr32]
	Mem0[es:bx:word16] = 1<16>
	Mem0[es:bx + 6<i16>:word16] = 0<16>
	Mem0[es:bx + 8<i16>:word16] = 0<16>
	Mem0[es:bx + 12<i16>:word16] = 0<16>
	Mem0[es:bx + 14<i16>:word16] = 0<16>
	Mem0[es:bx + 16<i16>:word16] = 0<16>
	Mem0[es:bx + 18<i16>:word16] = 0<16>
	Mem0[es:bx + 20<i16>:word16] = 0<16>
	ax = Mem0[es:bx + 26<i16>:word16]
	Mem0[es:bx + 24<i16>:word16] = ax
	goto l1825_39C8
	// succ:  l1825_39C8
l1825_3986:
	v15 = Mem0[ss:bp + 16<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v15
	v16 = Mem0[ss:bp + 14<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v16
	v17 = Mem0[ss:bp + 12<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v17
	v18 = Mem0[ss:bp + 10<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v18
	v19 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v19
	v20 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v20
	call fn1825_39DE (retsize: 4;)
	sp = sp + 0xC<16>
	SCZO = cond(sp)
	es_bx = Mem0[ss:bp + 14<i16>:segptr32]
	v21 = Mem0[es:bx + 22<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v21
	v22 = Mem0[es:bx + 24<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v22
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = 1<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x57D4<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 8<i16>:word16] = 1<16>
	// succ:  l1825_39C8
l1825_39C8:
	SCZO = cond(Mem0[ss:bp - 8<i16>:word16] - 0<16>)
	branch Test(NE,Z) l1825_39D1
	// succ:  l1825_39CE l1825_39D1
l1825_39CE:
	goto l1825_3771
	// succ:  l1825_3771
l1825_39D1:
	es_bx = Mem0[ss:bp + 14<i16>:segptr32]
	Mem0[es:bx:word16] = 1<16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_3766_exit
fn1825_3766_exit:


// fn1825_39DE
// Return size: 4
define fn1825_39DE
fn1825_39DE_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l1825_39DE
l1825_39DE:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 8<16>
	SCZO = cond(sp)
	ax = 0xA5E<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v9 = Mem0[ss:bp + 12<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v9
	v10 = Mem0[ss:bp + 10<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v10
	v11 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v11
	v12 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v12
	call fn1F38_05DB (retsize: 4;)
	sp = sp + 0xC<16>
	SCZO = cond(sp)
	ax = 0xA36<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v13 = Mem0[ss:bp + 12<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v13
	v14 = Mem0[ss:bp + 10<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v14
	v15 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v15
	v16 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v16
	call fn1F38_05DB (retsize: 4;)
	sp = sp + 0xC<16>
	SCZO = cond(sp)
	es_bx = Mem0[ss:bp + 14<i16>:segptr32]
	ax = Mem0[es:bx + 18<i16>:word16]
	Mem0[ss:bp - 8<i16>:word16] = ax
	ax = Mem0[es:bx + 26<i16>:word16]
	Mem0[ss:bp - 6<i16>:word16] = ax
	Mem0[es:bx + 20<i16>:word16] = 0<16>
	goto l1825_3A99
	// succ:  l1825_3A99
l1825_3A30:
	ax = Mem0[ss:bp - 6<i16>:word16]
	SCZO = cond(Mem0[es:bx + 28<i16>:word16] - ax)
	branch Test(ULT,C) l1825_3AA2
	// succ:  l1825_3A39 l1825_3AA2
l1825_3A39:
	v22 = Mem0[ss:bp - 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v22
	call fn1825_3AF8 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 4<i16>:word16] = ax
	Mem0[ss:bp - 2<i16>:word16] = dx
	es_bx = Mem0[ss:bp + 14<i16>:segptr32]
	ax = Mem0[es:bx + 22<i16>:word16]
	ax = ax + 1<16>
	SZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v25 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v25
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	es_bx = Mem0[ss:bp - 4<i16>:segptr32]
	es_bx = Mem0[es:bx + 62<i16>:segptr32]
	v26 = Mem0[es:bx + 12<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v26
	v27 = Mem0[es:bx + 10<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v27
	call fn2017_03F5 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	es_bx = Mem0[ss:bp - 4<i16>:segptr32]
	es_bx = Mem0[es:bx + 62<i16>:segptr32]
	v28 = Mem0[es:bx + 12<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v28
	v29 = Mem0[es:bx + 10<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v29
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	v30 = Mem0[ss:bp - 8<i16>:word16] + 1<16>
	Mem0[ss:bp - 8<i16>:word16] = v30
	SZO = cond(v30)
	v31 = Mem0[ss:bp - 6<i16>:word16] + 1<16>
	Mem0[ss:bp - 6<i16>:word16] = v31
	SZO = cond(v31)
	es_bx = Mem0[ss:bp + 14<i16>:segptr32]
	v32 = Mem0[es:bx + 20<i16>:word16] + 1<16>
	Mem0[es:bx + 20<i16>:word16] = v32
	SZO = cond(v32)
	// succ:  l1825_3A99
l1825_3A99:
	ax = Mem0[ss:bp - 8<i16>:word16]
	SCZO = cond(Mem0[es:bx + 16<i16>:word16] - ax)
	branch Test(UGE,C) l1825_3A30
	// succ:  l1825_3AA2 l1825_3A30
l1825_3AA2:
	ax = Mem0[es:bx + 14<i16>:word16]
	SCZO = cond(Mem0[es:bx + 18<i16>:word16] - ax)
	branch Test(ULE,CZ) l1825_3AB2
	// succ:  l1825_3AAC l1825_3AB2
l1825_3AAC:
	ax = 1<16>
	goto l1825_3AB4
	// succ:  l1825_3AB4
l1825_3AB2:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l1825_3AB4
l1825_3AB4:
	Mem0[es:bx + 6<i16>:word16] = ax
	ax = Mem0[ss:bp - 6<i16>:word16]
	SCZO = cond(Mem0[es:bx + 28<i16>:word16] - ax)
	branch Test(UGE,C) l1825_3AD0
	// succ:  l1825_3AC1 l1825_3AD0
l1825_3AC1:
	ax = Mem0[ss:bp - 8<i16>:word16]
	SCZO = cond(Mem0[es:bx + 16<i16>:word16] - ax)
	branch Test(ULT,C) l1825_3AD0
	// succ:  l1825_3ACA l1825_3AD0
l1825_3ACA:
	ax = 1<16>
	goto l1825_3AD2
	// succ:  l1825_3AD2
l1825_3AD0:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l1825_3AD2
l1825_3AD2:
	Mem0[es:bx + 8<i16>:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = es
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bx
	ax = 0xD<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v33 = Mem0[ss:bp + 12<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v33
	v34 = Mem0[ss:bp + 10<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v34
	v35 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v35
	v36 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v36
	call fn1825_675E (retsize: 4;)
	es_bx = Mem0[ss:bp + 14<i16>:segptr32]
	Mem0[es:bx:word16] = 0<16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_39DE_exit
fn1825_39DE_exit:


// fn1825_3AF8
// Return size: 4
define fn1825_3AF8
fn1825_3AF8_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l1825_3AF8
l1825_3AF8:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 8<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	Mem0[ss:bp - 8<i16>:word16] = 1<16>
	Mem0[ss:bp - 6<i16>:word16] = 0<16>
	ax = ax - ax
	SCZO = cond(ax)
	Mem0[ss:bp - 2<i16>:word16] = ax
	Mem0[ss:bp - 4<i16>:word16] = ax
	goto l1825_3B35
	// succ:  l1825_3B35
l1825_3B14:
	SCZO = cond(Mem0[ss:bp - 8<i16>:word16] - 0x100<16>)
	branch Test(UGE,C) l1825_3B3D
	// succ:  l1825_3B1B l1825_3B3D
l1825_3B1B:
	bx = Mem0[ss:bp - 8<i16>:word16]
	bx = bx << 1<16>
	SCZO = cond(bx)
	bx = bx << 1<16>
	SCZO = cond(bx)
	es_si = Mem0[ds:0x130A<16>:segptr32]
	ax = Mem0[es:bx + si:word16]
	ax = ax | Mem0[es:(bx + 2<i16>) + si:word16]
	SZ = cond(ax)
	O = false
	C = false
	branch Test(EQ,Z) l1825_3B32
	// succ:  l1825_3B2F l1825_3B32
l1825_3B2F:
	v19 = Mem0[ss:bp - 6<i16>:word16] + 1<16>
	Mem0[ss:bp - 6<i16>:word16] = v19
	SZO = cond(v19)
	// succ:  l1825_3B32
l1825_3B32:
	v21 = Mem0[ss:bp - 8<i16>:word16] + 1<16>
	Mem0[ss:bp - 8<i16>:word16] = v21
	SZO = cond(v21)
	// succ:  l1825_3B35
l1825_3B35:
	ax = Mem0[ss:bp + 6<i16>:word16]
	SCZO = cond(Mem0[ss:bp - 6<i16>:word16] - ax)
	branch Test(ULT,C) l1825_3B14
	// succ:  l1825_3B3D l1825_3B14
l1825_3B3D:
	ax = Mem0[ss:bp + 6<i16>:word16]
	SCZO = cond(Mem0[ss:bp - 6<i16>:word16] - ax)
	branch Test(NE,Z) l1825_3B5E
	// succ:  l1825_3B45 l1825_3B5E
l1825_3B45:
	si = Mem0[ss:bp - 8<i16>:word16]
	si = si << 1<16>
	SCZO = cond(si)
	si = si << 1<16>
	SCZO = cond(si)
	es_bx = Mem0[ds:0x130A<16>:segptr32]
	ax = Mem0[es:bx - 4<i16> + si:word16]
	dx = Mem0[es:bx - 2<i16> + si:word16]
	Mem0[ss:bp - 4<i16>:word16] = ax
	Mem0[ss:bp - 2<i16>:word16] = dx
	// succ:  l1825_3B5E
l1825_3B5E:
	ax = Mem0[ss:bp - 4<i16>:word16]
	dx = Mem0[ss:bp - 2<i16>:word16]
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_3AF8_exit
fn1825_3AF8_exit:


// fn1825_3B6A
// Return size: 4
define fn1825_3B6A
fn1825_3B6A_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l1825_3B6A
l1825_3B6A:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 4<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	Mem0[ss:bp - 2<i16>:word16] = 1<16>
	Mem0[ss:bp - 4<i16>:word16] = 0<16>
	// succ:  l1825_3B7B
l1825_3B7B:
	bx = Mem0[ss:bp - 2<i16>:word16]
	bx = bx << 1<16>
	SCZO = cond(bx)
	bx = bx << 1<16>
	SCZO = cond(bx)
	es_si = Mem0[ds:0x130A<16>:segptr32]
	ax = Mem0[ss:bp + 6<i16>:word16]
	dx = Mem0[ss:bp + 8<i16>:word16]
	SCZO = cond(Mem0[es:bx + si:word16] - ax)
	branch Test(NE,Z) l1825_3B97
	// succ:  l1825_3B91 l1825_3B97
l1825_3B91:
	SCZO = cond(Mem0[es:bx + 2<i16> + si:word16] - dx)
	branch Test(EQ,Z) l1825_3BA4
	// succ:  l1825_3B97 l1825_3BA4
l1825_3B97:
	SCZO = cond(Mem0[ss:bp - 2<i16>:word16] - 0x100<16>)
	branch Test(UGE,C) l1825_3BA4
	// succ:  l1825_3B9E l1825_3BA4
l1825_3B9E:
	v16 = Mem0[ss:bp - 2<i16>:word16] + 1<16>
	Mem0[ss:bp - 2<i16>:word16] = v16
	SZO = cond(v16)
	goto l1825_3B7B
	// succ:  l1825_3B7B
l1825_3BA4:
	bx = Mem0[ss:bp - 2<i16>:word16]
	bx = bx << 1<16>
	SCZO = cond(bx)
	bx = bx << 1<16>
	SCZO = cond(bx)
	es_si = Mem0[ds:0x130A<16>:segptr32]
	ax = Mem0[ss:bp + 6<i16>:word16]
	dx = Mem0[ss:bp + 8<i16>:word16]
	SCZO = cond(Mem0[es:bx + si:word16] - ax)
	branch Test(NE,Z) l1825_3BC6
	// succ:  l1825_3BBA l1825_3BC6
l1825_3BBA:
	SCZO = cond(Mem0[es:bx + 2<i16> + si:word16] - dx)
	branch Test(NE,Z) l1825_3BC6
	// succ:  l1825_3BC0 l1825_3BC6
l1825_3BC0:
	ax = Mem0[ss:bp - 2<i16>:word16]
	Mem0[ss:bp - 4<i16>:word16] = ax
	// succ:  l1825_3BC6
l1825_3BC6:
	ax = Mem0[ss:bp - 4<i16>:word16]
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_3B6A_exit
fn1825_3B6A_exit:


// fn1825_3BCE
// Return size: 4
define fn1825_3BCE
fn1825_3BCE_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l1825_3BCE
l1825_3BCE:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 4<16>
	SCZO = cond(sp)
	ax = Mem0[ss:bp + 6<i16>:word16]
	ax = ax + 2<16>
	SCZO = cond(ax)
	Mem0[ss:bp - 2<i16>:word16] = ax
	ax = Mem0[ss:bp + 8<i16>:word16]
	ax = ax + 2<16>
	SCZO = cond(ax)
	Mem0[ss:bp - 4<i16>:word16] = ax
	ax = 0x57D6<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn2017_01BA (retsize: 4;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	v9 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v9
	v10 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v10
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn2017_03F5 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	es_bx = Mem0[ss:bp + 10<i16>:segptr32]
	ax = Mem0[es:bx + 2<i16>:word16]
	ax = ax | ax
	SZ = cond(ax)
	O = false
	C = false
	branch Test(EQ,Z) l1825_3C3E
	// succ:  l1825_3C2C l1825_3C3E
l1825_3C2C:
	SCZO = cond(ax - 1<16>)
	branch Test(EQ,Z) l1825_3C64
	// succ:  l1825_3C31 l1825_3C64
l1825_3C31:
	SCZO = cond(ax - 2<16>)
	branch Test(EQ,Z) l1825_3C7E
	// succ:  l1825_3C36 l1825_3C7E
l1825_3C36:
	SCZO = cond(ax - 3<16>)
	branch Test(EQ,Z) l1825_3C98
	// succ:  l1825_3C3B l1825_3C98
l1825_3C3B:
	goto l1825_3CB2
	// succ:  l1825_3CB2
l1825_3C3E:
	ax = 0x5820<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn2017_01BA (retsize: 4;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	ax = Mem0[ss:bp - 4<i16>:word16]
	ax = ax + 8<16>
	SCZO = cond(ax)
	// succ:  l1825_3C56
l1825_3C56:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v18 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v18
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	goto l1825_3CB2
	// succ:  l1825_3CB2
l1825_3C64:
	ax = 0x582A<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn2017_01BA (retsize: 4;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	ax = Mem0[ss:bp - 4<i16>:word16]
	ax = ax + 0x1A<16>
	SCZO = cond(ax)
	goto l1825_3C56
	// succ:  l1825_3C56
l1825_3C7E:
	ax = 0x5834<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn2017_01BA (retsize: 4;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	ax = Mem0[ss:bp - 4<i16>:word16]
	ax = ax + 0x2D<16>
	SCZO = cond(ax)
	goto l1825_3C56
	// succ:  l1825_3C56
l1825_3C98:
	ax = 0x583C<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn2017_01BA (retsize: 4;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	ax = Mem0[ss:bp - 4<i16>:word16]
	ax = ax + 0x3E<16>
	SCZO = cond(ax)
	goto l1825_3C56
	// succ:  l1825_3C56
l1825_3CB2:
	call fn1F38_07FA (retsize: 4;)
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn2017_03F5 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	call fn1F38_07E7 (retsize: 4;)
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_3BCE_exit
fn1825_3BCE_exit:


// fn1825_3CDC
// Return size: 4
define fn1825_3CDC
fn1825_3CDC_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l1825_3CDC
l1825_3CDC:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0xC<16>
	SCZO = cond(sp)
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	v10 = Mem0[es:bx + 12<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v10
	call fn1825_3AF8 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 4<i16>:word16] = ax
	Mem0[ss:bp - 2<i16>:word16] = dx
	ax = 0xA24<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v14 = Mem0[ss:bp + 18<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v14
	v15 = Mem0[ss:bp + 20<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v15
	call fn1825_3BCE (retsize: 4;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	v16 = Mem0[ss:bp + 26<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v16
	v17 = Mem0[ss:bp + 24<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v17
	call fn1825_4D78 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	es_bx = Mem0[ss:bp + 28<i16>:segptr32]
	Mem0[es:bx:word16] = 0<16>
	ax = Mem0[es:bx + 2<i16>:word16]
	ax = ax | ax
	SZ = cond(ax)
	O = false
	C = false
	branch Test(EQ,Z) l1825_3D3C
	// succ:  l1825_3D25 l1825_3D3C
l1825_3D25:
	SCZO = cond(ax - 1<16>)
	branch Test(EQ,Z) l1825_3D76
	// succ:  l1825_3D2A l1825_3D76
l1825_3D2A:
	SCZO = cond(ax - 2<16>)
	branch Test(EQ,Z) l1825_3DAC
	// succ:  l1825_3D2F l1825_3DAC
l1825_3D2F:
	SCZO = cond(ax - 3<16>)
	branch Test(NE,Z) l1825_3D37
	// succ:  l1825_3D34 l1825_3D37
l1825_3D34:
	goto l1825_3DE2
	// succ:  l1825_3DE2
l1825_3D37:
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_3CDC_exit
l1825_3D3C:
	ax = Mem0[ss:bp + 16<i16>:word16]
	Mem0[ss:bp - 12<i16>:word16] = ax
	ax = Mem0[ss:bp + 22<i16>:word16]
	ax = ax + 1<16>
	SZO = cond(ax)
	Mem0[ss:bp - 6<i16>:word16] = ax
	ax = Mem0[ss:bp + 16<i16>:word16]
	ax = ax + 0x12<16>
	SCZO = cond(ax)
	Mem0[ss:bp - 10<i16>:word16] = ax
	ax = Mem0[ss:bp - 6<i16>:word16]
	ax = ax + 0x3C<16>
	SCZO = cond(ax)
	Mem0[ss:bp - 8<i16>:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v23 = Mem0[ss:bp - 10<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v23
	v24 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v24
	v25 = Mem0[ss:bp - 12<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v25
	v26 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v26
	v27 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v27
	call fn1825_3EE6 (retsize: 4;)
	// succ:  l1825_3D6F
l1825_3D6F:
	sp = sp + 0xC<16>
	SCZO = cond(sp)
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_3CDC_exit
l1825_3D76:
	ax = Mem0[ss:bp + 16<i16>:word16]
	Mem0[ss:bp - 12<i16>:word16] = ax
	ax = Mem0[ss:bp + 22<i16>:word16]
	ax = ax + 1<16>
	SZO = cond(ax)
	Mem0[ss:bp - 6<i16>:word16] = ax
	ax = Mem0[ss:bp + 16<i16>:word16]
	ax = ax + 0xA<16>
	SCZO = cond(ax)
	Mem0[ss:bp - 10<i16>:word16] = ax
	ax = Mem0[ss:bp - 6<i16>:word16]
	ax = ax + 0x3C<16>
	SCZO = cond(ax)
	Mem0[ss:bp - 8<i16>:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v58 = Mem0[ss:bp - 10<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v58
	v59 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v59
	v60 = Mem0[ss:bp - 12<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v60
	v61 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v61
	v62 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v62
	call fn1825_45B2 (retsize: 4;)
	goto l1825_3D6F
	// succ:  l1825_3D6F
l1825_3DAC:
	ax = Mem0[ss:bp + 16<i16>:word16]
	Mem0[ss:bp - 12<i16>:word16] = ax
	ax = Mem0[ss:bp + 22<i16>:word16]
	ax = ax + 1<16>
	SZO = cond(ax)
	Mem0[ss:bp - 6<i16>:word16] = ax
	ax = Mem0[ss:bp + 16<i16>:word16]
	ax = ax + 0x11<16>
	SCZO = cond(ax)
	Mem0[ss:bp - 10<i16>:word16] = ax
	ax = Mem0[ss:bp - 6<i16>:word16]
	ax = ax + 0x3C<16>
	SCZO = cond(ax)
	Mem0[ss:bp - 8<i16>:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v36 = Mem0[ss:bp - 10<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v36
	v37 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v37
	v38 = Mem0[ss:bp - 12<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v38
	v39 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v39
	v40 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v40
	call fn1825_4770 (retsize: 4;)
	goto l1825_3D6F
	// succ:  l1825_3D6F
l1825_3DE2:
	ax = Mem0[ss:bp + 16<i16>:word16]
	Mem0[ss:bp - 12<i16>:word16] = ax
	ax = Mem0[ss:bp + 22<i16>:word16]
	ax = ax + 1<16>
	SZO = cond(ax)
	Mem0[ss:bp - 6<i16>:word16] = ax
	ax = Mem0[ss:bp + 16<i16>:word16]
	ax = ax + 0x12<16>
	SCZO = cond(ax)
	Mem0[ss:bp - 10<i16>:word16] = ax
	ax = Mem0[ss:bp - 6<i16>:word16]
	ax = ax + 0x26<16>
	SCZO = cond(ax)
	Mem0[ss:bp - 8<i16>:word16] = ax
	es_bx = Mem0[ss:bp + 10<i16>:segptr32]
	ax = Mem0[ss:bp - 12<i16>:word16]
	ax = ax + 2<16>
	SCZO = cond(ax)
	Mem0[es:bx + 26<i16>:word16] = ax
	ax = Mem0[ss:bp - 10<i16>:word16]
	ax = ax - 1<16>
	SZO = cond(ax)
	Mem0[es:bx + 28<i16>:word16] = ax
	ax = Mem0[es:bx + 26<i16>:word16]
	Mem0[es:bx + 24<i16>:word16] = ax
	ax = Mem0[ss:bp - 6<i16>:word16]
	ax = ax + 2<16>
	SCZO = cond(ax)
	Mem0[es:bx + 22<i16>:word16] = ax
	Mem0[es:bx + 30<i16>:word16] = 0x10<16>
	SCZO = cond(Mem0[ss:bp + 14<i16>:word16] - 1<16>)
	branch Test(NE,Z) l1825_3E69
	// succ:  l1825_3E34 l1825_3E69
l1825_3E34:
	ax = 0xA2C<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v28 = Mem0[ss:bp + 22<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v28
	v29 = Mem0[ss:bp + 20<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v29
	v30 = Mem0[ss:bp + 18<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v30
	v31 = Mem0[ss:bp + 16<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v31
	call fn1F38_05DB (retsize: 4;)
	sp = sp + 0xC<16>
	SCZO = cond(sp)
	ax = 0x980<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0xD<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v32 = Mem0[ss:bp + 22<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v32
	v33 = Mem0[ss:bp + 20<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v33
	v34 = Mem0[ss:bp + 18<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v34
	v35 = Mem0[ss:bp + 16<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v35
	call fn1825_675E (retsize: 4;)
	sp = sp + 0xE<16>
	SCZO = cond(sp)
	// succ:  l1825_3E69
l1825_3E69:
	es_bx = Mem0[ss:bp + 10<i16>:segptr32]
	Mem0[es:bx:word16] = 1<16>
	v41 = Mem0[ss:bp + 30<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v41
	v42 = Mem0[ss:bp + 28<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v42
	v43 = Mem0[ss:bp - 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v43
	v44 = Mem0[ss:bp - 10<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v44
	v45 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v45
	v46 = Mem0[ss:bp - 12<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v46
	v47 = Mem0[ss:bp + 14<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v47
	v48 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v48
	v49 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v49
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = es
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bx
	call fn1825_4A02 (retsize: 4;)
	sp = sp + 0x16<16>
	SCZO = cond(sp)
	SCZO = cond(Mem0[ss:bp + 14<i16>:word16] - 1<16>)
	branch Test(NE,Z) l1825_3EE2
	// succ:  l1825_3E9B l1825_3EE2
l1825_3E9B:
	ax = 0xA36<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v50 = Mem0[ss:bp + 22<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v50
	v51 = Mem0[ss:bp + 20<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v51
	v52 = Mem0[ss:bp + 18<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v52
	v53 = Mem0[ss:bp + 16<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v53
	call fn1F38_05DB (retsize: 4;)
	sp = sp + 0xC<16>
	SCZO = cond(sp)
	ax = 0x980<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0xD<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v54 = Mem0[ss:bp + 22<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v54
	v55 = Mem0[ss:bp + 20<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v55
	v56 = Mem0[ss:bp + 18<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v56
	v57 = Mem0[ss:bp + 16<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v57
	call fn1825_675E (retsize: 4;)
	sp = sp + 0xE<16>
	SCZO = cond(sp)
	es_bx = Mem0[ss:bp + 10<i16>:segptr32]
	SCZO = cond(Mem0[es:bx + 10<i16>:word16] - 7<16>)
	branch Test(NE,Z) l1825_3EE2
	// succ:  l1825_3EDA l1825_3EE2
l1825_3EDA:
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	Mem0[es:bx:word16] = 1<16>
	// succ:  l1825_3EE2
l1825_3EE2:
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_3CDC_exit
fn1825_3CDC_exit:


// fn1825_3EE6
// Return size: 4
define fn1825_3EE6
fn1825_3EE6_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l1825_3EE6
l1825_3EE6:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 6<16>
	SCZO = cond(sp)
	ax = Mem0[ss:bp + 10<i16>:word16]
	ax = ax + 1<16>
	SZO = cond(ax)
	Mem0[ss:bp - 2<i16>:word16] = ax
	ax = Mem0[ss:bp + 12<i16>:word16]
	ax = ax + 2<16>
	SCZO = cond(ax)
	Mem0[ss:bp - 4<i16>:word16] = ax
	ax = 0xA5E<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v10 = Mem0[ss:bp + 16<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v10
	v11 = Mem0[ss:bp + 14<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v11
	v12 = Mem0[ss:bp + 12<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v12
	v13 = Mem0[ss:bp + 10<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v13
	call fn1F38_05DB (retsize: 4;)
	sp = sp + 0xC<16>
	SCZO = cond(sp)
	ax = 0xA2C<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v14 = Mem0[ss:bp + 16<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v14
	v15 = Mem0[ss:bp + 14<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v15
	v16 = Mem0[ss:bp + 12<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v16
	v17 = Mem0[ss:bp + 10<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v17
	call fn1F38_05DB (retsize: 4;)
	sp = sp + 0xC<16>
	SCZO = cond(sp)
	v18 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v18
	v19 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v19
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = 9<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x5846<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	ax = Mem0[ss:bp - 4<i16>:word16]
	ax = ax + 0xB<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v20 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v20
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = 3<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v21 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v21
	v22 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v22
	call fn1825_3B6A (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1825_63F8 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	es_bx = Mem0[es:bx + 62<i16>:segptr32]
	ax = Mem0[ds:0x12FC<16>:word16]
	SCZO = cond(Mem0[es:bx + 8<i16>:word16] - ax)
	branch Test(NE,Z) l1825_3F8E
	// succ:  l1825_3F88 l1825_3F8E
l1825_3F88:
	ax = 0x5850<16>
	goto l1825_3F91
	// succ:  l1825_3F91
l1825_3F8E:
	ax = 0x585A<16>
	// succ:  l1825_3F91
l1825_3F91:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn2017_01BA (retsize: 4;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn2017_03F5 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 6<i16>:word16] = ax
	ax = Mem0[ss:bp - 4<i16>:word16]
	ax = ax + 0x12<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v27 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v27
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	v28 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v28
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	call fn1F38_0517 (retsize: 4;)
	ah = ah - ah
	SCZO = cond(ah)
	ax = ax + 4<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v30 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v30
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = 0xB<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x5866<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	call fn1F38_0517 (retsize: 4;)
	ah = ah - ah
	SCZO = cond(ah)
	ax = ax + 2<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v31 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v31
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 6<i16>:word16] = 2<16>
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	SCZO = cond(Mem0[es:bx + 2<i16>:byte] - 0xA<8>)
	branch Test(UGE,C) l1825_4034
	// succ:  l1825_401E l1825_4034
l1825_401E:
	ax = 1<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x5872<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 6<i16>:word16] = 1<16>
	// succ:  l1825_4034
l1825_4034:
	v33 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v33
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	al = Mem0[es:bx + 2<i16>:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1825_63F8 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = 1<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x5874<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 6<i16>:word16] = 2<16>
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	SCZO = cond(Mem0[es:bx + 3<i16>:byte] - 0xA<8>)
	branch Test(UGE,C) l1825_407E
	// succ:  l1825_4068 l1825_407E
l1825_4068:
	ax = 1<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x5876<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 6<i16>:word16] = 1<16>
	// succ:  l1825_407E
l1825_407E:
	v35 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v35
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	al = Mem0[es:bx + 3<i16>:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1825_63F8 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = 1<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x5878<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	ax = 4<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	al = Mem0[es:bx + 1<i16>:byte]
	ah = ah - ah
	SCZO = cond(ah)
	ax = ax + 0x76C<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1825_63F8 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	v36 = Mem0[ss:bp - 2<i16>:word16] + 1<16>
	Mem0[ss:bp - 2<i16>:word16] = v36
	SZO = cond(v36)
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	SCZO = cond(Mem0[es:bx + 58<i16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_40CE
	// succ:  l1825_40C8 l1825_40CE
l1825_40C8:
	ax = 0x587A<16>
	goto l1825_40D1
	// succ:  l1825_40D1
l1825_40CE:
	ax = 0x5882<16>
	// succ:  l1825_40D1
l1825_40D1:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn2017_01BA (retsize: 4;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn2017_03F5 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 6<i16>:word16] = ax
	v37 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v37
	v38 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v38
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	v39 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v39
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	SCZO = cond(Mem0[es:bx + 78<i16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_411E
	// succ:  l1825_4118 l1825_411E
l1825_4118:
	ax = 0x588C<16>
	goto l1825_4121
	// succ:  l1825_4121
l1825_411E:
	ax = 0x5898<16>
	// succ:  l1825_4121
l1825_4121:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn2017_01BA (retsize: 4;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn2017_03F5 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 6<i16>:word16] = ax
	call fn1F38_0517 (retsize: 4;)
	ah = ah - ah
	SCZO = cond(ah)
	ax = ax + 4<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v40 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v40
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	v41 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v41
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	v42 = Mem0[ss:bp - 2<i16>:word16] + 1<16>
	Mem0[ss:bp - 2<i16>:word16] = v42
	SZO = cond(v42)
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	SCZO = cond(Mem0[es:bx + 0xB0<16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_417A
	// succ:  l1825_4174 l1825_417A
l1825_4174:
	ax = 0x58A6<16>
	goto l1825_417D
	// succ:  l1825_417D
l1825_417A:
	ax = 0x58B2<16>
	// succ:  l1825_417D
l1825_417D:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn2017_01BA (retsize: 4;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn2017_03F5 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 6<i16>:word16] = ax
	v43 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v43
	v44 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v44
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	v45 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v45
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	v46 = Mem0[ss:bp - 2<i16>:word16] + 1<16>
	Mem0[ss:bp - 2<i16>:word16] = v46
	SZO = cond(v46)
	ax = 0x58BC<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn2017_01BA (retsize: 4;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn2017_03F5 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 6<i16>:word16] = ax
	v47 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v47
	v48 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v48
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	v49 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v49
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	SCZO = cond(Mem0[es:bx + 0xB0<16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_4262
	// succ:  l1825_4208 l1825_4262
l1825_4208:
	v50 = Mem0[es:bx + 0xB4<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v50
	v51 = Mem0[es:bx + 0xB2<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v51
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn2017_01BA (retsize: 4;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn2017_03F5 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 6<i16>:word16] = ax
	ax = ax - 0x25<16>
	SCZO = cond(ax)
	cx = cx - cx - C
	SCZO = cond(cx)
	ax = ax & cx
	SZ = cond(ax)
	O = false
	C = false
	ax = ax + 0x25<16>
	SCZO = cond(ax)
	Mem0[ss:bp - 6<i16>:word16] = ax
	call fn1F38_0517 (retsize: 4;)
	ah = ah - ah
	SCZO = cond(ah)
	ax = ax + 2<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v55 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v55
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	v56 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v56
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	// succ:  l1825_4262
l1825_4262:
	v57 = Mem0[ss:bp - 2<i16>:word16] + 2<16>
	Mem0[ss:bp - 2<i16>:word16] = v57
	SCZO = cond(v57)
	v58 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v58
	v59 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v59
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = 0x1E<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x58CE<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	Mem0[ds:0xA68<16>:byte] = 0<8>
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0xA<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	v60 = Mem0[es:bx + 46<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v60
	v61 = Mem0[es:bx + 44<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v61
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn3CEE_0EFC (retsize: 4;)
	sp = sp + 0xC<16>
	SCZO = cond(sp)
	ax = Mem0[ss:bp - 4<i16>:word16]
	ax = ax + 0xE<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v62 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v62
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = 0xA<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	ax = Mem0[ss:bp - 4<i16>:word16]
	ax = ax + 0x1D<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v63 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v63
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = 6<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	v64 = Mem0[es:bx + 32<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v64
	call fn1825_63F8 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	v65 = Mem0[ss:bp - 2<i16>:word16] + 1<16>
	Mem0[ss:bp - 2<i16>:word16] = v65
	SZO = cond(v65)
	v66 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v66
	v67 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v67
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = 0xD<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x58EE<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	Mem0[ds:0xA68<16>:byte] = 0<8>
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0xA<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	v68 = Mem0[es:bx + 42<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v68
	v69 = Mem0[es:bx + 40<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v69
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn3CEE_0EFC (retsize: 4;)
	sp = sp + 0xC<16>
	SCZO = cond(sp)
	ax = Mem0[ss:bp - 4<i16>:word16]
	ax = ax + 0xF<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v70 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v70
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = 0xA<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	Mem0[ds:0xA68<16>:byte] = 0<8>
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	ax = Mem0[es:bx + 44<i16>:word16]
	ax = ax | Mem0[es:bx + 46<i16>:word16]
	SZ = cond(ax)
	O = false
	C = false
	branch Test(NE,Z) l1825_4370
	// succ:  l1825_436B l1825_4370
l1825_436B:
	ax = 0x58FC<16>
	goto l1825_4386
	// succ:  l1825_4386
l1825_4370:
	SCZO = cond(Mem0[es:bx + 74<i16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_437C
	// succ:  l1825_4377 l1825_437C
l1825_4377:
	ax = 0x5908<16>
	goto l1825_4386
	// succ:  l1825_4386
l1825_437C:
	SCZO = cond(Mem0[es:bx + 72<i16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_4395
	// succ:  l1825_4383 l1825_4395
l1825_4383:
	ax = 0x591A<16>
	// succ:  l1825_4386
l1825_4386:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn2017_01BA (retsize: 4;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	// succ:  l1825_4395
l1825_4395:
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn2017_03F5 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 6<i16>:word16] = ax
	ax = Mem0[ss:bp - 4<i16>:word16]
	ax = ax + 0x17<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v71 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v71
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	v72 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v72
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	v73 = Mem0[ss:bp - 2<i16>:word16] + 1<16>
	Mem0[ss:bp - 2<i16>:word16] = v73
	SZO = cond(v73)
	Mem0[ds:0xA68<16>:byte] = 0<8>
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	ax = Mem0[es:bx + 80<i16>:word16]
	ax = ax | Mem0[es:bx + 82<i16>:word16]
	SZ = cond(ax)
	O = false
	C = false
	branch Test(EQ,Z) l1825_43E2
	// succ:  l1825_43DC l1825_43E2
l1825_43DC:
	ax = 0x5926<16>
	goto l1825_43E5
	// succ:  l1825_43E5
l1825_43E2:
	ax = 0x5934<16>
	// succ:  l1825_43E5
l1825_43E5:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn2017_01BA (retsize: 4;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn2017_03F5 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 6<i16>:word16] = ax
	v74 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v74
	v75 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v75
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	v76 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v76
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	v77 = Mem0[ss:bp - 2<i16>:word16] + 1<16>
	Mem0[ss:bp - 2<i16>:word16] = v77
	SZO = cond(v77)
	Mem0[ds:0xA68<16>:byte] = 0<8>
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	SCZO = cond(Mem0[es:bx + 70<i16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_443A
	// succ:  l1825_4434 l1825_443A
l1825_4434:
	ax = 0x5944<16>
	goto l1825_443D
	// succ:  l1825_443D
l1825_443A:
	ax = 0x594C<16>
	// succ:  l1825_443D
l1825_443D:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn2017_01BA (retsize: 4;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn2017_03F5 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 6<i16>:word16] = ax
	v78 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v78
	v79 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v79
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	v80 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v80
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	v81 = Mem0[ss:bp - 2<i16>:word16] + 2<16>
	Mem0[ss:bp - 2<i16>:word16] = v81
	SCZO = cond(v81)
	Mem0[ds:0xA68<16>:byte] = 0<8>
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	SCZO = cond(Mem0[es:bx + 0xBA<16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_4494
	// succ:  l1825_448E l1825_4494
l1825_448E:
	ax = 0x5956<16>
	goto l1825_4497
	// succ:  l1825_4497
l1825_4494:
	ax = 0x5966<16>
	// succ:  l1825_4497
l1825_4497:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn2017_01BA (retsize: 4;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn2017_03F5 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 6<i16>:word16] = ax
	v82 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v82
	v83 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v83
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	v84 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v84
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	call fn1F38_0517 (retsize: 4;)
	ah = ah - ah
	SCZO = cond(ah)
	ax = ax + 2<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v85 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v85
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	SCZO = cond(Mem0[es:bx + 0xBA<16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_4505
	// succ:  l1825_44F5 l1825_4505
l1825_44F5:
	ax = 1<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v86 = Mem0[es:bx + 0xBA<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v86
	call fn1825_63F8 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	// succ:  l1825_4505
l1825_4505:
	v87 = Mem0[ss:bp - 2<i16>:word16] + 1<16>
	Mem0[ss:bp - 2<i16>:word16] = v87
	SZO = cond(v87)
	Mem0[ds:0xA68<16>:byte] = 0<8>
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	SCZO = cond(Mem0[es:bx + 100<i16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_451C
	// succ:  l1825_4517 l1825_451C
l1825_4517:
	ax = 0x5978<16>
	goto l1825_451F
	// succ:  l1825_451F
l1825_451C:
	ax = 0x5990<16>
	// succ:  l1825_451F
l1825_451F:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn2017_01BA (retsize: 4;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn2017_03F5 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 6<i16>:word16] = ax
	v88 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v88
	v89 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v89
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	v90 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v90
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	SCZO = cond(Mem0[es:bx + 100<i16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_45AE
	// succ:  l1825_4566 l1825_45AE
l1825_4566:
	ax = Mem0[ss:bp - 4<i16>:word16]
	ax = ax + 0xD<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v91 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v91
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = 2<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	v92 = Mem0[es:bx + 100<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v92
	call fn1825_63F8 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = Mem0[ss:bp - 4<i16>:word16]
	ax = ax + 0x19<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v93 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v93
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = 2<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	v94 = Mem0[es:bx + 98<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v94
	call fn1825_63F8 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	// succ:  l1825_45AE
l1825_45AE:
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_3EE6_exit
fn1825_3EE6_exit:


// fn1825_45B2
// Return size: 4
define fn1825_45B2
fn1825_45B2_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l1825_45B2
l1825_45B2:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 6<16>
	SCZO = cond(sp)
	ax = 0xA5E<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v9 = Mem0[ss:bp + 16<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v9
	v10 = Mem0[ss:bp + 14<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v10
	v11 = Mem0[ss:bp + 12<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v11
	v12 = Mem0[ss:bp + 10<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v12
	call fn1F38_05DB (retsize: 4;)
	sp = sp + 0xC<16>
	SCZO = cond(sp)
	ax = 0xA2C<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v13 = Mem0[ss:bp + 16<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v13
	v14 = Mem0[ss:bp + 14<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v14
	v15 = Mem0[ss:bp + 12<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v15
	v16 = Mem0[ss:bp + 10<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v16
	call fn1F38_05DB (retsize: 4;)
	sp = sp + 0xC<16>
	SCZO = cond(sp)
	ax = Mem0[ss:bp + 10<i16>:word16]
	ax = ax + 2<16>
	SCZO = cond(ax)
	Mem0[ss:bp - 2<i16>:word16] = ax
	ax = Mem0[ss:bp + 12<i16>:word16]
	ax = ax + 2<16>
	SCZO = cond(ax)
	Mem0[ss:bp - 6<i16>:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 2<i16>:word16]
	ax = ax - 1<16>
	SZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = 0x20<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x59A0<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 4<i16>:word16] = 0<16>
	goto l1825_4646
	// succ:  l1825_4646
l1825_4622:
	v22 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v22
	v23 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v23
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	v24 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v24
	v25 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v25
	v26 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v26
	call fn1825_4658 (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	v27 = Mem0[ss:bp - 4<i16>:word16] + 1<16>
	Mem0[ss:bp - 4<i16>:word16] = v27
	SZO = cond(v27)
	v28 = Mem0[ss:bp - 2<i16>:word16] + 1<16>
	Mem0[ss:bp - 2<i16>:word16] = v28
	SZO = cond(v28)
	// succ:  l1825_4646
l1825_4646:
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	ax = Mem0[ss:bp - 4<i16>:word16]
	SCZO = cond(Mem0[es:bx + 0xBA<16>:word16] - ax)
	branch Test(UGT,CZ) l1825_4622
	// succ:  l1825_4653 l1825_4622
l1825_4653:
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_45B2_exit
fn1825_45B2_exit:


// fn1825_4658
// Return size: 4
define fn1825_4658
fn1825_4658_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l1825_4658
l1825_4658:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 8<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	call fn1F38_0517 (retsize: 4;)
	ah = ah - ah
	SCZO = cond(ah)
	Mem0[ss:bp - 2<i16>:word16] = ax
	ax = Mem0[ss:bp + 10<i16>:word16]
	cx = ax
	ax = ax << 1<16>
	SCZO = cond(ax)
	ax = ax << 1<16>
	SCZO = cond(ax)
	ax = ax + cx
	SCZO = cond(ax)
	ax = ax << 1<16>
	SCZO = cond(ax)
	ax = ax + Mem0[ss:bp + 6<i16>:word16]
	SCZO = cond(ax)
	dx = Mem0[ss:bp + 8<i16>:word16]
	Mem0[ss:bp - 8<i16>:word16] = ax
	Mem0[ss:bp - 6<i16>:word16] = dx
	es_bx = Mem0[ss:bp - 8<i16>:segptr32]
	bx = Mem0[es:bx + 0xBE<16>:word16]
	bx = bx << 1<16>
	SCZO = cond(bx)
	bx = bx << 1<16>
	SCZO = cond(bx)
	es_si = Mem0[ds:0x130A<16>:segptr32]
	es_bx = Mem0[ds:bx + 0<16> + si:segptr32]
	es_bx = Mem0[es:bx + 62<i16>:segptr32]
	v17 = Mem0[es:bx + 12<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v17
	v18 = Mem0[es:bx + 10<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v18
	call fn2017_03F5 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 4<i16>:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	es_bx = Mem0[ss:bp - 8<i16>:segptr32]
	bx = Mem0[es:bx + 0xBE<16>:word16]
	bx = bx << 1<16>
	SCZO = cond(bx)
	bx = bx << 1<16>
	SCZO = cond(bx)
	es_si = Mem0[ds:0x130A<16>:segptr32]
	es_bx = Mem0[ds:bx + 0<16> + si:segptr32]
	es_bx = Mem0[es:bx + 62<i16>:segptr32]
	v19 = Mem0[es:bx + 12<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v19
	v20 = Mem0[es:bx + 10<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v20
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn2017_02EC (retsize: 4;)
	sp = sp + 0xA<16>
	SCZO = cond(sp)
	v21 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v21
	call fn1F38_0517 (retsize: 4;)
	al = ah
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	v23 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v23
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	es_bx = Mem0[ss:bp - 8<i16>:segptr32]
	v24 = Mem0[es:bx + 0xC2<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v24
	v25 = Mem0[es:bx + 0xC0<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v25
	call fn2017_03F5 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 4<i16>:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	es_bx = Mem0[ss:bp - 8<i16>:segptr32]
	v26 = Mem0[es:bx + 0xC2<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v26
	v27 = Mem0[es:bx + 0xC0<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v27
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn2017_02EC (retsize: 4;)
	sp = sp + 0xA<16>
	SCZO = cond(sp)
	ax = Mem0[ss:bp - 4<i16>:word16]
	ax = ax - 0x28<16>
	SCZO = cond(ax)
	cx = cx - cx - C
	SCZO = cond(cx)
	ax = ax & cx
	SZ = cond(ax)
	O = false
	C = false
	ax = ax + 0x28<16>
	SCZO = cond(ax)
	Mem0[ss:bp - 4<i16>:word16] = ax
	ax = Mem0[ss:bp - 2<i16>:word16]
	ax = ax + 0xD<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_0517 (retsize: 4;)
	al = ah
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	v31 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v31
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_4658_exit
fn1825_4658_exit:


// fn1825_4770
// Return size: 4
define fn1825_4770
fn1825_4770_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l1825_4770
l1825_4770:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 6<16>
	SCZO = cond(sp)
	ax = 0xA5E<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v9 = Mem0[ss:bp + 16<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v9
	v10 = Mem0[ss:bp + 14<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v10
	v11 = Mem0[ss:bp + 12<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v11
	v12 = Mem0[ss:bp + 10<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v12
	call fn1F38_05DB (retsize: 4;)
	sp = sp + 0xC<16>
	SCZO = cond(sp)
	ax = 0xA2C<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v13 = Mem0[ss:bp + 16<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v13
	v14 = Mem0[ss:bp + 14<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v14
	v15 = Mem0[ss:bp + 12<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v15
	v16 = Mem0[ss:bp + 10<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v16
	call fn1F38_05DB (retsize: 4;)
	sp = sp + 0xC<16>
	SCZO = cond(sp)
	ax = Mem0[ss:bp + 10<i16>:word16]
	ax = ax + 2<16>
	SCZO = cond(ax)
	Mem0[ss:bp - 2<i16>:word16] = ax
	ax = Mem0[ss:bp + 12<i16>:word16]
	ax = ax + 2<16>
	SCZO = cond(ax)
	Mem0[ss:bp - 6<i16>:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 2<i16>:word16]
	ax = ax - 1<16>
	SZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = 0x16<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x59C2<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 4<i16>:word16] = 1<16>
	goto l1825_4804
	// succ:  l1825_4804
l1825_47E0:
	v22 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v22
	v23 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v23
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	v24 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v24
	v25 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v25
	v26 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v26
	call fn1825_4814 (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	v27 = Mem0[ss:bp - 4<i16>:word16] + 1<16>
	Mem0[ss:bp - 4<i16>:word16] = v27
	SZO = cond(v27)
	v28 = Mem0[ss:bp - 2<i16>:word16] + 1<16>
	Mem0[ss:bp - 2<i16>:word16] = v28
	SZO = cond(v28)
	// succ:  l1825_4804
l1825_4804:
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	ax = Mem0[ss:bp - 4<i16>:word16]
	SCZO = cond(Mem0[es:bx + 100<i16>:word16] - ax)
	branch Test(UGE,C) l1825_47E0
	// succ:  l1825_4810 l1825_47E0
l1825_4810:
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_4770_exit
fn1825_4770_exit:


// fn1825_4814
// Return size: 4
define fn1825_4814
fn1825_4814_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l1825_4814
l1825_4814:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 4<16>
	SCZO = cond(sp)
	call fn1F38_0517 (retsize: 4;)
	ah = ah - ah
	SCZO = cond(ah)
	Mem0[ss:bp - 2<i16>:word16] = ax
	ax = ax + 3<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_0517 (retsize: 4;)
	al = ah
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = 2<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v10 = Mem0[ss:bp + 10<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v10
	call fn1825_63F8 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = 4<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x59DA<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v12 = Mem0[ds:0x14A0<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v12
	v13 = Mem0[ds:0x149E<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v13
	call fn2017_0335 (retsize: 4;)
	sp = sp + 0xA<16>
	SCZO = cond(sp)
	ax = ax | ax
	SZ = cond(ax)
	O = false
	C = false
	branch Test(NE,Z) l1825_4874
	// succ:  l1825_4865 l1825_4874
l1825_4865:
	v18 = Mem0[ss:bp + 10<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v18
	v19 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v19
	v20 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v20
	call fn1825_496A (retsize: 4;)
	goto l1825_4881
	// succ:  l1825_4881
l1825_4874:
	v21 = Mem0[ss:bp + 10<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v21
	v22 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v22
	v23 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v23
	call fn1825_48D2 (retsize: 4;)
	// succ:  l1825_4881
l1825_4881:
	sp = sp + 6<16>
	SCZO = cond(sp)
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1825_6168 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 4<i16>:word16] = ax
	call fn2368_033C (retsize: 4;)
	ax = Mem0[ss:bp - 4<i16>:word16]
	ax = ax - 0x37<16>
	SCZO = cond(ax)
	cx = cx - cx - C
	SCZO = cond(cx)
	ax = ax & cx
	SZ = cond(ax)
	O = false
	C = false
	ax = ax + 0x37<16>
	SCZO = cond(ax)
	Mem0[ss:bp - 4<i16>:word16] = ax
	ax = Mem0[ss:bp - 2<i16>:word16]
	ax = ax + 8<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_0517 (retsize: 4;)
	al = ah
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	v25 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v25
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_049F (retsize: 4;)
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_4814_exit
fn1825_4814_exit:


// fn1825_48D2
// Return size: 4
define fn1825_48D2
fn1825_48D2_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l1825_48D2
l1825_48D2:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0xA<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	si = Mem0[ss:bp + 10<i16>:word16]
	si = si << 1<16>
	SCZO = cond(si)
	si = si << 1<16>
	SCZO = cond(si)
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	ax = Mem0[es:bx + 102<i16> + si:word16]
	dx = Mem0[es:bx + 104<i16> + si:word16]
	Mem0[ss:bp - 8<i16>:word16] = ax
	Mem0[ss:bp - 6<i16>:word16] = dx
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	es_bx = Mem0[ss:bp - 8<i16>:segptr32]
	v13 = Mem0[es:bx:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v13
	call fn2E37_04CE (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 4<i16>:word16] = ax
	Mem0[ss:bp - 2<i16>:word16] = dx
	SCZO = cond(Mem0[ds:0x1484<16>:word16] - 0<16>)
	branch Test(NE,Z) l1825_4954
	// succ:  l1825_4910 l1825_4954
l1825_4910:
	ax = ax + 0x18<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn2017_03F5 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 10<i16>:word16] = ax
	v16 = Mem0[ds:0x1296<16>:word16] + 0x10<16>
	Mem0[ds:0x1296<16>:word16] = v16
	SCZO = cond(v16)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 4<i16>:word16]
	dx = Mem0[ss:bp - 2<i16>:word16]
	ax = ax + 0x18<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v17 = Mem0[ss:bp - 10<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v17
	v18 = Mem0[ds:0x1298<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v18
	v19 = Mem0[ds:0x1296<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v19
	call fn2368_00D4 (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn2017_02EC (retsize: 4;)
	sp = sp + 0xA<16>
	SCZO = cond(sp)
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_48D2_exit
l1825_4954:
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x59E0<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn2368_0272 (retsize: 4;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_48D2_exit
fn1825_48D2_exit:


// fn1825_496A
// Return size: 4
define fn1825_496A
fn1825_496A_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l1825_496A
l1825_496A:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0xA<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	si = Mem0[ss:bp + 10<i16>:word16]
	si = si << 1<16>
	SCZO = cond(si)
	si = si << 1<16>
	SCZO = cond(si)
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	ax = Mem0[es:bx + 102<i16> + si:word16]
	dx = Mem0[es:bx + 104<i16> + si:word16]
	Mem0[ss:bp - 8<i16>:word16] = ax
	Mem0[ss:bp - 6<i16>:word16] = dx
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	es_bx = Mem0[ss:bp - 8<i16>:segptr32]
	v13 = Mem0[es:bx:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v13
	call fn2E37_04CE (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 4<i16>:word16] = ax
	Mem0[ss:bp - 2<i16>:word16] = dx
	SCZO = cond(Mem0[ds:0x1484<16>:word16] - 0<16>)
	branch Test(NE,Z) l1825_49EC
	// succ:  l1825_49A8 l1825_49EC
l1825_49A8:
	ax = ax + 0x16<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn2017_03F5 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 10<i16>:word16] = ax
	v16 = Mem0[ds:0x1296<16>:word16] + 0x10<16>
	Mem0[ds:0x1296<16>:word16] = v16
	SCZO = cond(v16)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 4<i16>:word16]
	dx = Mem0[ss:bp - 2<i16>:word16]
	ax = ax + 0x16<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v17 = Mem0[ss:bp - 10<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v17
	v18 = Mem0[ds:0x1298<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v18
	v19 = Mem0[ds:0x1296<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v19
	call fn2368_00D4 (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn2017_02EC (retsize: 4;)
	sp = sp + 0xA<16>
	SCZO = cond(sp)
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_496A_exit
l1825_49EC:
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x59E2<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn2368_0272 (retsize: 4;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_496A_exit
fn1825_496A_exit:


// fn1825_4A02
// Return size: 4
define fn1825_4A02
fn1825_4A02_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l1825_4A02
l1825_4A02:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2<16>
	SCZO = cond(sp)
	es_bx = Mem0[ss:bp + 10<i16>:segptr32]
	ax = Mem0[es:bx + 0xA6<16>:word16]
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	Mem0[es:bx + 16<i16>:word16] = ax
	Mem0[ss:bp - 2<i16>:word16] = 0<16>
	// succ:  l1825_4A1C
l1825_4A1C:
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	SCZO = cond(Mem0[es:bx:word16] - 0<16>)
	branch Test(NE,Z) l1825_4A2F
	// succ:  l1825_4A25 l1825_4A2F
l1825_4A25:
	SCZO = cond(Mem0[es:bx + 2<i16>:word16] - 0<16>)
	branch Test(NE,Z) l1825_4A2F
	// succ:  l1825_4A2C l1825_4A2F
l1825_4A2C:
	goto l1825_4AB7
	// succ:  l1825_4AB7
l1825_4A2F:
	ax = 0xA5E<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v13 = Mem0[ss:bp + 22<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v13
	v14 = Mem0[ss:bp + 20<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v14
	v15 = Mem0[ss:bp + 18<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v15
	v16 = Mem0[ss:bp + 16<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v16
	call fn1F38_05DB (retsize: 4;)
	sp = sp + 0xC<16>
	SCZO = cond(sp)
	SCZO = cond(Mem0[ss:bp + 14<i16>:word16] - 1<16>)
	branch Test(NE,Z) l1825_4A54
	// succ:  l1825_4A4E l1825_4A54
l1825_4A4E:
	ax = 0xA36<16>
	goto l1825_4A57
	// succ:  l1825_4A57
l1825_4A54:
	ax = 0xA2C<16>
	// succ:  l1825_4A57
l1825_4A57:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v17 = Mem0[ss:bp + 22<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v17
	v18 = Mem0[ss:bp + 20<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v18
	v19 = Mem0[ss:bp + 18<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v19
	v20 = Mem0[ss:bp + 16<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v20
	call fn1F38_05DB (retsize: 4;)
	sp = sp + 0xC<16>
	SCZO = cond(sp)
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	v21 = Mem0[es:bx + 22<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v21
	ax = Mem0[ss:bp + 16<i16>:word16]
	ax = ax + 1<16>
	SZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = 0x22<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x59E4<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	SCZO = cond(Mem0[es:bx + 16<i16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_4AB7
	// succ:  l1825_4A9C l1825_4AB7
l1825_4A9C:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = es
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bx
	v23 = Mem0[ss:bp + 12<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v23
	v24 = Mem0[ss:bp + 10<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v24
	v25 = Mem0[ss:bp + 22<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v25
	v26 = Mem0[ss:bp + 20<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v26
	v27 = Mem0[ss:bp + 18<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v27
	v28 = Mem0[ss:bp + 16<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v28
	call fn1825_4B48 (retsize: 4;)
	sp = sp + 0x10<16>
	SCZO = cond(sp)
	// succ:  l1825_4AB7
l1825_4AB7:
	SCZO = cond(Mem0[ss:bp + 14<i16>:word16] - 1<16>)
	branch Test(NE,Z) l1825_4B02
	// succ:  l1825_4ABD l1825_4B02
l1825_4ABD:
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	Mem0[es:bx + 2<i16>:word16] = 0<16>
	ax = 1<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = es
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bx
	call fn1825_67EE (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	SCZO = cond(Mem0[es:bx + 4<i16>:word16] - 0<16>)
	branch Test(NE,Z) l1825_4AF5
	// succ:  l1825_4ADD l1825_4AF5
l1825_4ADD:
	SCZO = cond(Mem0[es:bx + 10<i16>:word16] - 0xBB8<16>)
	branch Test(EQ,Z) l1825_4AF5
	// succ:  l1825_4AE5 l1825_4AF5
l1825_4AE5:
	SCZO = cond(Mem0[es:bx + 10<i16>:word16] - 7<16>)
	branch Test(EQ,Z) l1825_4AF5
	// succ:  l1825_4AEC l1825_4AF5
l1825_4AEC:
	es_bx = Mem0[ss:bp + 24<i16>:segptr32]
	SCZO = cond(Mem0[es:bx:word16] - 0<16>)
	branch Test(EQ,Z) l1825_4AFA
	// succ:  l1825_4AF5 l1825_4AFA
l1825_4AF5:
	ax = 1<16>
	goto l1825_4AFC
	// succ:  l1825_4AFC
l1825_4AFA:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l1825_4AFC
l1825_4AFC:
	Mem0[ss:bp - 2<i16>:word16] = ax
	goto l1825_4B07
	// succ:  l1825_4B07
l1825_4B02:
	Mem0[ss:bp - 2<i16>:word16] = 1<16>
	// succ:  l1825_4B07
l1825_4B07:
	SCZO = cond(Mem0[ss:bp - 2<i16>:word16] - 0<16>)
	branch Test(NE,Z) l1825_4B10
	// succ:  l1825_4B0D l1825_4B10
l1825_4B0D:
	goto l1825_4A1C
	// succ:  l1825_4A1C
l1825_4B10:
	ax = 0xA2C<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v29 = Mem0[ss:bp + 22<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v29
	v30 = Mem0[ss:bp + 20<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v30
	v31 = Mem0[ss:bp + 18<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v31
	v32 = Mem0[ss:bp + 16<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v32
	call fn1F38_05DB (retsize: 4;)
	sp = sp + 0xC<16>
	SCZO = cond(sp)
	v33 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v33
	v34 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v34
	ax = 0x26<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v35 = Mem0[ss:bp + 22<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v35
	v36 = Mem0[ss:bp + 20<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v36
	v37 = Mem0[ss:bp + 18<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v37
	v38 = Mem0[ss:bp + 16<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v38
	call fn1825_675E (retsize: 4;)
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_4A02_exit
fn1825_4A02_exit:


// fn1825_4B48
// Return size: 4
define fn1825_4B48
fn1825_4B48_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l1825_4B48
l1825_4B48:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 4<16>
	SCZO = cond(sp)
	es_bx = Mem0[ss:bp + 18<i16>:segptr32]
	ax = Mem0[es:bx + 18<i16>:word16]
	Mem0[ss:bp - 4<i16>:word16] = ax
	ax = Mem0[es:bx + 26<i16>:word16]
	Mem0[ss:bp - 2<i16>:word16] = ax
	Mem0[es:bx + 20<i16>:word16] = 0<16>
	goto l1825_4B9B
	// succ:  l1825_4B9B
l1825_4B68:
	ax = Mem0[ss:bp - 2<i16>:word16]
	SCZO = cond(Mem0[es:bx + 28<i16>:word16] - ax)
	branch Test(ULT,C) l1825_4BA4
	// succ:  l1825_4B71 l1825_4BA4
l1825_4B71:
	v13 = Mem0[es:bx + 22<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v13
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	v14 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v14
	v15 = Mem0[ss:bp + 16<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v15
	v16 = Mem0[ss:bp + 14<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v16
	call fn1825_4BFA (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	v17 = Mem0[ss:bp - 4<i16>:word16] + 1<16>
	Mem0[ss:bp - 4<i16>:word16] = v17
	SZO = cond(v17)
	v19 = Mem0[ss:bp - 2<i16>:word16] + 1<16>
	Mem0[ss:bp - 2<i16>:word16] = v19
	SZO = cond(v19)
	es_bx = Mem0[ss:bp + 18<i16>:segptr32]
	v20 = Mem0[es:bx + 20<i16>:word16] + 1<16>
	Mem0[es:bx + 20<i16>:word16] = v20
	SZO = cond(v20)
	// succ:  l1825_4B9B
l1825_4B9B:
	ax = Mem0[ss:bp - 4<i16>:word16]
	SCZO = cond(Mem0[es:bx + 16<i16>:word16] - ax)
	branch Test(UGT,CZ) l1825_4B68
	// succ:  l1825_4BA4 l1825_4B68
l1825_4BA4:
	ax = Mem0[es:bx + 14<i16>:word16]
	SCZO = cond(Mem0[es:bx + 18<i16>:word16] - ax)
	branch Test(ULE,CZ) l1825_4BB4
	// succ:  l1825_4BAE l1825_4BB4
l1825_4BAE:
	ax = 1<16>
	goto l1825_4BB6
	// succ:  l1825_4BB6
l1825_4BB4:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l1825_4BB6
l1825_4BB6:
	Mem0[es:bx + 6<i16>:word16] = ax
	ax = Mem0[ss:bp - 2<i16>:word16]
	SCZO = cond(Mem0[es:bx + 28<i16>:word16] - ax)
	branch Test(UGE,C) l1825_4BD2
	// succ:  l1825_4BC3 l1825_4BD2
l1825_4BC3:
	ax = Mem0[ss:bp - 4<i16>:word16]
	SCZO = cond(Mem0[es:bx + 16<i16>:word16] - ax)
	branch Test(ULT,C) l1825_4BD2
	// succ:  l1825_4BCC l1825_4BD2
l1825_4BCC:
	ax = 1<16>
	goto l1825_4BD4
	// succ:  l1825_4BD4
l1825_4BD2:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l1825_4BD4
l1825_4BD4:
	Mem0[es:bx + 8<i16>:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = es
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bx
	ax = 0x26<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v21 = Mem0[ss:bp + 12<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v21
	v22 = Mem0[ss:bp + 10<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v22
	v23 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v23
	v24 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v24
	call fn1825_675E (retsize: 4;)
	es_bx = Mem0[ss:bp + 18<i16>:segptr32]
	Mem0[es:bx:word16] = 0<16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_4B48_exit
fn1825_4B48_exit:


// fn1825_4BFA
// Return size: 4
define fn1825_4BFA
fn1825_4BFA_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l1825_4BFA
l1825_4BFA:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 4<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	call fn1F38_0517 (retsize: 4;)
	ah = ah - ah
	SCZO = cond(ah)
	Mem0[ss:bp - 2<i16>:word16] = ax
	ax = 0x12<16>
	dx_ax = Mem0[ss:bp + 10<i16>:word16] *u32 ax
	SCZO = cond(dx_ax)
	si = ax
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	es_bx = Mem0[es:bx + 0xA8<16>:segptr32]
	v14 = Mem0[es:bx + 16<i16> + si:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v14
	v15 = Mem0[es:bx + 14<i16> + si:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v15
	call fn2BC7_050A (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn2017_01BA (retsize: 4;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn2017_03F5 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 4<i16>:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	ax = Mem0[ss:bp - 2<i16>:word16]
	ax = ax + 0xC<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_0517 (retsize: 4;)
	al = ah
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	es_bx = Mem0[es:bx + 0xA8<16>:segptr32]
	v19 = Mem0[es:bx + si:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v19
	call fn1825_62F6 (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 4<i16>:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	ax = Mem0[ss:bp - 2<i16>:word16]
	ax = ax + 0x12<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_0517 (retsize: 4;)
	al = ah
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = 3<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	es_bx = Mem0[es:bx + 0xA8<16>:segptr32]
	v20 = Mem0[es:bx + 2<i16> + si:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v20
	call fn1825_63F8 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = Mem0[ss:bp - 2<i16>:word16]
	ax = ax + 0x1A<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_0517 (retsize: 4;)
	al = ah
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = 3<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	es_bx = Mem0[es:bx + 0xA8<16>:segptr32]
	v21 = Mem0[es:bx + 4<i16> + si:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v21
	call fn1825_63F8 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_4BFA_exit
fn1825_4BFA_exit:


// fn1825_4CFE
// Return size: 4
define fn1825_4CFE
fn1825_4CFE_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l1825_4CFE
l1825_4CFE:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0xC<16>
	SCZO = cond(sp)
	SCZO = cond(Mem0[ds:0xF02<16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_4D73
	// succ:  l1825_4D0B l1825_4D73
l1825_4D0B:
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	ax = Mem0[es:bx:word16]
	Mem0[ss:bp - 8<i16>:word16] = ax
	ax = Mem0[es:bx + 2<i16>:word16]
	Mem0[ss:bp - 10<i16>:word16] = ax
	ax = Mem0[es:bx + 4<i16>:word16]
	Mem0[ss:bp - 6<i16>:word16] = ax
	ax = Mem0[es:bx + 6<i16>:word16]
	Mem0[ss:bp - 4<i16>:word16] = ax
	ax = Mem0[ss:bp - 6<i16>:word16]
	ax = ax - Mem0[ss:bp - 8<i16>:word16]
	SCZO = cond(ax)
	ax = ax + 1<16>
	SZO = cond(ax)
	Mem0[ss:bp - 12<i16>:word16] = ax
	ax = Mem0[ss:bp - 4<i16>:word16]
	ax = ax - Mem0[ss:bp - 10<i16>:word16]
	SCZO = cond(ax)
	ax = ax + 1<16>
	SZO = cond(ax)
	Mem0[ss:bp - 2<i16>:word16] = ax
	ax = Mem0[ss:bp - 12<i16>:word16]
	dx_ax = Mem0[ss:bp - 2<i16>:word16] *u32 ax
	SCZO = cond(dx_ax)
	ax = ax << 1<16>
	SCZO = cond(ax)
	Mem0[es:bx + 8<i16>:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn21DC_097E (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	Mem0[es:bx + 10<i16>:word16] = ax
	Mem0[es:bx + 12<i16>:word16] = dx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v16 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v16
	v17 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v17
	v18 = Mem0[ss:bp - 10<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v18
	v19 = Mem0[ss:bp - 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v19
	call fn1F38_0A6F (retsize: 4;)
	sp = sp + 0xC<16>
	SCZO = cond(sp)
	// succ:  l1825_4D73
l1825_4D73:
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_4CFE_exit
fn1825_4CFE_exit:


// fn1825_4D78
// Return size: 4
define fn1825_4D78
fn1825_4D78_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l1825_4D78
l1825_4D78:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	SCZO = cond(Mem0[ds:0xF02<16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_4DA4
	// succ:  l1825_4D82 l1825_4DA4
l1825_4D82:
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	v12 = Mem0[es:bx + 12<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v12
	v13 = Mem0[es:bx + 10<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v13
	v14 = Mem0[es:bx + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v14
	v15 = Mem0[es:bx + 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v15
	v16 = Mem0[es:bx + 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v16
	v17 = Mem0[es:bx:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v17
	call fn1F38_0A9A (retsize: 4;)
	sp = sp + 0xC<16>
	SCZO = cond(sp)
	// succ:  l1825_4DA4
l1825_4DA4:
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_4D78_exit
fn1825_4D78_exit:


// fn1825_4DA6
// Return size: 4
define fn1825_4DA6
fn1825_4DA6_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l1825_4DA6
l1825_4DA6:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x1C<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 6<i16>:word16] = 0<16>
	Mem0[ss:bp - 8<i16>:word16] = 5<16>
	Mem0[ss:bp - 24<i16>:word16] = 5<16>
	Mem0[ss:bp - 4<i16>:word16] = 0xA<16>
	Mem0[ss:bp - 2<i16>:word16] = 0x35<16>
	Mem0[ss:bp - 14<i16>:word16] = 6<16>
	Mem0[ss:bp - 26<i16>:word16] = 7<16>
	Mem0[ss:bp - 12<i16>:word16] = 0<16>
	Mem0[ss:bp - 22<i16>:word16] = 1<16>
	// succ:  l1825_4DD9
l1825_4DD9:
	SCZO = cond(Mem0[ss:bp - 22<i16>:word16] - 0xBB8<16>)
	branch Test(NE,Z) l1825_4DE3
	// succ:  l1825_4DE0 l1825_4DE3
l1825_4DE0:
	goto l1825_5132
	// succ:  l1825_5132
l1825_4DE3:
	ax = 0xA5E<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v10 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v10
	v11 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v11
	v12 = Mem0[ss:bp - 24<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v12
	v13 = Mem0[ss:bp - 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v13
	call fn1F38_05DB (retsize: 4;)
	sp = sp + 0xC<16>
	SCZO = cond(sp)
	ax = 0xA2C<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v14 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v14
	v15 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v15
	v16 = Mem0[ss:bp - 24<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v16
	v17 = Mem0[ss:bp - 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v17
	call fn1F38_05DB (retsize: 4;)
	sp = sp + 0xC<16>
	SCZO = cond(sp)
	v18 = Mem0[ss:bp - 26<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v18
	v19 = Mem0[ss:bp - 14<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v19
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = 8<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x5A08<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	v20 = Mem0[ss:bp - 26<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v20
	ax = Mem0[ss:bp - 14<i16>:word16]
	ax = ax + 1<16>
	SZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = 4<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x5A12<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	v22 = Mem0[ss:bp - 26<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v22
	ax = Mem0[ss:bp - 14<i16>:word16]
	ax = ax + 2<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = 5<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x5A18<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	v23 = Mem0[ss:bp - 26<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v23
	ax = Mem0[ss:bp - 14<i16>:word16]
	ax = ax + 3<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = 9<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x5A1E<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	ax = Mem0[ss:bp - 26<i16>:word16]
	ax = ax + 0xA<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v24 = Mem0[ss:bp - 14<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v24
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	Mem0[ds:0xA68<16>:byte] = 0<8>
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 1<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0xA<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1825_648A (retsize: 4;)
	sp = sp + 0xC<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 22<i16>:word16] = ax
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn2017_03F5 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 28<i16>:word16] = ax
	SCZO = cond(Mem0[ss:bp - 22<i16>:word16] - 0x14<16>)
	branch Test(NE,Z) l1825_4EE8
	// succ:  l1825_4EE5 l1825_4EE8
l1825_4EE5:
	goto l1825_5129
	// succ:  l1825_5129
l1825_4EE8:
	SCZO = cond(Mem0[ss:bp - 22<i16>:word16] - 0xBB8<16>)
	branch Test(NE,Z) l1825_4EF2
	// succ:  l1825_4EEF l1825_4EF2
l1825_4EEF:
	goto l1825_5129
	// succ:  l1825_5129
l1825_4EF2:
	ax = ax | ax
	SZ = cond(ax)
	O = false
	C = false
	branch Test(NE,Z) l1825_4EF9
	// succ:  l1825_4EF6 l1825_4EF9
l1825_4EF6:
	goto l1825_5129
	// succ:  l1825_5129
l1825_4EF9:
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn2BC7_03C2 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 18<i16>:word16] = ax
	Mem0[ss:bp - 16<i16>:word16] = dx
	es_bx = Mem0[ss:bp - 18<i16>:segptr32]
	ax = Mem0[es:bx + 4<i16>:word16]
	ax = ax | Mem0[es:bx + 6<i16>:word16]
	SZ = cond(ax)
	O = false
	C = false
	branch Test(NE,Z) l1825_4F1C
	// succ:  l1825_4F19 l1825_4F1C
l1825_4F19:
	goto l1825_4FAE
	// succ:  l1825_4FAE
l1825_4F1C:
	v32 = Mem0[es:bx + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v32
	v33 = Mem0[es:bx + 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v33
	call fn2368_04F4 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = Mem0[ss:bp - 26<i16>:word16]
	ax = ax + 6<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 14<i16>:word16]
	ax = ax + 1<16>
	SZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	es_bx = Mem0[ss:bp - 18<i16>:segptr32]
	es_bx = Mem0[es:bx + 4<i16>:segptr32]
	v34 = Mem0[es:bx:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v34
	call fn1825_62F6 (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 28<i16>:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	ax = Mem0[ss:bp - 26<i16>:word16]
	ax = ax + 0xA<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 14<i16>:word16]
	ax = ax + 2<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1825_6168 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 28<i16>:word16] = ax
	ax = ax - 0x20<16>
	SCZO = cond(ax)
	cx = cx - cx - C
	SCZO = cond(cx)
	ax = ax & cx
	SZ = cond(ax)
	O = false
	C = false
	ax = ax + 0x20<16>
	SCZO = cond(ax)
	Mem0[ss:bp - 28<i16>:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_042D (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	call fn2368_033C (retsize: 4;)
	goto l1825_501A
	// succ:  l1825_501A
l1825_4FAE:
	Mem0[ss:bp - 6<i16>:word16] = 1<16>
	v36 = Mem0[ss:bp - 16<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v36
	v37 = Mem0[ss:bp - 18<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v37
	call fn2368_030E (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	SCZO = cond(Mem0[ss:bp + 10<i16>:word16] - 0<16>)
	branch Test(NE,Z) l1825_4FCE
	// succ:  l1825_4FC7 l1825_4FCE
l1825_4FC7:
	call fn2368_0C7E (retsize: 4;)
	goto l1825_4FD3
	// succ:  l1825_4FD3
l1825_4FCE:
	call fn2368_0D20 (retsize: 4;)
	// succ:  l1825_4FD3
l1825_4FD3:
	es_bx = Mem0[ss:bp - 18<i16>:segptr32]
	es_bx = Mem0[es:bx + 4<i16>:segptr32]
	Mem0[es:bx:word16] = 0<16>
	ax = Mem0[ss:bp - 26<i16>:word16]
	ax = ax + 6<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 14<i16>:word16]
	ax = ax + 1<16>
	SZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	es_bx = Mem0[ss:bp - 18<i16>:segptr32]
	es_bx = Mem0[es:bx + 4<i16>:segptr32]
	v38 = Mem0[es:bx:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v38
	call fn1825_62F6 (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 28<i16>:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	// succ:  l1825_501A
l1825_501A:
	ax = Mem0[ss:bp - 26<i16>:word16]
	ax = ax + 0xB<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 14<i16>:word16]
	ax = ax + 3<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	Mem0[ds:0xA68<16>:byte] = 0<8>
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x20<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1825_648A (retsize: 4;)
	sp = sp + 0xC<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 22<i16>:word16] = ax
	SCZO = cond(ax - 0x14<16>)
	branch Test(NE,Z) l1825_5055
	// succ:  l1825_5052 l1825_5055
l1825_5052:
	goto l1825_5129
	// succ:  l1825_5129
l1825_5055:
	SCZO = cond(ax - 0xBB8<16>)
	branch Test(NE,Z) l1825_505D
	// succ:  l1825_505A l1825_505D
l1825_505A:
	goto l1825_5129
	// succ:  l1825_5129
l1825_505D:
	ax = 0xC08<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1825_6042 (retsize: 4;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	al = Mem0[ds:0xC08<16>:byte]
	ah = ah - ah
	SCZO = cond(ah)
	ax = ax - 0x41<16>
	SCZO = cond(ax)
	v43 = ax
	SCZO = cond(ax - 0x14<16>)
	branch Test(UGT,CZ) l1825_50D4
	// succ:  l1825_507B l1825_50D4
l1825_507B:
	ax = ax + ax
	SCZO = cond(ax)
	v42 = bx
	bx = ax
	ax = v42
	switch (v43) { l1825_508D l1825_50D4 l1825_508D l1825_508D l1825_50D4 l1825_50D4 l1825_50D4 l1825_50D4 l1825_50D4 l1825_50D4 l1825_50D4 l1825_508D l1825_508D l1825_508D l1825_50D4 l1825_50D4 l1825_50D4 l1825_50D4 l1825_50D4 l1825_50D4 l1825_5086 }
	// succ:  l1825_508D l1825_50D4 l1825_508D l1825_508D l1825_50D4 l1825_50D4 l1825_50D4 l1825_50D4 l1825_50D4 l1825_50D4 l1825_50D4 l1825_508D l1825_508D l1825_508D l1825_50D4 l1825_50D4 l1825_50D4 l1825_50D4 l1825_50D4 l1825_50D4 l1825_5086
l1825_5086:
	SCZO = cond(Mem0[ds:0xC09<16>:byte] - 0x49<8>)
	branch Test(NE,Z) l1825_5094
	// succ:  l1825_508D l1825_5094
l1825_508D:
	Mem0[ss:bp - 10<i16>:word16] = 0<16>
	goto l1825_50D4
	// succ:  l1825_50D4
l1825_5094:
	SCZO = cond(Mem0[ds:0xC09<16>:byte] - 0x45<8>)
	branch Test(NE,Z) l1825_50A2
	// succ:  l1825_509B l1825_50A2
l1825_509B:
	Mem0[ss:bp - 10<i16>:word16] = 1<16>
	goto l1825_50D4
	// succ:  l1825_50D4
l1825_50A2:
	Mem0[ss:bp - 10<i16>:word16] = 3<16>
	// succ:  l1825_50D4
l1825_50D4:
	SCZO = cond(Mem0[ss:bp - 10<i16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_50EA
	// succ:  l1825_50DA l1825_50EA
l1825_50DA:
	v44 = Mem0[ss:bp - 10<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v44
	call fn1825_6EA4 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 20<i16>:word16] = ax
	goto l1825_50EF
	// succ:  l1825_50EF
l1825_50EA:
	Mem0[ss:bp - 20<i16>:word16] = 1<16>
	// succ:  l1825_50EF
l1825_50EF:
	SCZO = cond(Mem0[ss:bp - 20<i16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_5129
	// succ:  l1825_50F5 l1825_5129
l1825_50F5:
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn2368_022E (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	Mem0[ds:0xEE2<16>:word16] = 0<16>
	call fn31FF_1D44 (retsize: 4;)
	Mem0[ds:0xEE2<16>:word16] = 1<16>
	v45 = Mem0[ss:bp - 16<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v45
	v46 = Mem0[ss:bp - 18<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v46
	call fn2368_030E (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	call fn2368_0A7A (retsize: 4;)
	// succ:  l1825_5129
l1825_5129:
	SCZO = cond(Mem0[ss:bp - 22<i16>:word16] - 0x14<16>)
	branch Test(EQ,Z) l1825_5132
	// succ:  l1825_512F l1825_5132
l1825_512F:
	goto l1825_4DD9
	// succ:  l1825_4DD9
l1825_5132:
	SCZO = cond(Mem0[ss:bp - 22<i16>:word16] - 0x14<16>)
	branch Test(NE,Z) l1825_514D
	// succ:  l1825_5138 l1825_514D
l1825_5138:
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	Mem0[es:bx + 12<i16>:word16] = 1<16>
	Mem0[es:bx + 14<i16>:word16] = 1<16>
	Mem0[es:bx + 22<i16>:word16] = 0<16>
	// succ:  l1825_514D
l1825_514D:
	ax = 1<16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_4DA6_exit
fn1825_4DA6_exit:


// fn1825_5154
// Return size: 4
define fn1825_5154
fn1825_5154_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l1825_5154
l1825_5154:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x18<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	Mem0[ss:bp - 20<i16>:word16] = 0<16>
	Mem0[ss:bp - 14<i16>:word16] = 2<16>
	Mem0[ss:bp - 22<i16>:word16] = 1<16>
	Mem0[ss:bp - 6<i16>:word16] = 0x14<16>
	Mem0[ss:bp - 4<i16>:word16] = 0x10<16>
	Mem0[ss:bp - 16<i16>:word16] = 2<16>
	ax = Mem0[ss:bp - 4<i16>:word16]
	ax = ax + 1<16>
	SZO = cond(ax)
	Mem0[ss:bp - 24<i16>:word16] = ax
	ax = Mem0[ss:bp - 6<i16>:word16]
	Mem0[ss:bp - 12<i16>:word16] = ax
	ax = Mem0[ss:bp - 24<i16>:word16]
	ax = ax + 0x3C<16>
	SCZO = cond(ax)
	Mem0[ss:bp - 10<i16>:word16] = ax
	Mem0[ss:bp - 2<i16>:word16] = 0<16>
	ax = 1<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1825_6E18 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	goto l1825_51B4
	// succ:  l1825_51B4
l1825_51A2:
	v15 = Mem0[ss:bp - 2<i16>:word16] + 1<16>
	Mem0[ss:bp - 2<i16>:word16] = v15
	SZO = cond(v15)
	ax = 0x16<16>
	dx_ax = Mem0[ss:bp - 8<i16>:word16] *u32 ax
	SCZO = cond(dx_ax)
	bx = ax
	es_si = Mem0[ds:0x1282<16>:segptr32]
	ax = Mem0[es:bx + si:word16]
	// succ:  l1825_51B4
l1825_51B4:
	Mem0[ss:bp - 8<i16>:word16] = ax
	ax = ax | ax
	SZ = cond(ax)
	O = false
	C = false
	branch Test(NE,Z) l1825_51A2
	// succ:  l1825_51BB l1825_51A2
l1825_51BB:
	ax = Mem0[ds:0x990<16>:word16]
	SCZO = cond(Mem0[ss:bp - 2<i16>:word16] - ax)
	branch Test(UGE,C) l1825_51CE
	// succ:  l1825_51C3 l1825_51CE
l1825_51C3:
	SCZO = cond(Mem0[ds:0x98C<16>:word16] - ax)
	branch Test(NE,Z) l1825_51CE
	// succ:  l1825_51C9 l1825_51CE
l1825_51C9:
	Mem0[ss:bp - 20<i16>:word16] = 1<16>
	// succ:  l1825_51CE
l1825_51CE:
	SCZO = cond(Mem0[ds:0x982<16>:word16] - 0<16>)
	branch Test(NE,Z) l1825_5239
	// succ:  l1825_51D5 l1825_5239
l1825_51D5:
	SCZO = cond(Mem0[ds:0x9A6<16>:word16] - 0<16>)
	branch Test(NE,Z) l1825_5239
	// succ:  l1825_51DC l1825_5239
l1825_51DC:
	Mem0[ds:0x980<16>:word16] = 1<16>
	Mem0[ds:0x982<16>:word16] = 0<16>
	Mem0[ds:0x984<16>:word16] = 0<16>
	Mem0[ds:0x986<16>:word16] = 0<16>
	Mem0[ds:0x988<16>:word16] = 0<16>
	Mem0[ds:0x98C<16>:word16] = 1<16>
	Mem0[ds:0x98E<16>:word16] = 1<16>
	Mem0[ds:0x990<16>:word16] = 0<16>
	Mem0[ds:0x992<16>:word16] = 1<16>
	Mem0[ds:0x994<16>:word16] = 0<16>
	ax = Mem0[ss:bp - 14<i16>:word16]
	ax = ax + 1<16>
	SZO = cond(ax)
	Mem0[ds:0x99A<16>:word16] = ax
	ax = Mem0[ss:bp - 6<i16>:word16]
	ax = ax - 1<16>
	SZO = cond(ax)
	Mem0[ds:0x99C<16>:word16] = ax
	ax = Mem0[ds:0x99A<16>:word16]
	Mem0[ds:0x998<16>:word16] = ax
	ax = Mem0[ss:bp - 22<i16>:word16]
	ax = ax + 1<16>
	SZO = cond(ax)
	Mem0[ds:0x996<16>:word16] = ax
	Mem0[ds:0x99E<16>:word16] = 0x11<16>
	// succ:  l1825_5239
l1825_5239:
	SCZO = cond(Mem0[ds:0x9A6<16>:word16] - 0<16>)
	branch Test(NE,Z) l1825_52A8
	// succ:  l1825_5240 l1825_52A8
l1825_5240:
	SCZO = cond(Mem0[ds:0x982<16>:word16] - 0<16>)
	branch Test(NE,Z) l1825_52A8
	// succ:  l1825_5247 l1825_52A8
l1825_5247:
	Mem0[ds:0x9A4<16>:word16] = 1<16>
	Mem0[ds:0x9A6<16>:word16] = 0<16>
	Mem0[ds:0x9A8<16>:word16] = 0<16>
	Mem0[ds:0x9AA<16>:word16] = 0<16>
	Mem0[ds:0x9AC<16>:word16] = 0<16>
	Mem0[ds:0x9B0<16>:word16] = 1<16>
	Mem0[ds:0x9B2<16>:word16] = 1<16>
	Mem0[ds:0x9B4<16>:word16] = 0<16>
	Mem0[ds:0x9B6<16>:word16] = 1<16>
	Mem0[ds:0x9B8<16>:word16] = 0<16>
	ax = Mem0[ss:bp - 16<i16>:word16]
	ax = ax + 2<16>
	SCZO = cond(ax)
	Mem0[ds:0x9BE<16>:word16] = ax
	ax = Mem0[ss:bp - 12<i16>:word16]
	ax = ax - 1<16>
	SZO = cond(ax)
	Mem0[ds:0x9C0<16>:word16] = ax
	ax = Mem0[ds:0x9BE<16>:word16]
	Mem0[ds:0x9BC<16>:word16] = ax
	ax = Mem0[ss:bp - 24<i16>:word16]
	ax = ax + 2<16>
	SCZO = cond(ax)
	Mem0[ds:0x9BA<16>:word16] = ax
	Mem0[ds:0x9C2<16>:word16] = 0x10<16>
	// succ:  l1825_52A8
l1825_52A8:
	ax = Mem0[ss:bp - 2<i16>:word16]
	Mem0[ds:0x990<16>:word16] = ax
	SCZO = cond(Mem0[ss:bp - 20<i16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_531E
	// succ:  l1825_52B4 l1825_531E
l1825_52B4:
	ax = Mem0[ds:0x992<16>:word16]
	ax = ax + Mem0[ds:0x99E<16>:word16]
	SCZO = cond(ax)
	SCZO = cond(ax - Mem0[ds:0x990<16>:word16])
	branch Test(UGT,CZ) l1825_530A
	// succ:  l1825_52C1 l1825_530A
l1825_52C1:
	ax = Mem0[ds:0x990<16>:word16]
	dx = dx - dx
	SCZO = cond(dx)
	v22 = dx_ax
	dx = CONVERT(v22 %u Mem0[ds:0x99E<16>:word16], word32, uint16)
	ax = CONVERT(v22 /u Mem0[ds:0x99E<16>:word16], word16, uint16)
	SCZO = cond(ax)
	si = dx
	si = si | si
	SZ = cond(si)
	O = false
	C = false
	branch Test(EQ,Z) l1825_52D8
	// succ:  l1825_52D0 l1825_52D8
l1825_52D0:
	ax = Mem0[ds:0x990<16>:word16]
	ax = ax - si
	SCZO = cond(ax)
	goto l1825_52E9
	// succ:  l1825_52E9
l1825_52D8:
	ax = Mem0[ds:0x990<16>:word16]
	ax = ax - Mem0[ds:0x99E<16>:word16]
	SCZO = cond(ax)
	dx = dx - dx
	SCZO = cond(dx)
	v31 = dx_ax
	dx = CONVERT(v31 %u Mem0[ds:0x99E<16>:word16], word32, uint16)
	ax = CONVERT(v31 /u Mem0[ds:0x99E<16>:word16], word16, uint16)
	SCZO = cond(ax)
	dx_ax = Mem0[ds:0x99E<16>:word16] *u32 ax
	SCZO = cond(dx_ax)
	// succ:  l1825_52E9
l1825_52E9:
	ax = ax + 1<16>
	SZO = cond(ax)
	Mem0[ds:0x992<16>:word16] = ax
	ax = Mem0[ds:0x990<16>:word16]
	Mem0[ds:0x98C<16>:word16] = ax
	ax = Mem0[ds:0x99A<16>:word16]
	ax = ax + Mem0[ds:0x990<16>:word16]
	SCZO = cond(ax)
	ax = ax - Mem0[ds:0x992<16>:word16]
	SCZO = cond(ax)
	Mem0[ds:0x998<16>:word16] = ax
	Mem0[ds:0x980<16>:word16] = 1<16>
	goto l1825_531E
	// succ:  l1825_531E
l1825_530A:
	ax = Mem0[ds:0x990<16>:word16]
	Mem0[ds:0x98C<16>:word16] = ax
	ax = Mem0[ds:0x99A<16>:word16]
	ax = ax + Mem0[ds:0x990<16>:word16]
	SCZO = cond(ax)
	ax = ax - Mem0[ds:0x992<16>:word16]
	SCZO = cond(ax)
	Mem0[ds:0x998<16>:word16] = ax
	// succ:  l1825_531E
l1825_531E:
	Mem0[ds:0x98A<16>:word16] = 1<16>
	Mem0[ds:0x9AE<16>:word16] = 1<16>
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_0527 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	ax = 0xA5E<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v23 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v23
	v24 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v24
	v25 = Mem0[ss:bp - 22<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v25
	v26 = Mem0[ss:bp - 14<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v26
	call fn1F38_05DB (retsize: 4;)
	sp = sp + 0xC<16>
	SCZO = cond(sp)
	ax = 0xA2C<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v27 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v27
	v28 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v28
	v29 = Mem0[ss:bp - 22<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v29
	v30 = Mem0[ss:bp - 14<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v30
	call fn1F38_05DB (retsize: 4;)
	sp = sp + 0xC<16>
	SCZO = cond(sp)
	SCZO = cond(Mem0[ds:0x990<16>:word16] - 1<16>)
	ax = ax - ax - C
	SCZO = cond(ax)
	C = ax != 0<16>
	ax = -ax
	SZO = cond(ax)
	goto l1825_5458
	// succ:  l1825_5458
l1825_5374:
	ax = 0x9A4<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x980<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v33 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v33
	v34 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v34
	v35 = Mem0[ss:bp - 22<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v35
	v36 = Mem0[ss:bp - 14<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v36
	call fn1825_54D4 (retsize: 4;)
	sp = sp + 0x10<16>
	SCZO = cond(sp)
	SCZO = cond(Mem0[ds:0x98A<16>:word16] - 6<16>)
	branch Test(EQ,Z) l1825_53A9
	// succ:  l1825_5398 l1825_53A9
l1825_5398:
	SCZO = cond(Mem0[ds:0x98A<16>:word16] - 8<16>)
	branch Test(EQ,Z) l1825_53A9
	// succ:  l1825_539F l1825_53A9
l1825_539F:
	SCZO = cond(Mem0[ds:0x9A6<16>:word16] - 0<16>)
	branch Test(NE,Z) l1825_53A9
	// succ:  l1825_53A6 l1825_53A9
l1825_53A6:
	goto l1825_5433
	// succ:  l1825_5433
l1825_53A9:
	ax = 0xA2C<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v37 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v37
	v38 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v38
	v39 = Mem0[ss:bp - 22<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v39
	v40 = Mem0[ss:bp - 14<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v40
	call fn1F38_05DB (retsize: 4;)
	sp = sp + 0xC<16>
	SCZO = cond(sp)
	ax = 0x980<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0xF<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v41 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v41
	v42 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v42
	v43 = Mem0[ss:bp - 22<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v43
	v44 = Mem0[ss:bp - 14<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v44
	call fn1825_675E (retsize: 4;)
	sp = sp + 0xE<16>
	SCZO = cond(sp)
	v45 = Mem0[ss:bp - 10<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v45
	v46 = Mem0[ss:bp - 12<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v46
	v47 = Mem0[ss:bp - 24<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v47
	v48 = Mem0[ss:bp - 16<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v48
	ax = 1<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v49 = Mem0[ds:0x98C<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v49
	ax = 0x9A4<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1825_59CC (retsize: 4;)
	sp = sp + 0x10<16>
	SCZO = cond(sp)
	ax = 0xA36<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v50 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v50
	v51 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v51
	v52 = Mem0[ss:bp - 22<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v52
	v53 = Mem0[ss:bp - 14<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v53
	call fn1F38_05DB (retsize: 4;)
	sp = sp + 0xC<16>
	SCZO = cond(sp)
	ax = 0x980<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0xF<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v54 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v54
	v55 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v55
	v56 = Mem0[ss:bp - 22<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v56
	v57 = Mem0[ss:bp - 14<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v57
	call fn1825_675E (retsize: 4;)
	sp = sp + 0xE<16>
	SCZO = cond(sp)
	// succ:  l1825_5433
l1825_5433:
	SCZO = cond(Mem0[ds:0x984<16>:word16] - 0<16>)
	branch Test(NE,Z) l1825_5451
	// succ:  l1825_543A l1825_5451
l1825_543A:
	SCZO = cond(Mem0[ds:0x9A8<16>:word16] - 0<16>)
	branch Test(NE,Z) l1825_5451
	// succ:  l1825_5441 l1825_5451
l1825_5441:
	SCZO = cond(Mem0[ds:0x98A<16>:word16] - 0xBB8<16>)
	branch Test(EQ,Z) l1825_5451
	// succ:  l1825_5449 l1825_5451
l1825_5449:
	SCZO = cond(Mem0[ds:0x9AE<16>:word16] - 0xBB8<16>)
	branch Test(NE,Z) l1825_5456
	// succ:  l1825_5451 l1825_5456
l1825_5451:
	ax = 1<16>
	goto l1825_5458
	// succ:  l1825_5458
l1825_5456:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l1825_5458
l1825_5458:
	Mem0[ss:bp - 18<i16>:word16] = ax
	ax = ax | ax
	SZ = cond(ax)
	O = false
	C = false
	branch Test(NE,Z) l1825_5462
	// succ:  l1825_545F l1825_5462
l1825_545F:
	goto l1825_5374
	// succ:  l1825_5374
l1825_5462:
	SCZO = cond(Mem0[ds:0x990<16>:word16] - 0<16>)
	branch Test(NE,Z) l1825_54A5
	// succ:  l1825_5469 l1825_54A5
l1825_5469:
	call fn1F38_07FA (retsize: 4;)
	ax = Mem0[ss:bp - 22<i16>:word16]
	ax = ax + 3<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v32 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v32
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = 9<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x5A28<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x980<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1825_67EE (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	call fn1F38_07E7 (retsize: 4;)
	// succ:  l1825_54A5
l1825_54A5:
	SCZO = cond(Mem0[ds:0x984<16>:word16] - 0<16>)
	branch Test(NE,Z) l1825_54B3
	// succ:  l1825_54AC l1825_54B3
l1825_54AC:
	SCZO = cond(Mem0[ds:0x9A8<16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_54BF
	// succ:  l1825_54B3 l1825_54BF
l1825_54B3:
	Mem0[ds:0x982<16>:word16] = 0<16>
	Mem0[ds:0x9A6<16>:word16] = 0<16>
	// succ:  l1825_54BF
l1825_54BF:
	ax = 1<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_0527 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	ax = 1<16>
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_5154_exit
fn1825_5154_exit:


// fn1825_54D4
// Return size: 4
define fn1825_54D4
fn1825_54D4_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l1825_54D4
l1825_54D4:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x10<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	ax = Mem0[ss:bp + 6<i16>:word16]
	Mem0[ss:bp - 6<i16>:word16] = ax
	ax = Mem0[ss:bp + 12<i16>:word16]
	ax = ax + 1<16>
	SZO = cond(ax)
	Mem0[ss:bp - 16<i16>:word16] = ax
	ax = Mem0[ss:bp + 6<i16>:word16]
	ax = ax + 0x12<16>
	SCZO = cond(ax)
	Mem0[ss:bp - 4<i16>:word16] = ax
	ax = Mem0[ss:bp - 16<i16>:word16]
	ax = ax + 0x3C<16>
	SCZO = cond(ax)
	Mem0[ss:bp - 2<i16>:word16] = ax
	Mem0[ss:bp - 14<i16>:word16] = 0<16>
	// succ:  l1825_54FF
l1825_54FF:
	es_bx = Mem0[ss:bp + 18<i16>:segptr32]
	SCZO = cond(Mem0[es:bx + 2<i16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_550C
	// succ:  l1825_5509 l1825_550C
l1825_5509:
	goto l1825_56D8
	// succ:  l1825_56D8
l1825_550C:
	es_bx = Mem0[ss:bp + 14<i16>:segptr32]
	SCZO = cond(Mem0[es:bx:word16] - 0<16>)
	branch Test(NE,Z) l1825_551C
	// succ:  l1825_5515 l1825_551C
l1825_5515:
	SCZO = cond(Mem0[es:bx + 2<i16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_5531
	// succ:  l1825_551C l1825_5531
l1825_551C:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = es
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bx
	v14 = Mem0[ss:bp + 12<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v14
	v15 = Mem0[ss:bp + 10<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v15
	v16 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v16
	v17 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v17
	call fn1825_5730 (retsize: 4;)
	sp = sp + 0xC<16>
	SCZO = cond(sp)
	// succ:  l1825_5531
l1825_5531:
	v27 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v27
	v28 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v28
	v29 = Mem0[ss:bp - 16<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v29
	v30 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v30
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	es_bx = Mem0[ss:bp + 14<i16>:segptr32]
	v31 = Mem0[es:bx + 12<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v31
	v32 = Mem0[ss:bp + 20<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v32
	v33 = Mem0[ss:bp + 18<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v33
	call fn1825_59CC (retsize: 4;)
	sp = sp + 0x10<16>
	SCZO = cond(sp)
	ax = 0xE<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x20<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0xBE8<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn2017_0228 (retsize: 4;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	es_bx = Mem0[ss:bp + 14<i16>:segptr32]
	v34 = Mem0[es:bx + 12<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v34
	call fn1825_6E18 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	cx = 0x16<16>
	dx_ax = cx *u32 ax
	SCZO = cond(dx_ax)
	si = ax
	es_bx = Mem0[ds:0x1282<16>:segptr32]
	v37 = Mem0[es:bx + 20<i16> + si:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v37
	v38 = Mem0[es:bx + 18<i16> + si:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v38
	call fn2BC7_050A (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 12<i16>:word16] = ax
	Mem0[ss:bp - 10<i16>:word16] = dx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn2017_03F5 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v40 = Mem0[ss:bp - 10<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v40
	v41 = Mem0[ss:bp - 12<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v41
	ax = 0xBE9<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn2017_02EC (retsize: 4;)
	sp = sp + 0xA<16>
	SCZO = cond(sp)
	call fn1F38_07FA (retsize: 4;)
	es_bx = Mem0[ss:bp + 14<i16>:segptr32]
	v42 = Mem0[es:bx + 22<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v42
	v43 = Mem0[es:bx + 24<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v43
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = 0xE<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0xBE8<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	call fn1F38_07E7 (retsize: 4;)
	es_bx = Mem0[ss:bp + 14<i16>:segptr32]
	ax = Mem0[es:bx + 24<i16>:word16]
	Mem0[ss:bp - 8<i16>:word16] = ax
	Mem0[es:bx + 2<i16>:word16] = 0<16>
	es_bx = Mem0[ss:bp + 18<i16>:segptr32]
	Mem0[es:bx:word16] = 1<16>
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v44 = Mem0[ss:bp + 16<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v44
	v45 = Mem0[ss:bp + 14<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v45
	call fn1825_67EE (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	es_bx = Mem0[ss:bp + 14<i16>:segptr32]
	v46 = Mem0[es:bx + 22<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v46
	v47 = Mem0[ss:bp - 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v47
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = 0xE<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0xBE8<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	es_bx = Mem0[ss:bp + 14<i16>:segptr32]
	SCZO = cond(Mem0[es:bx + 10<i16>:word16] - 6<16>)
	branch Test(EQ,Z) l1825_5640
	// succ:  l1825_5639 l1825_5640
l1825_5639:
	SCZO = cond(Mem0[es:bx + 10<i16>:word16] - 8<16>)
	branch Test(NE,Z) l1825_5661
	// succ:  l1825_5640 l1825_5661
l1825_5640:
	v48 = Mem0[es:bx + 22<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v48
	v49 = Mem0[es:bx + 24<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v49
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = 1<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x5A32<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	// succ:  l1825_5661
l1825_5661:
	es_bx = Mem0[ss:bp + 14<i16>:segptr32]
	SCZO = cond(Mem0[es:bx + 4<i16>:word16] - 0<16>)
	branch Test(NE,Z) l1825_5681
	// succ:  l1825_566B l1825_5681
l1825_566B:
	SCZO = cond(Mem0[es:bx + 10<i16>:word16] - 0xBB8<16>)
	branch Test(EQ,Z) l1825_5681
	// succ:  l1825_5673 l1825_5681
l1825_5673:
	SCZO = cond(Mem0[es:bx + 10<i16>:word16] - 6<16>)
	branch Test(EQ,Z) l1825_5681
	// succ:  l1825_567A l1825_5681
l1825_567A:
	SCZO = cond(Mem0[es:bx + 10<i16>:word16] - 8<16>)
	branch Test(NE,Z) l1825_5686
	// succ:  l1825_5681 l1825_5686
l1825_5681:
	ax = 1<16>
	goto l1825_5688
	// succ:  l1825_5688
l1825_5686:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l1825_5688
l1825_5688:
	Mem0[ss:bp - 14<i16>:word16] = ax
	ax = ax | ax
	SZ = cond(ax)
	O = false
	C = false
	branch Test(EQ,Z) l1825_5692
	// succ:  l1825_568F l1825_5692
l1825_568F:
	goto l1825_571A
	// succ:  l1825_571A
l1825_5692:
	es_bx = Mem0[ss:bp + 14<i16>:segptr32]
	SCZO = cond(Mem0[es:bx + 10<i16>:word16] - 1<16>)
	branch Test(EQ,Z) l1825_571A
	// succ:  l1825_569C l1825_571A
l1825_569C:
	es_bx = Mem0[ss:bp + 18<i16>:segptr32]
	Mem0[es:bx:word16] = 1<16>
	Mem0[es:bx + 6<i16>:word16] = 0<16>
	Mem0[es:bx + 8<i16>:word16] = 0<16>
	Mem0[es:bx + 12<i16>:word16] = 1<16>
	Mem0[es:bx + 14<i16>:word16] = 1<16>
	Mem0[es:bx + 16<i16>:word16] = 1<16>
	Mem0[es:bx + 18<i16>:word16] = 1<16>
	Mem0[es:bx + 20<i16>:word16] = 0<16>
	ax = Mem0[es:bx + 26<i16>:word16]
	Mem0[es:bx + 24<i16>:word16] = ax
	goto l1825_571A
	// succ:  l1825_571A
l1825_56D8:
	v18 = Mem0[ss:bp + 16<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v18
	v19 = Mem0[ss:bp + 14<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v19
	v20 = Mem0[ss:bp + 12<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v20
	v21 = Mem0[ss:bp + 10<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v21
	v22 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v22
	v23 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v23
	call fn1825_5730 (retsize: 4;)
	sp = sp + 0xC<16>
	SCZO = cond(sp)
	es_bx = Mem0[ss:bp + 14<i16>:segptr32]
	v24 = Mem0[es:bx + 22<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v24
	v25 = Mem0[es:bx + 24<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v25
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = 1<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x5A34<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 14<i16>:word16] = 1<16>
	// succ:  l1825_571A
l1825_571A:
	SCZO = cond(Mem0[ss:bp - 14<i16>:word16] - 0<16>)
	branch Test(NE,Z) l1825_5723
	// succ:  l1825_5720 l1825_5723
l1825_5720:
	goto l1825_54FF
	// succ:  l1825_54FF
l1825_5723:
	es_bx = Mem0[ss:bp + 14<i16>:segptr32]
	Mem0[es:bx:word16] = 1<16>
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_54D4_exit
fn1825_54D4_exit:


// fn1825_5730
// Return size: 4
define fn1825_5730
fn1825_5730_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l1825_5730
l1825_5730:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0xA<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	ax = 0xA5E<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v10 = Mem0[ss:bp + 12<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v10
	v11 = Mem0[ss:bp + 10<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v11
	v12 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v12
	v13 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v13
	call fn1F38_05DB (retsize: 4;)
	sp = sp + 0xC<16>
	SCZO = cond(sp)
	ax = 0xA36<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v14 = Mem0[ss:bp + 12<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v14
	v15 = Mem0[ss:bp + 10<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v15
	v16 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v16
	v17 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v17
	call fn1F38_05DB (retsize: 4;)
	sp = sp + 0xC<16>
	SCZO = cond(sp)
	es_bx = Mem0[ss:bp + 14<i16>:segptr32]
	ax = Mem0[es:bx + 18<i16>:word16]
	Mem0[ss:bp - 8<i16>:word16] = ax
	ax = Mem0[es:bx + 26<i16>:word16]
	Mem0[ss:bp - 2<i16>:word16] = ax
	Mem0[es:bx + 20<i16>:word16] = 0<16>
	goto l1825_57ED
	// succ:  l1825_57ED
l1825_5782:
	ax = Mem0[ss:bp - 2<i16>:word16]
	SCZO = cond(Mem0[es:bx + 28<i16>:word16] - ax)
	branch Test(ULT,C) l1825_57F6
	// succ:  l1825_578B l1825_57F6
l1825_578B:
	ax = Mem0[es:bx + 22<i16>:word16]
	ax = ax + 1<16>
	SZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v24 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v24
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	v25 = Mem0[ss:bp - 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v25
	call fn1825_6E18 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	cx = 0x16<16>
	dx_ax = cx *u32 ax
	SCZO = cond(dx_ax)
	si = ax
	es_bx = Mem0[ds:0x1282<16>:segptr32]
	v28 = Mem0[es:bx + 20<i16> + si:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v28
	v29 = Mem0[es:bx + 18<i16> + si:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v29
	call fn2BC7_050A (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 6<i16>:word16] = ax
	Mem0[ss:bp - 4<i16>:word16] = dx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn2017_03F5 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v31 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v31
	v32 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v32
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	v33 = Mem0[ss:bp - 8<i16>:word16] + 1<16>
	Mem0[ss:bp - 8<i16>:word16] = v33
	SZO = cond(v33)
	v34 = Mem0[ss:bp - 2<i16>:word16] + 1<16>
	Mem0[ss:bp - 2<i16>:word16] = v34
	SZO = cond(v34)
	es_bx = Mem0[ss:bp + 14<i16>:segptr32]
	v35 = Mem0[es:bx + 20<i16>:word16] + 1<16>
	Mem0[es:bx + 20<i16>:word16] = v35
	SZO = cond(v35)
	// succ:  l1825_57ED
l1825_57ED:
	ax = Mem0[ss:bp - 8<i16>:word16]
	SCZO = cond(Mem0[es:bx + 16<i16>:word16] - ax)
	branch Test(UGE,C) l1825_5782
	// succ:  l1825_57F6 l1825_5782
l1825_57F6:
	ax = Mem0[es:bx + 14<i16>:word16]
	SCZO = cond(Mem0[es:bx + 18<i16>:word16] - ax)
	branch Test(ULE,CZ) l1825_5806
	// succ:  l1825_5800 l1825_5806
l1825_5800:
	ax = 1<16>
	goto l1825_5808
	// succ:  l1825_5808
l1825_5806:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l1825_5808
l1825_5808:
	Mem0[es:bx + 6<i16>:word16] = ax
	ax = Mem0[ss:bp - 2<i16>:word16]
	SCZO = cond(Mem0[es:bx + 28<i16>:word16] - ax)
	branch Test(UGE,C) l1825_5824
	// succ:  l1825_5815 l1825_5824
l1825_5815:
	ax = Mem0[ss:bp - 8<i16>:word16]
	SCZO = cond(Mem0[es:bx + 16<i16>:word16] - ax)
	branch Test(ULT,C) l1825_5824
	// succ:  l1825_581E l1825_5824
l1825_581E:
	ax = 1<16>
	goto l1825_5826
	// succ:  l1825_5826
l1825_5824:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l1825_5826
l1825_5826:
	Mem0[es:bx + 8<i16>:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = es
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bx
	ax = 0xF<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v36 = Mem0[ss:bp + 12<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v36
	v37 = Mem0[ss:bp + 10<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v37
	v38 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v38
	v39 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v39
	call fn1825_675E (retsize: 4;)
	sp = sp + 0xE<16>
	SCZO = cond(sp)
	es_bx = Mem0[ss:bp + 14<i16>:segptr32]
	Mem0[es:bx:word16] = 0<16>
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_5730_exit
fn1825_5730_exit:


// fn1825_5850
// Return size: 4
define fn1825_5850
fn1825_5850_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l1825_5850
l1825_5850:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0xC<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	ax = 0xA5E<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v10 = Mem0[ss:bp + 12<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v10
	v11 = Mem0[ss:bp + 10<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v11
	v12 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v12
	v13 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v13
	call fn1F38_05DB (retsize: 4;)
	sp = sp + 0xC<16>
	SCZO = cond(sp)
	ax = 0xA36<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v14 = Mem0[ss:bp + 12<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v14
	v15 = Mem0[ss:bp + 10<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v15
	v16 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v16
	v17 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v17
	call fn1F38_05DB (retsize: 4;)
	sp = sp + 0xC<16>
	SCZO = cond(sp)
	es_bx = Mem0[ss:bp + 14<i16>:segptr32]
	ax = Mem0[es:bx + 18<i16>:word16]
	Mem0[ss:bp - 10<i16>:word16] = ax
	ax = Mem0[es:bx + 26<i16>:word16]
	Mem0[ss:bp - 4<i16>:word16] = ax
	Mem0[es:bx + 20<i16>:word16] = 0<16>
	goto l1825_5967
	// succ:  l1825_5967
l1825_58A4:
	ax = Mem0[ss:bp - 4<i16>:word16]
	SCZO = cond(Mem0[es:bx + 28<i16>:word16] - ax)
	branch Test(UGE,C) l1825_58B0
	// succ:  l1825_58AD l1825_58B0
l1825_58AD:
	goto l1825_5973
	// succ:  l1825_5973
l1825_58B0:
	ax = Mem0[es:bx + 22<i16>:word16]
	ax = ax + 1<16>
	SZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v24 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v24
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	v25 = Mem0[ss:bp - 10<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v25
	call fn1825_6E18 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	cx = 0x16<16>
	dx_ax = cx *u32 ax
	SCZO = cond(dx_ax)
	si = ax
	es_bx = Mem0[ds:0x1282<16>:segptr32]
	v28 = Mem0[es:bx + 20<i16> + si:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v28
	v29 = Mem0[es:bx + 18<i16> + si:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v29
	call fn2BC7_050A (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 8<i16>:word16] = ax
	Mem0[ss:bp - 6<i16>:word16] = dx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn2017_03F5 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v31 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v31
	v32 = Mem0[ss:bp - 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v32
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	v33 = Mem0[ss:bp - 10<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v33
	call fn1825_6E18 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	SCZO = cond(ax - Mem0[ds:0x128A<16>:word16])
	branch Test(NE,Z) l1825_591A
	// succ:  l1825_5915 l1825_591A
l1825_5915:
	ax = Mem0[ds:0x127A<16>:word16]
	goto l1825_5933
	// succ:  l1825_5933
l1825_591A:
	v44 = Mem0[ss:bp - 10<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v44
	call fn1825_6E18 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	cx = 0x16<16>
	dx_ax = cx *u32 ax
	SCZO = cond(dx_ax)
	si = ax
	es_bx = Mem0[ds:0x1282<16>:segptr32]
	ax = Mem0[es:bx + 2<i16> + si:word16]
	// succ:  l1825_5933
l1825_5933:
	Mem0[ss:bp - 2<i16>:word16] = ax
	es_bx = Mem0[ss:bp + 14<i16>:segptr32]
	ax = Mem0[es:bx + 22<i16>:word16]
	ax = ax + 0xF<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v39 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v39
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = 5<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v40 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v40
	call fn1825_63F8 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	v41 = Mem0[ss:bp - 10<i16>:word16] + 1<16>
	Mem0[ss:bp - 10<i16>:word16] = v41
	SZO = cond(v41)
	v42 = Mem0[ss:bp - 4<i16>:word16] + 1<16>
	Mem0[ss:bp - 4<i16>:word16] = v42
	SZO = cond(v42)
	es_bx = Mem0[ss:bp + 14<i16>:segptr32]
	v43 = Mem0[es:bx + 20<i16>:word16] + 1<16>
	Mem0[es:bx + 20<i16>:word16] = v43
	SZO = cond(v43)
	// succ:  l1825_5967
l1825_5967:
	ax = Mem0[ss:bp - 10<i16>:word16]
	SCZO = cond(Mem0[es:bx + 16<i16>:word16] - ax)
	branch Test(ULT,C) l1825_5973
	// succ:  l1825_5970 l1825_5973
l1825_5970:
	goto l1825_58A4
	// succ:  l1825_58A4
l1825_5973:
	ax = Mem0[es:bx + 14<i16>:word16]
	SCZO = cond(Mem0[es:bx + 18<i16>:word16] - ax)
	branch Test(ULE,CZ) l1825_5982
	// succ:  l1825_597D l1825_5982
l1825_597D:
	ax = 1<16>
	goto l1825_5984
	// succ:  l1825_5984
l1825_5982:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l1825_5984
l1825_5984:
	Mem0[es:bx + 6<i16>:word16] = ax
	ax = Mem0[ss:bp - 4<i16>:word16]
	SCZO = cond(Mem0[es:bx + 28<i16>:word16] - ax)
	branch Test(UGE,C) l1825_59A0
	// succ:  l1825_5991 l1825_59A0
l1825_5991:
	ax = Mem0[ss:bp - 10<i16>:word16]
	SCZO = cond(Mem0[es:bx + 16<i16>:word16] - ax)
	branch Test(ULT,C) l1825_59A0
	// succ:  l1825_599A l1825_59A0
l1825_599A:
	ax = 1<16>
	goto l1825_59A2
	// succ:  l1825_59A2
l1825_59A0:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l1825_59A2
l1825_59A2:
	Mem0[es:bx + 8<i16>:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = es
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bx
	ax = 0x16<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v35 = Mem0[ss:bp + 12<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v35
	v36 = Mem0[ss:bp + 10<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v36
	v37 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v37
	v38 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v38
	call fn1825_675E (retsize: 4;)
	sp = sp + 0xE<16>
	SCZO = cond(sp)
	es_bx = Mem0[ss:bp + 14<i16>:segptr32]
	Mem0[es:bx:word16] = 0<16>
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_5850_exit
fn1825_5850_exit:


// fn1825_59CC
// Return size: 4
define fn1825_59CC
fn1825_59CC_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l1825_59CC
l1825_59CC:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	v8 = Mem0[ss:bp + 10<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v8
	call fn1825_6E18 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	v9 = Mem0[ss:bp + 10<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v9
	si = ax
	call fn1825_6E58 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	ax = ax - si
	SCZO = cond(ax)
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	Mem0[es:bx + 16<i16>:word16] = ax
	Mem0[ss:bp - 2<i16>:word16] = 0<16>
	// succ:  l1825_59F7
l1825_59F7:
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	SCZO = cond(Mem0[es:bx:word16] - 0<16>)
	branch Test(NE,Z) l1825_5A0A
	// succ:  l1825_5A00 l1825_5A0A
l1825_5A00:
	SCZO = cond(Mem0[es:bx + 2<i16>:word16] - 0<16>)
	branch Test(NE,Z) l1825_5A0A
	// succ:  l1825_5A07 l1825_5A0A
l1825_5A07:
	goto l1825_5A9E
	// succ:  l1825_5A9E
l1825_5A0A:
	ax = 0xA5E<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v16 = Mem0[ss:bp + 20<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v16
	v17 = Mem0[ss:bp + 18<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v17
	v18 = Mem0[ss:bp + 16<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v18
	v19 = Mem0[ss:bp + 14<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v19
	call fn1F38_05DB (retsize: 4;)
	sp = sp + 0xC<16>
	SCZO = cond(sp)
	SCZO = cond(Mem0[ss:bp + 12<i16>:word16] - 1<16>)
	branch Test(NE,Z) l1825_5A2E
	// succ:  l1825_5A29 l1825_5A2E
l1825_5A29:
	ax = 0xA36<16>
	goto l1825_5A31
	// succ:  l1825_5A31
l1825_5A2E:
	ax = 0xA2C<16>
	// succ:  l1825_5A31
l1825_5A31:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v20 = Mem0[ss:bp + 20<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v20
	v21 = Mem0[ss:bp + 18<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v21
	v22 = Mem0[ss:bp + 16<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v22
	v23 = Mem0[ss:bp + 14<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v23
	call fn1F38_05DB (retsize: 4;)
	sp = sp + 0xC<16>
	SCZO = cond(sp)
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	v24 = Mem0[es:bx + 22<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v24
	ax = Mem0[ss:bp + 14<i16>:word16]
	ax = ax + 1<16>
	SZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = 0x19<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x5A36<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	SCZO = cond(Mem0[es:bx + 16<i16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_5A9E
	// succ:  l1825_5A76 l1825_5A9E
l1825_5A76:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = es
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bx
	v26 = Mem0[ss:bp + 10<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v26
	call fn1825_6E18 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v27 = Mem0[ss:bp + 20<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v27
	v28 = Mem0[ss:bp + 18<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v28
	v29 = Mem0[ss:bp + 16<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v29
	v30 = Mem0[ss:bp + 14<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v30
	call fn1825_5B30 (retsize: 4;)
	sp = sp + 0xE<16>
	SCZO = cond(sp)
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	Mem0[es:bx:word16] = 0<16>
	// succ:  l1825_5A9E
l1825_5A9E:
	SCZO = cond(Mem0[ss:bp + 12<i16>:word16] - 1<16>)
	branch Test(NE,Z) l1825_5ADE
	// succ:  l1825_5AA4 l1825_5ADE
l1825_5AA4:
	Mem0[es:bx + 2<i16>:word16] = 0<16>
	ax = 1<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = es
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bx
	call fn1825_67EE (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	SCZO = cond(Mem0[es:bx + 4<i16>:word16] - 0<16>)
	branch Test(NE,Z) l1825_5AD0
	// succ:  l1825_5AC1 l1825_5AD0
l1825_5AC1:
	SCZO = cond(Mem0[es:bx + 10<i16>:word16] - 0xBB8<16>)
	branch Test(EQ,Z) l1825_5AD0
	// succ:  l1825_5AC9 l1825_5AD0
l1825_5AC9:
	SCZO = cond(Mem0[es:bx + 10<i16>:word16] - 7<16>)
	branch Test(NE,Z) l1825_5AD6
	// succ:  l1825_5AD0 l1825_5AD6
l1825_5AD0:
	ax = 1<16>
	goto l1825_5AD8
	// succ:  l1825_5AD8
l1825_5AD6:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l1825_5AD8
l1825_5AD8:
	Mem0[ss:bp - 2<i16>:word16] = ax
	goto l1825_5AE3
	// succ:  l1825_5AE3
l1825_5ADE:
	Mem0[ss:bp - 2<i16>:word16] = 1<16>
	// succ:  l1825_5AE3
l1825_5AE3:
	SCZO = cond(Mem0[ss:bp - 2<i16>:word16] - 0<16>)
	branch Test(NE,Z) l1825_5AEC
	// succ:  l1825_5AE9 l1825_5AEC
l1825_5AE9:
	goto l1825_59F7
	// succ:  l1825_59F7
l1825_5AEC:
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	Mem0[es:bx:word16] = 1<16>
	ax = 0xA2C<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v31 = Mem0[ss:bp + 20<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v31
	v32 = Mem0[ss:bp + 18<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v32
	v33 = Mem0[ss:bp + 16<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v33
	v34 = Mem0[ss:bp + 14<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v34
	call fn1F38_05DB (retsize: 4;)
	sp = sp + 0xC<16>
	SCZO = cond(sp)
	v35 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v35
	v36 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v36
	ax = 0x3C<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v37 = Mem0[ss:bp + 20<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v37
	v38 = Mem0[ss:bp + 18<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v38
	v39 = Mem0[ss:bp + 16<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v39
	v40 = Mem0[ss:bp + 14<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v40
	call fn1825_675E (retsize: 4;)
	sp = sp + 0xE<16>
	SCZO = cond(sp)
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_59CC_exit
fn1825_59CC_exit:


// fn1825_5B30
// Return size: 4
define fn1825_5B30
fn1825_5B30_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l1825_5B30
l1825_5B30:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 4<16>
	SCZO = cond(sp)
	es_bx = Mem0[ss:bp + 16<i16>:segptr32]
	ax = Mem0[es:bx + 18<i16>:word16]
	Mem0[ss:bp - 4<i16>:word16] = ax
	ax = Mem0[es:bx + 26<i16>:word16]
	Mem0[ss:bp - 2<i16>:word16] = ax
	Mem0[es:bx + 20<i16>:word16] = 0<16>
	goto l1825_5B81
	// succ:  l1825_5B81
l1825_5B50:
	ax = Mem0[ss:bp - 2<i16>:word16]
	SCZO = cond(Mem0[es:bx + 28<i16>:word16] - ax)
	branch Test(ULT,C) l1825_5B8A
	// succ:  l1825_5B59 l1825_5B8A
l1825_5B59:
	v13 = Mem0[es:bx + 22<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v13
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = Mem0[ss:bp + 14<i16>:word16]
	ax = ax + Mem0[ss:bp - 4<i16>:word16]
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1825_5E5C (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	v14 = Mem0[ss:bp - 4<i16>:word16] + 1<16>
	Mem0[ss:bp - 4<i16>:word16] = v14
	SZO = cond(v14)
	v16 = Mem0[ss:bp - 2<i16>:word16] + 1<16>
	Mem0[ss:bp - 2<i16>:word16] = v16
	SZO = cond(v16)
	es_bx = Mem0[ss:bp + 16<i16>:segptr32]
	v17 = Mem0[es:bx + 20<i16>:word16] + 1<16>
	Mem0[es:bx + 20<i16>:word16] = v17
	SZO = cond(v17)
	// succ:  l1825_5B81
l1825_5B81:
	ax = Mem0[ss:bp - 4<i16>:word16]
	SCZO = cond(Mem0[es:bx + 16<i16>:word16] - ax)
	branch Test(UGE,C) l1825_5B50
	// succ:  l1825_5B8A l1825_5B50
l1825_5B8A:
	ax = Mem0[es:bx + 14<i16>:word16]
	SCZO = cond(Mem0[es:bx + 18<i16>:word16] - ax)
	branch Test(ULE,CZ) l1825_5B9A
	// succ:  l1825_5B94 l1825_5B9A
l1825_5B94:
	ax = 1<16>
	goto l1825_5B9C
	// succ:  l1825_5B9C
l1825_5B9A:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l1825_5B9C
l1825_5B9C:
	Mem0[es:bx + 6<i16>:word16] = ax
	ax = Mem0[ss:bp - 2<i16>:word16]
	SCZO = cond(Mem0[es:bx + 28<i16>:word16] - ax)
	branch Test(UGE,C) l1825_5BB8
	// succ:  l1825_5BA9 l1825_5BB8
l1825_5BA9:
	ax = Mem0[ss:bp - 4<i16>:word16]
	SCZO = cond(Mem0[es:bx + 16<i16>:word16] - ax)
	branch Test(ULT,C) l1825_5BB8
	// succ:  l1825_5BB2 l1825_5BB8
l1825_5BB2:
	ax = 1<16>
	goto l1825_5BBA
	// succ:  l1825_5BBA
l1825_5BB8:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l1825_5BBA
l1825_5BBA:
	Mem0[es:bx + 8<i16>:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = es
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bx
	ax = 0x3C<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v18 = Mem0[ss:bp + 12<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v18
	v19 = Mem0[ss:bp + 10<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v19
	v20 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v20
	v21 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v21
	call fn1825_675E (retsize: 4;)
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_5B30_exit
fn1825_5B30_exit:


// fn1825_5BD8
// Return size: 4
define fn1825_5BD8
fn1825_5BD8_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l1825_5BD8
l1825_5BD8:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0xA<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 6<i16>:word16] = 2<16>
	Mem0[ss:bp - 10<i16>:word16] = 4<16>
	Mem0[ss:bp - 4<i16>:word16] = 0x15<16>
	Mem0[ss:bp - 2<i16>:word16] = 0x40<16>
	SCZO = cond(Mem0[ds:0x982<16>:word16] - 0<16>)
	branch Test(NE,Z) l1825_5C52
	// succ:  l1825_5BF9 l1825_5C52
l1825_5BF9:
	Mem0[ds:0x980<16>:word16] = 1<16>
	Mem0[ds:0x982<16>:word16] = 0<16>
	Mem0[ds:0x984<16>:word16] = 0<16>
	Mem0[ds:0x986<16>:word16] = 0<16>
	Mem0[ds:0x988<16>:word16] = 0<16>
	ax = Mem0[ds:0x128C<16>:word16]
	Mem0[ds:0x98C<16>:word16] = ax
	Mem0[ds:0x98E<16>:word16] = ax
	ax = Mem0[ds:0x1286<16>:word16]
	ax = ax - 1<16>
	SZO = cond(ax)
	Mem0[ds:0x990<16>:word16] = ax
	ax = Mem0[ds:0x128C<16>:word16]
	Mem0[ds:0x992<16>:word16] = ax
	Mem0[ds:0x994<16>:word16] = 0<16>
	Mem0[ds:0x99A<16>:word16] = 4<16>
	ax = Mem0[ss:bp - 4<i16>:word16]
	ax = ax - 1<16>
	SZO = cond(ax)
	Mem0[ds:0x99C<16>:word16] = ax
	ax = Mem0[ds:0x99A<16>:word16]
	Mem0[ds:0x998<16>:word16] = ax
	Mem0[ds:0x996<16>:word16] = 6<16>
	Mem0[ds:0x99E<16>:word16] = 0x11<16>
	// succ:  l1825_5C52
l1825_5C52:
	Mem0[ds:0x98A<16>:word16] = 1<16>
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_0527 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	ax = 0xA5E<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v11 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v11
	v12 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v12
	v13 = Mem0[ss:bp - 10<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v13
	v14 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v14
	call fn1F38_05DB (retsize: 4;)
	sp = sp + 0xC<16>
	SCZO = cond(sp)
	ax = 0xA36<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v15 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v15
	v16 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v16
	v17 = Mem0[ss:bp - 10<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v17
	v18 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v18
	call fn1F38_05DB (retsize: 4;)
	sp = sp + 0xC<16>
	SCZO = cond(sp)
	ax = Mem0[ds:0x1286<16>:word16]
	ax = ax - 1<16>
	SZO = cond(ax)
	SCZO = cond(ax - Mem0[ds:0x128C<16>:word16])
	branch Test(UGE,C) l1825_5CA4
	// succ:  l1825_5C9F l1825_5CA4
l1825_5C9F:
	ax = 1<16>
	goto l1825_5CA6
	// succ:  l1825_5CA6
l1825_5CA4:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l1825_5CA6
l1825_5CA6:
	Mem0[ss:bp - 8<i16>:word16] = ax
	goto l1825_5D4E
	// succ:  l1825_5D4E
l1825_5CAC:
	ax = 0xA5E<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v21 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v21
	v22 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v22
	v23 = Mem0[ss:bp - 10<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v23
	v24 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v24
	call fn1F38_05DB (retsize: 4;)
	sp = sp + 0xC<16>
	SCZO = cond(sp)
	ax = 0xA36<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v25 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v25
	v26 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v26
	v27 = Mem0[ss:bp - 10<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v27
	v28 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v28
	call fn1F38_05DB (retsize: 4;)
	sp = sp + 0xC<16>
	SCZO = cond(sp)
	v29 = Mem0[ds:0x996<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v29
	ax = Mem0[ss:bp - 6<i16>:word16]
	ax = ax + 1<16>
	SZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = 0x19<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x5A50<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	ax = 0x980<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v30 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v30
	v31 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v31
	v32 = Mem0[ss:bp - 10<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v32
	v33 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v33
	call fn1825_5DB0 (retsize: 4;)
	sp = sp + 0xC<16>
	SCZO = cond(sp)
	ax = 1<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x980<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1825_67EE (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	SCZO = cond(Mem0[ds:0x984<16>:word16] - 0<16>)
	branch Test(NE,Z) l1825_5D37
	// succ:  l1825_5D2F l1825_5D37
l1825_5D2F:
	SCZO = cond(Mem0[ds:0x98A<16>:word16] - 0xBB8<16>)
	branch Test(NE,Z) l1825_5D3C
	// succ:  l1825_5D37 l1825_5D3C
l1825_5D37:
	ax = 1<16>
	goto l1825_5D3E
	// succ:  l1825_5D3E
l1825_5D3C:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l1825_5D3E
l1825_5D3E:
	Mem0[ss:bp - 8<i16>:word16] = ax
	SCZO = cond(Mem0[ds:0x984<16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_5D4E
	// succ:  l1825_5D48 l1825_5D4E
l1825_5D48:
	Mem0[ds:0x982<16>:word16] = 0<16>
	// succ:  l1825_5D4E
l1825_5D4E:
	SCZO = cond(Mem0[ss:bp - 8<i16>:word16] - 0<16>)
	branch Test(NE,Z) l1825_5D57
	// succ:  l1825_5D54 l1825_5D57
l1825_5D54:
	goto l1825_5CAC
	// succ:  l1825_5CAC
l1825_5D57:
	ax = Mem0[ds:0x1286<16>:word16]
	ax = ax - 1<16>
	SZO = cond(ax)
	SCZO = cond(ax - Mem0[ds:0x128C<16>:word16])
	branch Test(UGE,C) l1825_5DA0
	// succ:  l1825_5D61 l1825_5DA0
l1825_5D61:
	call fn1F38_07FA (retsize: 4;)
	ax = Mem0[ss:bp - 10<i16>:word16]
	ax = ax + 0x1A<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v20 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v20
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = 9<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x5A6A<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 8<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn3431_07B6 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	Mem0[ds:0x98A<16>:word16] = ax
	call fn1F38_07E7 (retsize: 4;)
	// succ:  l1825_5DA0
l1825_5DA0:
	ax = 1<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_0527 (retsize: 4;)
	ax = 1<16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_5BD8_exit
fn1825_5BD8_exit:


// fn1825_5DB0
// Return size: 4
define fn1825_5DB0
fn1825_5DB0_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l1825_5DB0
l1825_5DB0:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 4<16>
	SCZO = cond(sp)
	es_bx = Mem0[ss:bp + 14<i16>:segptr32]
	ax = Mem0[es:bx + 18<i16>:word16]
	Mem0[ss:bp - 4<i16>:word16] = ax
	ax = Mem0[es:bx + 26<i16>:word16]
	Mem0[ss:bp - 2<i16>:word16] = ax
	Mem0[es:bx + 20<i16>:word16] = 0<16>
	goto l1825_5DFD
	// succ:  l1825_5DFD
l1825_5DD0:
	ax = Mem0[ss:bp - 2<i16>:word16]
	SCZO = cond(Mem0[es:bx + 28<i16>:word16] - ax)
	branch Test(ULT,C) l1825_5E06
	// succ:  l1825_5DD9 l1825_5E06
l1825_5DD9:
	v13 = Mem0[es:bx + 22<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v13
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	v14 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v14
	call fn1825_5E5C (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	v15 = Mem0[ss:bp - 4<i16>:word16] + 1<16>
	Mem0[ss:bp - 4<i16>:word16] = v15
	SZO = cond(v15)
	v17 = Mem0[ss:bp - 2<i16>:word16] + 1<16>
	Mem0[ss:bp - 2<i16>:word16] = v17
	SZO = cond(v17)
	es_bx = Mem0[ss:bp + 14<i16>:segptr32]
	v18 = Mem0[es:bx + 20<i16>:word16] + 1<16>
	Mem0[es:bx + 20<i16>:word16] = v18
	SZO = cond(v18)
	// succ:  l1825_5DFD
l1825_5DFD:
	ax = Mem0[ss:bp - 4<i16>:word16]
	SCZO = cond(Mem0[es:bx + 16<i16>:word16] - ax)
	branch Test(UGE,C) l1825_5DD0
	// succ:  l1825_5E06 l1825_5DD0
l1825_5E06:
	ax = Mem0[es:bx + 14<i16>:word16]
	SCZO = cond(Mem0[es:bx + 18<i16>:word16] - ax)
	branch Test(ULE,CZ) l1825_5E16
	// succ:  l1825_5E10 l1825_5E16
l1825_5E10:
	ax = 1<16>
	goto l1825_5E18
	// succ:  l1825_5E18
l1825_5E16:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l1825_5E18
l1825_5E18:
	Mem0[es:bx + 6<i16>:word16] = ax
	ax = Mem0[ss:bp - 2<i16>:word16]
	SCZO = cond(Mem0[es:bx + 28<i16>:word16] - ax)
	branch Test(UGE,C) l1825_5E34
	// succ:  l1825_5E25 l1825_5E34
l1825_5E25:
	ax = Mem0[ss:bp - 4<i16>:word16]
	SCZO = cond(Mem0[es:bx + 16<i16>:word16] - ax)
	branch Test(ULT,C) l1825_5E34
	// succ:  l1825_5E2E l1825_5E34
l1825_5E2E:
	ax = 1<16>
	goto l1825_5E36
	// succ:  l1825_5E36
l1825_5E34:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l1825_5E36
l1825_5E36:
	Mem0[es:bx + 8<i16>:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = es
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bx
	ax = 0x3C<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v19 = Mem0[ss:bp + 12<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v19
	v20 = Mem0[ss:bp + 10<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v20
	v21 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v21
	v22 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v22
	call fn1825_675E (retsize: 4;)
	es_bx = Mem0[ss:bp + 14<i16>:segptr32]
	Mem0[es:bx:word16] = 0<16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_5DB0_exit
fn1825_5DB0_exit:


// fn1825_5E5C
// Return size: 4
define fn1825_5E5C
fn1825_5E5C_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l1825_5E5C
l1825_5E5C:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 8<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	call fn1F38_0517 (retsize: 4;)
	ah = ah - ah
	SCZO = cond(ah)
	Mem0[ss:bp - 6<i16>:word16] = ax
	ax = 0x16<16>
	dx_ax = Mem0[ss:bp + 6<i16>:word16] *u32 ax
	SCZO = cond(dx_ax)
	si = ax
	es_bx = Mem0[ds:0x1282<16>:segptr32]
	ax = Mem0[es:bx + 18<i16> + si:word16]
	dx = Mem0[es:bx + 20<i16> + si:word16]
	Mem0[ss:bp - 4<i16>:word16] = ax
	Mem0[ss:bp - 2<i16>:word16] = dx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn2BC7_050A (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn2017_01BA (retsize: 4;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn2017_03F5 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 8<i16>:word16] = ax
	ax = ax - 0xA<16>
	SCZO = cond(ax)
	cx = cx - cx - C
	SCZO = cond(cx)
	ax = ax & cx
	SZ = cond(ax)
	O = false
	C = false
	ax = ax + 0xA<16>
	SCZO = cond(ax)
	Mem0[ss:bp - 8<i16>:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	ax = Mem0[ds:0x1282<16>:word16]
	dx = Mem0[ds:0x1284<16>:word16]
	ax = ax + si
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn2368_04F4 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = Mem0[ss:bp - 6<i16>:word16]
	ax = ax + 0xC<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_0517 (retsize: 4;)
	al = ah
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	es_bx = Mem0[ds:0x1282<16>:segptr32]
	v21 = Mem0[es:bx + si:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v21
	call fn1825_62F6 (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 8<i16>:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	ax = Mem0[ss:bp - 6<i16>:word16]
	ax = ax + 0x12<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_0517 (retsize: 4;)
	al = ah
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1825_6168 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 8<i16>:word16] = ax
	ax = ax - 0x20<16>
	SCZO = cond(ax)
	cx = cx - cx - C
	SCZO = cond(cx)
	ax = ax & cx
	SZ = cond(ax)
	O = false
	C = false
	ax = ax + 0x20<16>
	SCZO = cond(ax)
	Mem0[ss:bp - 8<i16>:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	call fn2368_033C (retsize: 4;)
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_5E5C_exit
fn1825_5E5C_exit:


// fn1825_5F68
// Return size: 4
define fn1825_5F68
fn1825_5F68_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l1825_5F68
l1825_5F68:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	ax = Mem0[ds:0x127A<16>:word16]
	SCZO = cond(Mem0[ss:bp + 6<i16>:word16] - ax)
	branch Test(NE,Z) l1825_5F78
	// succ:  l1825_5F73 l1825_5F78
l1825_5F73:
	ax = 1<16>
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_5F68_exit
l1825_5F78:
	ax = ax - ax
	SCZO = cond(ax)
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_5F68_exit
fn1825_5F68_exit:


// fn1825_5F7C
// Return size: 4
define fn1825_5F7C
fn1825_5F7C_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l1825_5F7C
l1825_5F7C:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 4<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	v8 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v8
	v9 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v9
	call fn2BC7_0494 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 4<i16>:word16] = ax
	Mem0[ss:bp - 2<i16>:word16] = dx
	ax = ax | dx
	SZ = cond(ax)
	O = false
	C = false
	branch Test(EQ,Z) l1825_5FBA
	// succ:  l1825_5F9B l1825_5FBA
l1825_5F9B:
	ax = 0x16<16>
	dx_ax = Mem0[ds:0x128A<16>:word16] *u32 ax
	SCZO = cond(dx_ax)
	si = ax
	es_bx = Mem0[ds:0x1282<16>:segptr32]
	ax = Mem0[ss:bp - 4<i16>:word16]
	dx = Mem0[ss:bp - 2<i16>:word16]
	SCZO = cond(Mem0[es:bx + 18<i16> + si:word16] - ax)
	branch Test(NE,Z) l1825_5FC2
	// succ:  l1825_5FB4 l1825_5FC2
l1825_5FB4:
	SCZO = cond(Mem0[es:bx + 20<i16> + si:word16] - dx)
	branch Test(NE,Z) l1825_5FC2
	// succ:  l1825_5FBA l1825_5FC2
l1825_5FBA:
	ax = 1<16>
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_5F7C_exit
l1825_5FC2:
	ax = ax - ax
	SCZO = cond(ax)
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_5F7C_exit
fn1825_5F7C_exit:


// fn1825_5FCA
// Return size: 4
define fn1825_5FCA
fn1825_5FCA_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l1825_5FCA
l1825_5FCA:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 2<i16>:word16] = 0<16>
	ax = 0xC08<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v9 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v9
	v10 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v10
	call fn1825_6042 (retsize: 4;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	SCZO = cond(Mem0[ds:0xC08<16>:byte] - 0x4C<8>)
	branch Test(NE,Z) l1825_5FF3
	// succ:  l1825_5FEE l1825_5FF3
l1825_5FEE:
	Mem0[ss:bp - 2<i16>:word16] = 1<16>
	// succ:  l1825_5FF3
l1825_5FF3:
	SCZO = cond(Mem0[ss:bp - 2<i16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_603A
	// succ:  l1825_5FF9 l1825_603A
l1825_5FF9:
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v12 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v12
	v13 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v13
	call fn2368_022E (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	Mem0[ds:0xEE2<16>:word16] = 0<16>
	call fn31FF_1D44 (retsize: 4;)
	Mem0[ds:0xEE2<16>:word16] = 1<16>
	es_bx = Mem0[ds:0x1296<16>:segptr32]
	SCZO = cond(Mem0[es:bx:word16] - 0x80<16>)
	branch Test(NE,Z) l1825_6030
	// succ:  l1825_6026 l1825_6030
l1825_6026:
	ax = Mem0[es:bx + 8<i16>:word16]
	Mem0[ss:bp - 2<i16>:word16] = ax
	goto l1825_6035
	// succ:  l1825_6035
l1825_6030:
	Mem0[ss:bp - 2<i16>:word16] = 0<16>
	// succ:  l1825_6035
l1825_6035:
	call fn2368_033C (retsize: 4;)
	// succ:  l1825_603A
l1825_603A:
	ax = Mem0[ss:bp - 2<i16>:word16]
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_5FCA_exit
fn1825_5FCA_exit:


// fn1825_6042
// Return size: 4
define fn1825_6042
fn1825_6042_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l1825_6042
l1825_6042:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2<16>
	SCZO = cond(sp)
	v7 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v7
	v8 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v8
	call fn2017_03F5 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v10 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v10
	v11 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v11
	call fn31FF_207C (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 2<i16>:word16] = ax
	v12 = Mem0[ss:bp + 12<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v12
	v13 = Mem0[ss:bp + 10<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v13
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1825_62F6 (retsize: 4;)
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_6042_exit
fn1825_6042_exit:


// fn1825_6078
// Return size: 4
define fn1825_6078
fn1825_6078_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l1825_6078
l1825_6078:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 8<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 4<i16>:word16] = 1<16>
	call fn1F38_0517 (retsize: 4;)
	al = ah
	ah = ah - ah
	SCZO = cond(ah)
	Mem0[ss:bp - 2<i16>:word16] = ax
	call fn1F38_0517 (retsize: 4;)
	ah = ah - ah
	SCZO = cond(ah)
	Mem0[ss:bp - 6<i16>:word16] = ax
	Mem0[ds:0xC08<16>:byte] = ah
	call fn1825_7106 (retsize: 4;)
	v11 = Mem0[ds:0xC0E<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v11
	v12 = Mem0[ds:0xC0C<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v12
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	Mem0[ds:0xEE2<16>:word16] = 0<16>
	SCZO = cond(Mem0[ss:bp + 14<i16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_6114
	// succ:  l1825_60BD l1825_6114
l1825_60BD:
	ax = 0xC08<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v14 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v14
	v15 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v15
	call fn1825_6042 (retsize: 4;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	SCZO = cond(Mem0[ds:0xC08<16>:byte] - 0x55<8>)
	branch Test(NE,Z) l1825_6114
	// succ:  l1825_60D6 l1825_6114
l1825_60D6:
	SCZO = cond(Mem0[ds:0xC09<16>:byte] - 0x49<8>)
	branch Test(EQ,Z) l1825_6114
	// succ:  l1825_60DD l1825_6114
l1825_60DD:
	Mem0[ss:bp - 4<i16>:word16] = 0<16>
	SCZO = cond(Mem0[ds:0xC09<16>:byte] - 0x45<8>)
	branch Test(NE,Z) l1825_60F8
	// succ:  l1825_60E9 l1825_60F8
l1825_60E9:
	Mem0[ss:bp - 8<i16>:word16] = 0x10<16>
	ax = 0x11<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x5A74<16>
	goto l1825_6104
	// succ:  l1825_6104
l1825_60F8:
	Mem0[ss:bp - 8<i16>:word16] = 0xB<16>
	ax = 0xC<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x5A86<16>
	// succ:  l1825_6104
l1825_6104:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v20 = Mem0[ss:bp + 12<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v20
	v21 = Mem0[ss:bp + 10<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v21
	call fn2017_02EC (retsize: 4;)
	sp = sp + 0xA<16>
	SCZO = cond(sp)
	// succ:  l1825_6114
l1825_6114:
	SCZO = cond(Mem0[ss:bp - 4<i16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_6145
	// succ:  l1825_611A l1825_6145
l1825_611A:
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v16 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v16
	v17 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v17
	call fn2368_022E (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	call fn31FF_1D44 (retsize: 4;)
	v18 = Mem0[ss:bp + 12<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v18
	v19 = Mem0[ss:bp + 10<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v19
	call fn1825_6168 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 8<i16>:word16] = ax
	call fn2368_033C (retsize: 4;)
	// succ:  l1825_6145
l1825_6145:
	Mem0[ds:0xEE2<16>:word16] = 1<16>
	v22 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v22
	v23 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v23
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	v24 = Mem0[ds:0xEE6<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v24
	call fn1825_7078 (retsize: 4;)
	ax = Mem0[ss:bp - 8<i16>:word16]
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_6078_exit
fn1825_6078_exit:


// fn1825_6168
// Return size: 4
define fn1825_6168
fn1825_6168_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l1825_6168
l1825_6168:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	Mem0[es:bx:byte] = 0<8>
	es_bx = Mem0[ds:0x1296<16>:segptr32]
	ax = Mem0[es:bx:word16]
	SCZO = cond(ax - 8<16>)
	branch Test(NE,Z) l1825_6185
	// succ:  l1825_6182 l1825_6185
l1825_6182:
	goto l1825_621C
	// succ:  l1825_621C
l1825_6185:
	branch Test(LE,SZO) l1825_618A
	// succ:  l1825_6187 l1825_618A
l1825_6187:
	goto l1825_62CE
	// succ:  l1825_62CE
l1825_618A:
	ax = ax - 0xFFFD<16>
	SCZO = cond(ax)
	v38 = ax
	SCZO = cond(ax - 5<16>)
	branch Test(ULE,CZ) l1825_6195
	// succ:  l1825_6192 l1825_6195
l1825_6192:
	goto l1825_62EF
	// succ:  l1825_62EF
l1825_6195:
	ax = ax + ax
	SCZO = cond(ax)
	v37 = bx
	bx = ax
	ax = v37
	switch (v38) { l1825_62B6 l1825_62BC l1825_62EF l1825_62EF l1825_62EF l1825_61E8 }
	// succ:  l1825_62B6 l1825_62BC l1825_62EF l1825_62EF l1825_62EF l1825_61E8
l1825_619E:
	es_bx = Mem0[ds:0x1296<16>:segptr32]
	ax = Mem0[es:bx + 2<i16>:word16]
	ax = ax - 0x7F<16>
	SCZO = cond(ax)
	cx = cx - cx - C
	SCZO = cond(cx)
	ax = ax & cx
	SZ = cond(ax)
	O = false
	C = false
	ax = ax + 0x7F<16>
	SCZO = cond(ax)
	Mem0[ss:bp - 2<i16>:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v32 = Mem0[es:bx + 10<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v32
	v33 = Mem0[es:bx + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v33
	v34 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v34
	v35 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v35
	call fn2017_02EC (retsize: 4;)
	sp = sp + 0xA<16>
	SCZO = cond(sp)
	bx = Mem0[ss:bp - 2<i16>:word16]
	es_si = Mem0[ss:bp + 6<i16>:segptr32]
	Mem0[es:bx + si:byte] = 0<8>
	// succ:  l1825_61D4
l1825_61D4:
	v25 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v25
	v26 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v26
	call fn2017_03F5 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_6168_exit
l1825_61E8:
	v39 = Mem0[ds:0x1298<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v39
	v40 = Mem0[ds:0x1296<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v40
	call fn38D6_0008 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	es_bx = Mem0[ds:0x1296<16>:segptr32]
	v41 = Mem0[es:bx + 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v41
	v42 = Mem0[es:bx + 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v42
	v43 = Mem0[es:bx + 10<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v43
	v44 = Mem0[es:bx + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v44
	v45 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v45
	v46 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v46
	call fn3CEE_0EFC (retsize: 4;)
	sp = sp + 0xC<16>
	SCZO = cond(sp)
	goto l1825_61D4
	// succ:  l1825_61D4
l1825_621C:
	v15 = Mem0[ds:0x1298<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v15
	v16 = Mem0[ds:0x1296<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v16
	call fn38D6_0008 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	v17 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v17
	v18 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v18
	es_bx = Mem0[ds:0x1296<16>:segptr32]
	v19 = Mem0[es:bx + 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v19
	v20 = Mem0[es:bx + 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v20
	v21 = Mem0[es:bx + 14<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v21
	v22 = Mem0[es:bx + 12<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v22
	v23 = Mem0[es:bx + 10<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v23
	v24 = Mem0[es:bx + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v24
	call fn3CEE_0DA8 (retsize: 4;)
	sp = sp + 0x10<16>
	SCZO = cond(sp)
	goto l1825_61D4
	// succ:  l1825_61D4
l1825_625A:
	es_bx = Mem0[ds:0x1296<16>:segptr32]
	SCZO = cond(Mem0[es:bx + 8<i16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_627C
	// succ:  l1825_6265 l1825_627C
l1825_6265:
	ax = 0x5A92<16>
	// succ:  l1825_6268
l1825_6268:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v47 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v47
	v48 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v48
	call fn2017_01BA (retsize: 4;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	goto l1825_61D4
	// succ:  l1825_61D4
l1825_627C:
	ax = 0x5A96<16>
	goto l1825_6268
	// succ:  l1825_6268
l1825_6282:
	v49 = Mem0[ds:0x128E<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v49
	es_bx = Mem0[ds:0x1296<16>:segptr32]
	v50 = Mem0[es:bx + 10<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v50
	v51 = Mem0[es:bx + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v51
	v52 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v52
	v53 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v53
	call fn38D6_06FA (retsize: 4;)
	sp = sp + 0xA<16>
	SCZO = cond(sp)
	goto l1825_61D4
	// succ:  l1825_61D4
l1825_62A4:
	ax = 0x5A9A<16>
	goto l1825_6268
	// succ:  l1825_6268
l1825_62AA:
	ax = 0x5A9C<16>
	goto l1825_6268
	// succ:  l1825_6268
l1825_62B0:
	ax = 0x5A9E<16>
	goto l1825_6268
	// succ:  l1825_6268
l1825_62B6:
	ax = 0x5AA0<16>
	goto l1825_6268
	// succ:  l1825_6268
l1825_62BC:
	ax = 0x5AB2<16>
	goto l1825_6268
	// succ:  l1825_6268
l1825_62CE:
	SCZO = cond(ax - 0x20<16>)
	branch Test(EQ,Z) l1825_6282
	// succ:  l1825_62D3 l1825_6282
l1825_62D3:
	SCZO = cond(ax - 0x80<16>)
	branch Test(EQ,Z) l1825_625A
	// succ:  l1825_62D8 l1825_625A
l1825_62D8:
	SCZO = cond(ax - 0x100<16>)
	branch Test(NE,Z) l1825_62E0
	// succ:  l1825_62DD l1825_62E0
l1825_62DD:
	goto l1825_619E
	// succ:  l1825_619E
l1825_62E0:
	SCZO = cond(ax - 0x300<16>)
	branch Test(EQ,Z) l1825_62A4
	// succ:  l1825_62E5 l1825_62A4
l1825_62E5:
	SCZO = cond(ax - 0x800<16>)
	branch Test(EQ,Z) l1825_62AA
	// succ:  l1825_62EA l1825_62AA
l1825_62EA:
	SCZO = cond(ax - 0x2000<16>)
	branch Test(EQ,Z) l1825_62B0
	// succ:  l1825_62EF l1825_62B0
l1825_62EF:
	ax = 0x5AC4<16>
	goto l1825_6268
	// succ:  l1825_6268
fn1825_6168_exit:


// fn1825_62F6
// Return size: 4
define fn1825_62F6
fn1825_62F6_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l1825_62F6
l1825_62F6:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 2<i16>:word16] = 1<16>
	ax = Mem0[ss:bp + 6<i16>:word16]
	SCZO = cond(ax - 0x10<16>)
	branch Test(EQ,Z) l1825_633A
	// succ:  l1825_6309 l1825_633A
l1825_6309:
	branch Test(LE,SZO) l1825_630E
	// succ:  l1825_630B l1825_630E
l1825_630B:
	goto l1825_63BA
	// succ:  l1825_63BA
l1825_630E:
	ax = ax - 0xFFFD<16>
	SCZO = cond(ax)
	v16 = ax
	SCZO = cond(ax - 0xB<16>)
	branch Test(ULE,CZ) l1825_6319
	// succ:  l1825_6316 l1825_6319
l1825_6316:
	goto l1825_63CB
	// succ:  l1825_63CB
l1825_6319:
	ax = ax + ax
	SCZO = cond(ax)
	v15 = bx
	bx = ax
	ax = v15
	switch (v16) { l1825_6376 l1825_638E l1825_63CB l1825_63CB l1825_63CB l1825_633A l1825_63CB l1825_63CB l1825_63CB l1825_63CB l1825_63CB l1825_633A }
	// succ:  l1825_6376 l1825_638E l1825_63CB l1825_63CB l1825_63CB l1825_633A l1825_63CB l1825_63CB l1825_63CB l1825_63CB l1825_63CB l1825_633A
l1825_6322:
	es_bx = Mem0[ss:bp + 8<i16>:segptr32]
	Mem0[es:bx:byte] = 0x43<8>
	// succ:  l1825_6329
l1825_6329:
	v13 = Mem0[ss:bp + 8<i16>:word16] + 1<16>
	Mem0[ss:bp + 8<i16>:word16] = v13
	SZO = cond(v13)
	es_bx = Mem0[ss:bp + 8<i16>:segptr32]
	Mem0[es:bx:byte] = 0<8>
	ax = Mem0[ss:bp - 2<i16>:word16]
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_62F6_exit
l1825_633A:
	es_bx = Mem0[ss:bp + 8<i16>:segptr32]
	Mem0[es:bx:byte] = 0x4E<8>
	goto l1825_6329
	// succ:  l1825_6329
l1825_6344:
	es_bx = Mem0[ss:bp + 8<i16>:segptr32]
	Mem0[es:bx:byte] = 0x4C<8>
	goto l1825_6329
	// succ:  l1825_6329
l1825_634E:
	es_bx = Mem0[ss:bp + 8<i16>:segptr32]
	Mem0[es:bx:byte] = 0x44<8>
	goto l1825_6329
	// succ:  l1825_6329
l1825_6358:
	es_bx = Mem0[ss:bp + 8<i16>:segptr32]
	Mem0[es:bx:byte] = 0x4D<8>
	goto l1825_6329
	// succ:  l1825_6329
l1825_6362:
	es_bx = Mem0[ss:bp + 8<i16>:segptr32]
	Mem0[es:bx:byte] = 0x40<8>
	goto l1825_6329
	// succ:  l1825_6329
l1825_636C:
	es_bx = Mem0[ss:bp + 8<i16>:segptr32]
	Mem0[es:bx:byte] = 0x41<8>
	goto l1825_6329
	// succ:  l1825_6329
l1825_6376:
	es_bx = Mem0[ss:bp + 8<i16>:segptr32]
	Mem0[es:bx:byte] = 0x55<8>
	v18 = Mem0[ss:bp + 8<i16>:word16] + 1<16>
	Mem0[ss:bp + 8<i16>:word16] = v18
	SZO = cond(v18)
	bx = Mem0[ss:bp + 8<i16>:word16]
	Mem0[es:bx:byte] = 0x45<8>
	// succ:  l1825_6387
l1825_6387:
	Mem0[ss:bp - 2<i16>:word16] = 2<16>
	goto l1825_6329
	// succ:  l1825_6329
l1825_638E:
	es_bx = Mem0[ss:bp + 8<i16>:segptr32]
	Mem0[es:bx:byte] = 0x55<8>
	v17 = Mem0[ss:bp + 8<i16>:word16] + 1<16>
	Mem0[ss:bp + 8<i16>:word16] = v17
	SZO = cond(v17)
	bx = Mem0[ss:bp + 8<i16>:word16]
	Mem0[es:bx:byte] = 0x49<8>
	goto l1825_6387
	// succ:  l1825_6387
l1825_63BA:
	SCZO = cond(ax - 0x80<16>)
	branch Test(EQ,Z) l1825_6344
	// succ:  l1825_63BF l1825_6344
l1825_63BF:
	branch Test(GT,SZO) l1825_63D6
	// succ:  l1825_63C1 l1825_63D6
l1825_63C1:
	SCZO = cond(ax - 0x20<16>)
	branch Test(EQ,Z) l1825_634E
	// succ:  l1825_63C6 l1825_634E
l1825_63C6:
	SCZO = cond(ax - 0x40<16>)
	branch Test(EQ,Z) l1825_634E
	// succ:  l1825_63CB l1825_634E
l1825_63CB:
	es_bx = Mem0[ss:bp + 8<i16>:segptr32]
	Mem0[es:bx:byte] = 0x55<8>
	goto l1825_6329
	// succ:  l1825_6329
l1825_63D6:
	SCZO = cond(ax - 0x100<16>)
	branch Test(NE,Z) l1825_63DE
	// succ:  l1825_63DB l1825_63DE
l1825_63DB:
	goto l1825_6322
	// succ:  l1825_6322
l1825_63DE:
	SCZO = cond(ax - 0x300<16>)
	branch Test(NE,Z) l1825_63E6
	// succ:  l1825_63E3 l1825_63E6
l1825_63E3:
	goto l1825_6358
	// succ:  l1825_6358
l1825_63E6:
	SCZO = cond(ax - 0x800<16>)
	branch Test(NE,Z) l1825_63EE
	// succ:  l1825_63EB l1825_63EE
l1825_63EB:
	goto l1825_6362
	// succ:  l1825_6362
l1825_63EE:
	SCZO = cond(ax - 0x2000<16>)
	branch Test(NE,Z) l1825_63F6
	// succ:  l1825_63F3 l1825_63F6
l1825_63F3:
	goto l1825_636C
	// succ:  l1825_636C
l1825_63F6:
	goto l1825_63CB
	// succ:  l1825_63CB
fn1825_62F6_exit:


// fn1825_63F8
// Return size: 4
define fn1825_63F8
fn1825_63F8_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l1825_63F8
l1825_63F8:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2<16>
	SCZO = cond(sp)
	Mem0[ds:0xA68<16>:byte] = 0<8>
	SCZO = cond(Mem0[ss:bp + 6<i16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_642E
	// succ:  l1825_6409 l1825_642E
l1825_6409:
	ax = 0x7F<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v10 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v10
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn38D6_0D68 (retsize: 4;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn2017_03D0 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	goto l1825_6432
	// succ:  l1825_6432
l1825_642E:
	ax = 0x5AD0<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	// succ:  l1825_6432
l1825_6432:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn2017_01BA (retsize: 4;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn2017_03F5 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 2<i16>:word16] = ax
	ax = Mem0[ss:bp + 8<i16>:word16]
	SCZO = cond(Mem0[ss:bp - 2<i16>:word16] - ax)
	branch Test(UGE,C) l1825_6478
	// succ:  l1825_6458 l1825_6478
l1825_6458:
	call fn1F38_0517 (retsize: 4;)
	ah = ah - ah
	SCZO = cond(ah)
	ax = ax + Mem0[ss:bp + 8<i16>:word16]
	SCZO = cond(ax)
	ax = ax - Mem0[ss:bp - 2<i16>:word16]
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_0517 (retsize: 4;)
	al = ah
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	// succ:  l1825_6478
l1825_6478:
	v15 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v15
	ax = 0xA68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_049F (retsize: 4;)
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_63F8_exit
fn1825_63F8_exit:


// fn1825_648A
// Return size: 4
define fn1825_648A
fn1825_648A_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l1825_648A
l1825_648A:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0xE<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	Mem0[ss:bp - 2<i16>:word16] = 0<16>
	call fn1F38_0517 (retsize: 4;)
	al = ah
	ah = ah - ah
	SCZO = cond(ah)
	Mem0[ss:bp - 4<i16>:word16] = ax
	call fn1F38_0517 (retsize: 4;)
	ah = ah - ah
	SCZO = cond(ah)
	Mem0[ss:bp - 12<i16>:word16] = ax
	Mem0[ss:bp - 8<i16>:word16] = 1<16>
	ax = 1<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_0527 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	v11 = Mem0[ss:bp - 12<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v11
	v12 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v12
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	SCZO = cond(Mem0[ss:bp + 16<i16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_64E4
	// succ:  l1825_64D1 l1825_64E4
l1825_64D1:
	v14 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v14
	v15 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v15
	call fn2017_03F5 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 14<i16>:word16] = ax
	goto l1825_64F0
	// succ:  l1825_64F0
l1825_64E4:
	Mem0[ss:bp - 14<i16>:word16] = 0<16>
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	Mem0[es:bx:byte] = 0<8>
	// succ:  l1825_64F0
l1825_64F0:
	v19 = Mem0[ss:bp - 14<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v19
	v20 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v20
	v21 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v21
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	v22 = Mem0[ss:bp - 12<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v22
	v23 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v23
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	goto l1825_669D
	// succ:  l1825_669D
l1825_6512:
	SCZO = cond(Mem0[ss:bp - 8<i16>:word16] - 0x14<16>)
	branch Test(NE,Z) l1825_651B
	// succ:  l1825_6518 l1825_651B
l1825_6518:
	goto l1825_66A6
	// succ:  l1825_66A6
l1825_651B:
	SCZO = cond(Mem0[ss:bp - 8<i16>:word16] - 0xBB8<16>)
	branch Test(NE,Z) l1825_6525
	// succ:  l1825_6522 l1825_6525
l1825_6522:
	goto l1825_66A6
	// succ:  l1825_66A6
l1825_6525:
	ax = Mem0[ss:bp + 10<i16>:word16]
	SCZO = cond(Mem0[ss:bp - 2<i16>:word16] - ax)
	branch Test(ULT,C) l1825_6530
	// succ:  l1825_652D l1825_6530
l1825_652D:
	goto l1825_66A6
	// succ:  l1825_66A6
l1825_6530:
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 8<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn3431_07B6 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 8<i16>:word16] = ax
	SCZO = cond(ax - 1<16>)
	branch Test(EQ,Z) l1825_656A
	// succ:  l1825_6547 l1825_656A
l1825_6547:
	SCZO = cond(ax - 2<16>)
	branch Test(NE,Z) l1825_654F
	// succ:  l1825_654C l1825_654F
l1825_654C:
	goto l1825_6618
	// succ:  l1825_6618
l1825_654F:
	SCZO = cond(ax - 3<16>)
	branch Test(NE,Z) l1825_6557
	// succ:  l1825_6554 l1825_6557
l1825_6554:
	goto l1825_65E8
	// succ:  l1825_65E8
l1825_6557:
	SCZO = cond(ax - 7<16>)
	branch Test(EQ,Z) l1825_6595
	// succ:  l1825_655C l1825_6595
l1825_655C:
	SCZO = cond(ax - 8<16>)
	branch Test(EQ,Z) l1825_65B8
	// succ:  l1825_6561 l1825_65B8
l1825_6561:
	SCZO = cond(ax - 0x14<16>)
	branch Test(EQ,Z) l1825_6590
	// succ:  l1825_6566 l1825_6590
l1825_6566:
	goto l1825_669D
	// succ:  l1825_669D
l1825_656A:
	ax = 0x95C<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x8F6<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1825_6B02 (retsize: 4;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 8<i16>:word16] = ax
	SCZO = cond(ax - 0xBB8<16>)
	branch Test(EQ,Z) l1825_6586
	// succ:  l1825_6583 l1825_6586
l1825_6583:
	goto l1825_669D
	// succ:  l1825_669D
l1825_6586:
	Mem0[ds:0x90E<16>:word16] = 3<16>
	goto l1825_669D
	// succ:  l1825_669D
l1825_6590:
	Mem0[ss:bp - 2<i16>:word16] = 0<16>
	// succ:  l1825_6595
l1825_6595:
	SCZO = cond(Mem0[ss:bp - 2<i16>:word16] - 0<16>)
	branch Test(NE,Z) l1825_659E
	// succ:  l1825_659B l1825_659E
l1825_659B:
	goto l1825_669D
	// succ:  l1825_669D
l1825_659E:
	call fn1F38_0517 (retsize: 4;)
	ah = ah - ah
	SCZO = cond(ah)
	ax = ax - 1<16>
	SZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v34 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v34
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	v35 = Mem0[ss:bp - 2<i16>:word16] - 1<16>
	Mem0[ss:bp - 2<i16>:word16] = v35
	SZO = cond(v35)
	goto l1825_669D
	// succ:  l1825_669D
l1825_65B8:
	v36 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v36
	v37 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v37
	call fn2017_03F5 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	SCZO = cond(ax - Mem0[ss:bp - 2<i16>:word16])
	branch Test(UGT,CZ) l1825_65CE
	// succ:  l1825_65CB l1825_65CE
l1825_65CB:
	goto l1825_669D
	// succ:  l1825_669D
l1825_65CE:
	call fn1F38_0517 (retsize: 4;)
	ah = ah - ah
	SCZO = cond(ah)
	ax = ax + 1<16>
	SZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v39 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v39
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	v40 = Mem0[ss:bp - 2<i16>:word16] + 1<16>
	Mem0[ss:bp - 2<i16>:word16] = v40
	SZO = cond(v40)
	goto l1825_669D
	// succ:  l1825_669D
l1825_65E8:
	SCZO = cond(Mem0[ss:bp - 2<i16>:word16] - 0<16>)
	branch Test(NE,Z) l1825_65F1
	// succ:  l1825_65EE l1825_65F1
l1825_65EE:
	goto l1825_669D
	// succ:  l1825_669D
l1825_65F1:
	call fn1F38_0517 (retsize: 4;)
	ah = ah - ah
	SCZO = cond(ah)
	ax = ax - 1<16>
	SZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v33 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v33
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = 1<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x5AD2<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	goto l1825_659E
	// succ:  l1825_659E
l1825_6618:
	al = Mem0[ds:0xF17<16>:byte]
	Mem0[ss:bp - 10<i16>:byte] = al
	SCZO = cond(Mem0[ss:bp + 12<i16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_6651
	// succ:  l1825_6624 l1825_6651
l1825_6624:
	SCZO = cond(Mem0[ss:bp + 12<i16>:word16] - 1<16>)
	branch Test(NE,Z) l1825_6639
	// succ:  l1825_662A l1825_6639
l1825_662A:
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn38AD_0040 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	SZP = cond(al & 2<8>)
	O = false
	C = false
	branch Test(NE,Z) l1825_6651
	// succ:  l1825_6639 l1825_6651
l1825_6639:
	SCZO = cond(Mem0[ss:bp + 12<i16>:word16] - 2<16>)
	branch Test(NE,Z) l1825_669D
	// succ:  l1825_663F l1825_669D
l1825_663F:
	al = Mem0[ss:bp - 10<i16>:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn38AD_0040 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	SZP = cond(al & 1<8>)
	O = false
	C = false
	branch Test(EQ,Z) l1825_669D
	// succ:  l1825_6651 l1825_669D
l1825_6651:
	al = Mem0[ss:bp - 10<i16>:byte]
	ah = ah - ah
	SCZO = cond(ah)
	si = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	call fn38AD_0040 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	SZP = cond(al & 1<8>)
	O = false
	C = false
	branch Test(EQ,Z) l1825_6677
	// succ:  l1825_6665 l1825_6677
l1825_6665:
	SCZO = cond(Mem0[ss:bp + 14<i16>:word16] - 1<16>)
	branch Test(NE,Z) l1825_6677
	// succ:  l1825_666B l1825_6677
l1825_666B:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	call fn38AD_001E (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 10<i16>:byte] = al
	// succ:  l1825_6677
l1825_6677:
	bx = Mem0[ss:bp - 2<i16>:word16]
	es_si = Mem0[ss:bp + 6<i16>:segptr32]
	al = Mem0[ss:bp - 10<i16>:byte]
	Mem0[es:bx + si:byte] = al
	ax = 1<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = bx
	ax = ax + si
	SCZO = cond(ax)
	dx = es
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	v30 = Mem0[ss:bp - 2<i16>:word16] + 1<16>
	Mem0[ss:bp - 2<i16>:word16] = v30
	SZO = cond(v30)
	v32 = Mem0[ss:bp - 14<i16>:word16] + 1<16>
	Mem0[ss:bp - 14<i16>:word16] = v32
	SZO = cond(v32)
	// succ:  l1825_669D
l1825_669D:
	SCZO = cond(Mem0[ss:bp - 8<i16>:word16] - 6<16>)
	branch Test(EQ,Z) l1825_66A6
	// succ:  l1825_66A3 l1825_66A6
l1825_66A3:
	goto l1825_6512
	// succ:  l1825_6512
l1825_66A6:
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_0527 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	SCZO = cond(Mem0[ss:bp - 8<i16>:word16] - 0x14<16>)
	branch Test(EQ,Z) l1825_66C4
	// succ:  l1825_66B7 l1825_66C4
l1825_66B7:
	bx = Mem0[ss:bp - 14<i16>:word16]
	es_si = Mem0[ss:bp + 6<i16>:segptr32]
	Mem0[es:bx + si:byte] = 0<8>
	goto l1825_66CB
	// succ:  l1825_66CB
l1825_66C4:
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	Mem0[es:bx:byte] = 0<8>
	// succ:  l1825_66CB
l1825_66CB:
	ax = Mem0[ss:bp - 8<i16>:word16]
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_648A_exit
fn1825_648A_exit:


// fn1825_66D4
// Return size: 4
define fn1825_66D4
fn1825_66D4_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l1825_66D4
l1825_66D4:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0xA<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	Mem0[ss:bp - 2<i16>:word16] = 0<16>
	Mem0[ss:bp - 6<i16>:word16] = 0<16>
	al = Mem0[ds:0xF17<16>:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn38AD_0040 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	SZP = cond(al & 1<8>)
	O = false
	C = false
	branch Test(EQ,Z) l1825_6748
	// succ:  l1825_66F7 l1825_6748
l1825_66F7:
	al = Mem0[ds:0xF17<16>:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn38AD_001E (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	ah = ah - ah
	SCZO = cond(ah)
	Mem0[ss:bp - 4<i16>:word16] = ax
	// succ:  l1825_670A
l1825_670A:
	bx = Mem0[ss:bp - 2<i16>:word16]
	bx = bx << 1<16>
	SCZO = cond(bx)
	bx = bx << 1<16>
	SCZO = cond(bx)
	es_si = Mem0[ss:bp + 6<i16>:segptr32]
	ax = Mem0[es:bx + si:word16]
	dx = Mem0[es:bx + 2<i16> + si:word16]
	Mem0[ss:bp - 10<i16>:word16] = ax
	Mem0[ss:bp - 8<i16>:word16] = dx
	ax = ax | dx
	SZ = cond(ax)
	O = false
	C = false
	branch Test(EQ,Z) l1825_6748
	// succ:  l1825_6725 l1825_6748
l1825_6725:
	SCZO = cond(Mem0[ss:bp - 6<i16>:word16] - 0<16>)
	branch Test(NE,Z) l1825_6748
	// succ:  l1825_672B l1825_6748
l1825_672B:
	es_bx = Mem0[ss:bp - 10<i16>:segptr32]
	si = Mem0[ss:bp + 10<i16>:word16]
	al = Mem0[es:bx + si:byte]
	ah = ah - ah
	SCZO = cond(ah)
	SCZO = cond(ax - Mem0[ss:bp - 4<i16>:word16])
	branch Test(NE,Z) l1825_6742
	// succ:  l1825_673B l1825_6742
l1825_673B:
	Mem0[ss:bp - 6<i16>:word16] = 1<16>
	goto l1825_670A
	// succ:  l1825_670A
l1825_6742:
	v22 = Mem0[ss:bp - 2<i16>:word16] + 1<16>
	Mem0[ss:bp - 2<i16>:word16] = v22
	SZO = cond(v22)
	goto l1825_670A
	// succ:  l1825_670A
l1825_6748:
	SCZO = cond(Mem0[ss:bp - 6<i16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_6756
	// succ:  l1825_674E l1825_6756
l1825_674E:
	ax = Mem0[ss:bp - 2<i16>:word16]
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_66D4_exit
l1825_6756:
	ax = 0xFFFF<16>
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_66D4_exit
fn1825_66D4_exit:


// fn1825_675E
// Return size: 4
define fn1825_675E
fn1825_675E_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l1825_675E
l1825_675E:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 4<16>
	SCZO = cond(sp)
	call fn1F38_0517 (retsize: 4;)
	al = ah
	ah = ah - ah
	SCZO = cond(ah)
	Mem0[ss:bp - 2<i16>:word16] = ax
	call fn1F38_0517 (retsize: 4;)
	ah = ah - ah
	SCZO = cond(ah)
	Mem0[ss:bp - 4<i16>:word16] = ax
	es_bx = Mem0[ss:bp + 16<i16>:segptr32]
	SCZO = cond(Mem0[es:bx + 6<i16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_67AC
	// succ:  l1825_6784 l1825_67AC
l1825_6784:
	ax = Mem0[ss:bp + 14<i16>:word16]
	ax = ax >>u 1<16>
	SCZO = cond(ax)
	ax = ax + Mem0[ss:bp + 8<i16>:word16]
	SCZO = cond(ax)
	ax = ax - 4<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v14 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v14
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = 8<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x5AD4<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	// succ:  l1825_67AC
l1825_67AC:
	es_bx = Mem0[ss:bp + 16<i16>:segptr32]
	SCZO = cond(Mem0[es:bx + 8<i16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_67DE
	// succ:  l1825_67B6 l1825_67DE
l1825_67B6:
	ax = Mem0[ss:bp + 14<i16>:word16]
	ax = ax >>u 1<16>
	SCZO = cond(ax)
	ax = ax + Mem0[ss:bp + 8<i16>:word16]
	SCZO = cond(ax)
	ax = ax - 4<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v16 = Mem0[ss:bp + 10<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v16
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = 8<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x5ADE<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	// succ:  l1825_67DE
l1825_67DE:
	v17 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v17
	v18 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v18
	call fn1F38_04E7 (retsize: 4;)
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_675E_exit
fn1825_675E_exit:


// fn1825_67EE
// Return size: 4
define fn1825_67EE
fn1825_67EE_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l1825_67EE
l1825_67EE:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 4<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	ax = Mem0[es:bx + 32<i16>:word16]
	dx = Mem0[es:bx + 34<i16>:word16]
	Mem0[ss:bp - 4<i16>:word16] = ax
	Mem0[ss:bp - 2<i16>:word16] = dx
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 8<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn3431_07B6 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	Mem0[es:bx + 10<i16>:word16] = ax
	SCZO = cond(ax - 0x10<16>)
	branch Test(NE,Z) l1825_6824
	// succ:  l1825_6821 l1825_6824
l1825_6821:
	goto l1825_68DC
	// succ:  l1825_68DC
l1825_6824:
	branch Test(ULE,CZ) l1825_6829
	// succ:  l1825_6826 l1825_6829
l1825_6826:
	goto l1825_6AB0
	// succ:  l1825_6AB0
l1825_6829:
	ax = ax - 1<16>
	SCZO = cond(ax)
	v33 = ax
	SCZO = cond(ax - 0xE<16>)
	branch Test(ULE,CZ) l1825_6834
	// succ:  l1825_6831 l1825_6834
l1825_6831:
	goto l1825_6AFD
	// succ:  l1825_6AFD
l1825_6834:
	ax = ax + ax
	SCZO = cond(ax)
	v32 = bx
	bx = ax
	ax = v32
	switch (v33) { l1825_6856 l1825_6AFD l1825_6AFD l1825_6AFD l1825_6AFD l1825_6AFD l1825_6AFD l1825_6AFD l1825_692C l1825_6942 l1825_6AFD l1825_6AFD l1825_6AFD l1825_6AFD l1825_6884 }
	// succ:  l1825_6856 l1825_6AFD l1825_6AFD l1825_6AFD l1825_6AFD l1825_6AFD l1825_6AFD l1825_6AFD l1825_692C l1825_6942 l1825_6AFD l1825_6AFD l1825_6AFD l1825_6AFD l1825_6884
l1825_683C:
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	Mem0[es:bx + 4<i16>:word16] = 1<16>
	v16 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v16
	v17 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v17
	call fn1825_6D80 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	goto l1825_6AFD
	// succ:  l1825_6AFD
l1825_6856:
	v34 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v34
	v35 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v35
	v36 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v36
	v37 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v37
	call fn1825_6B02 (retsize: 4;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	Mem0[es:bx + 10<i16>:word16] = ax
	SCZO = cond(ax - 0xBB8<16>)
	branch Test(EQ,Z) l1825_6878
	// succ:  l1825_6875 l1825_6878
l1825_6875:
	goto l1825_6AFD
	// succ:  l1825_6AFD
l1825_6878:
	es_bx = Mem0[ss:bp - 4<i16>:segptr32]
	Mem0[es:bx + 24<i16>:word16] = 3<16>
	goto l1825_6AFD
	// succ:  l1825_6AFD
l1825_6884:
	SCZO = cond(Mem0[ss:bp + 10<i16>:word16] - 1<16>)
	branch Test(NE,Z) l1825_689D
	// succ:  l1825_688A l1825_689D
l1825_688A:
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	ax = Mem0[es:bx + 18<i16>:word16]
	Mem0[es:bx + 12<i16>:word16] = ax
	ax = Mem0[es:bx + 26<i16>:word16]
	Mem0[es:bx + 24<i16>:word16] = ax
	// succ:  l1825_689D
l1825_689D:
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	SCZO = cond(Mem0[es:bx + 12<i16>:word16] - 0<16>)
	branch Test(NE,Z) l1825_68AA
	// succ:  l1825_68A7 l1825_68AA
l1825_68A7:
	goto l1825_6AFD
	// succ:  l1825_6AFD
l1825_68AA:
	ax = Mem0[es:bx + 12<i16>:word16]
	ax = ax - 1<16>
	SZO = cond(ax)
	SCZO = cond(ax - Mem0[es:bx + 14<i16>:word16])
	branch Test(UGE,C) l1825_68B8
	// succ:  l1825_68B5 l1825_68B8
l1825_68B5:
	goto l1825_6AFD
	// succ:  l1825_6AFD
l1825_68B8:
	v38 = Mem0[es:bx + 12<i16>:word16] - 1<16>
	Mem0[es:bx + 12<i16>:word16] = v38
	SZO = cond(v38)
	ax = Mem0[es:bx + 24<i16>:word16]
	ax = ax - 1<16>
	SZO = cond(ax)
	SCZO = cond(ax - Mem0[es:bx + 26<i16>:word16])
	branch Test(ULT,C) l1825_68D0
	// succ:  l1825_68C7 l1825_68D0
l1825_68C7:
	v39 = Mem0[es:bx + 24<i16>:word16] - 1<16>
	Mem0[es:bx + 24<i16>:word16] = v39
	SZO = cond(v39)
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_67EE_exit
l1825_68D0:
	v40 = Mem0[es:bx + 18<i16>:word16] - 1<16>
	Mem0[es:bx + 18<i16>:word16] = v40
	SZO = cond(v40)
	// succ:  l1825_68D4
l1825_68D4:
	Mem0[es:bx:word16] = 1<16>
	goto l1825_6AFD
	// succ:  l1825_6AFD
l1825_68DC:
	SCZO = cond(Mem0[ss:bp + 10<i16>:word16] - 1<16>)
	branch Test(NE,Z) l1825_68FC
	// succ:  l1825_68E2 l1825_68FC
l1825_68E2:
	ax = Mem0[es:bx + 18<i16>:word16]
	ax = ax + Mem0[es:bx + 20<i16>:word16]
	SCZO = cond(ax)
	ax = ax - 1<16>
	SZO = cond(ax)
	Mem0[es:bx + 12<i16>:word16] = ax
	ax = Mem0[es:bx + 26<i16>:word16]
	ax = ax + Mem0[es:bx + 20<i16>:word16]
	SCZO = cond(ax)
	ax = ax - 1<16>
	SZO = cond(ax)
	Mem0[es:bx + 24<i16>:word16] = ax
	// succ:  l1825_68FC
l1825_68FC:
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	ax = Mem0[es:bx + 12<i16>:word16]
	ax = ax + 1<16>
	SZO = cond(ax)
	SCZO = cond(ax - Mem0[es:bx + 16<i16>:word16])
	branch Test(ULE,CZ) l1825_690D
	// succ:  l1825_690A l1825_690D
l1825_690A:
	goto l1825_6AFD
	// succ:  l1825_6AFD
l1825_690D:
	v18 = Mem0[es:bx + 12<i16>:word16] + 1<16>
	Mem0[es:bx + 12<i16>:word16] = v18
	SZO = cond(v18)
	ax = Mem0[es:bx + 24<i16>:word16]
	ax = ax + 1<16>
	SZO = cond(ax)
	SCZO = cond(ax - Mem0[es:bx + 28<i16>:word16])
	branch Test(UGT,CZ) l1825_6926
	// succ:  l1825_691C l1825_6926
l1825_691C:
	v19 = Mem0[es:bx + 24<i16>:word16] + 1<16>
	Mem0[es:bx + 24<i16>:word16] = v19
	SZO = cond(v19)
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_67EE_exit
l1825_6926:
	v29 = Mem0[es:bx + 18<i16>:word16] + 1<16>
	Mem0[es:bx + 18<i16>:word16] = v29
	SZO = cond(v29)
	goto l1825_68D4
	// succ:  l1825_68D4
l1825_692C:
	bx = Mem0[ss:bp + 6<i16>:word16]
	ax = Mem0[es:bx + 18<i16>:word16]
	Mem0[es:bx + 12<i16>:word16] = ax
	ax = Mem0[es:bx + 26<i16>:word16]
	// succ:  l1825_693B
l1825_693B:
	Mem0[es:bx + 24<i16>:word16] = ax
	goto l1825_6AFD
	// succ:  l1825_6AFD
l1825_6942:
	bx = Mem0[ss:bp + 6<i16>:word16]
	ax = Mem0[es:bx + 18<i16>:word16]
	ax = ax + Mem0[es:bx + 20<i16>:word16]
	SCZO = cond(ax)
	ax = ax - 1<16>
	SZO = cond(ax)
	Mem0[es:bx + 12<i16>:word16] = ax
	ax = Mem0[es:bx + 26<i16>:word16]
	ax = ax + Mem0[es:bx + 20<i16>:word16]
	SCZO = cond(ax)
	ax = ax - 1<16>
	SZO = cond(ax)
	goto l1825_693B
	// succ:  l1825_693B
l1825_695E:
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	ax = Mem0[es:bx + 18<i16>:word16]
	ax = ax - Mem0[es:bx + 14<i16>:word16]
	SCZO = cond(ax)
	SCZO = cond(ax - Mem0[es:bx + 30<i16>:word16])
	branch Test(ULE,CZ) l1825_697E
	// succ:  l1825_696F l1825_697E
l1825_696F:
	ax = Mem0[es:bx + 30<i16>:word16]
	v20 = Mem0[es:bx + 18<i16>:word16] - ax
	Mem0[es:bx + 18<i16>:word16] = v20
	SCZO = cond(v20)
	v21 = Mem0[es:bx + 12<i16>:word16] - ax
	Mem0[es:bx + 12<i16>:word16] = v21
	SCZO = cond(v21)
	goto l1825_6A47
	// succ:  l1825_6A47
l1825_697E:
	ax = Mem0[es:bx + 14<i16>:word16]
	Mem0[es:bx + 18<i16>:word16] = ax
	Mem0[es:bx + 12<i16>:word16] = ax
	// succ:  l1825_698A
l1825_698A:
	ax = Mem0[es:bx + 26<i16>:word16]
	goto l1825_6A43
	// succ:  l1825_6A43
l1825_6992:
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	ax = Mem0[es:bx + 18<i16>:word16]
	ax = ax + Mem0[es:bx + 30<i16>:word16]
	SCZO = cond(ax)
	SCZO = cond(ax - Mem0[es:bx + 16<i16>:word16])
	branch Test(UGT,CZ) l1825_69C4
	// succ:  l1825_69A3 l1825_69C4
l1825_69A3:
	ax = Mem0[es:bx + 30<i16>:word16]
	v30 = Mem0[es:bx + 18<i16>:word16] + ax
	Mem0[es:bx + 18<i16>:word16] = v30
	SCZO = cond(v30)
	ax = Mem0[es:bx + 12<i16>:word16]
	ax = ax + Mem0[es:bx + 30<i16>:word16]
	SCZO = cond(ax)
	SCZO = cond(ax - Mem0[es:bx + 16<i16>:word16])
	branch Test(UGT,CZ) l1825_6A2F
	// succ:  l1825_69B9 l1825_6A2F
l1825_69B9:
	ax = Mem0[es:bx + 30<i16>:word16]
	v31 = Mem0[es:bx + 12<i16>:word16] + ax
	Mem0[es:bx + 12<i16>:word16] = v31
	SCZO = cond(v31)
	goto l1825_6A47
	// succ:  l1825_6A47
l1825_69C4:
	ax = Mem0[es:bx + 16<i16>:word16]
	Mem0[es:bx + 12<i16>:word16] = ax
	ax = Mem0[es:bx + 26<i16>:word16]
	ax = ax + Mem0[es:bx + 16<i16>:word16]
	SCZO = cond(ax)
	ax = ax - Mem0[es:bx + 18<i16>:word16]
	SCZO = cond(ax)
	goto l1825_693B
	// succ:  l1825_693B
l1825_69DC:
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	ax = Mem0[es:bx + 14<i16>:word16]
	Mem0[es:bx + 12<i16>:word16] = ax
	Mem0[es:bx + 18<i16>:word16] = ax
	goto l1825_698A
	// succ:  l1825_698A
l1825_69EE:
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	ax = Mem0[es:bx + 18<i16>:word16]
	ax = ax + Mem0[es:bx + 30<i16>:word16]
	SCZO = cond(ax)
	SCZO = cond(ax - Mem0[es:bx + 16<i16>:word16])
	branch Test(UGT,CZ) l1825_69C4
	// succ:  l1825_69FF l1825_69C4
l1825_69FF:
	ax = Mem0[es:bx + 16<i16>:word16]
	dx = dx - dx
	SCZO = cond(dx)
	v23 = dx_ax
	dx = CONVERT(v23 %u Mem0[es:bx + 30<i16>:word16], word32, uint16)
	ax = CONVERT(v23 /u Mem0[es:bx + 30<i16>:word16], word16, uint16)
	SCZO = cond(ax)
	si = dx
	si = si | si
	SZ = cond(si)
	O = false
	C = false
	branch Test(EQ,Z) l1825_6A18
	// succ:  l1825_6A0F l1825_6A18
l1825_6A0F:
	ax = Mem0[es:bx + 16<i16>:word16]
	ax = ax - si
	SCZO = cond(ax)
	goto l1825_6A2A
	// succ:  l1825_6A2A
l1825_6A18:
	ax = Mem0[es:bx + 16<i16>:word16]
	ax = ax - Mem0[es:bx + 30<i16>:word16]
	SCZO = cond(ax)
	dx = dx - dx
	SCZO = cond(dx)
	v28 = dx_ax
	dx = CONVERT(v28 %u Mem0[es:bx + 30<i16>:word16], word32, uint16)
	ax = CONVERT(v28 /u Mem0[es:bx + 30<i16>:word16], word16, uint16)
	SCZO = cond(ax)
	dx_ax = Mem0[es:bx + 30<i16>:word16] *u32 ax
	SCZO = cond(dx_ax)
	// succ:  l1825_6A2A
l1825_6A2A:
	ax = ax + 1<16>
	SZO = cond(ax)
	Mem0[es:bx + 18<i16>:word16] = ax
	// succ:  l1825_6A2F
l1825_6A2F:
	ax = Mem0[es:bx + 16<i16>:word16]
	Mem0[es:bx + 12<i16>:word16] = ax
	ax = Mem0[es:bx + 26<i16>:word16]
	ax = ax + Mem0[es:bx + 16<i16>:word16]
	SCZO = cond(ax)
	ax = ax - Mem0[es:bx + 18<i16>:word16]
	SCZO = cond(ax)
	// succ:  l1825_6A43
l1825_6A43:
	Mem0[es:bx + 24<i16>:word16] = ax
	// succ:  l1825_6A47
l1825_6A47:
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	goto l1825_68D4
	// succ:  l1825_68D4
l1825_6A4E:
	Mem0[ds:0xA24<16>:word16] = 1<16>
	Mem0[ds:0xA26<16>:word16] = 0<16>
	goto l1825_6AFD
	// succ:  l1825_6AFD
l1825_6A5E:
	Mem0[ds:0xA24<16>:word16] = 1<16>
	Mem0[ds:0xA26<16>:word16] = 1<16>
	goto l1825_6AFD
	// succ:  l1825_6AFD
l1825_6A6E:
	Mem0[ds:0xA24<16>:word16] = 1<16>
	Mem0[ds:0xA26<16>:word16] = 2<16>
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_67EE_exit
l1825_6A80:
	Mem0[ds:0xA24<16>:word16] = 1<16>
	Mem0[ds:0xA26<16>:word16] = 3<16>
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_67EE_exit
l1825_6AB0:
	SCZO = cond(ax - 0x22<16>)
	branch Test(NE,Z) l1825_6AB8
	// succ:  l1825_6AB5 l1825_6AB8
l1825_6AB5:
	goto l1825_69DC
	// succ:  l1825_69DC
l1825_6AB8:
	branch Test(UGT,CZ) l1825_6AD8
	// succ:  l1825_6ABA l1825_6AD8
l1825_6ABA:
	SCZO = cond(ax - 0x14<16>)
	branch Test(NE,Z) l1825_6AC2
	// succ:  l1825_6ABF l1825_6AC2
l1825_6ABF:
	goto l1825_683C
	// succ:  l1825_683C
l1825_6AC2:
	SCZO = cond(ax - 0x20<16>)
	branch Test(NE,Z) l1825_6ACA
	// succ:  l1825_6AC7 l1825_6ACA
l1825_6AC7:
	goto l1825_695E
	// succ:  l1825_695E
l1825_6ACA:
	SCZO = cond(ax - 0x21<16>)
	branch Test(NE,Z) l1825_6AD2
	// succ:  l1825_6ACF l1825_6AD2
l1825_6ACF:
	goto l1825_6992
	// succ:  l1825_6992
l1825_6AD2:
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_67EE_exit
l1825_6AD8:
	SCZO = cond(ax - 0x23<16>)
	branch Test(NE,Z) l1825_6AE0
	// succ:  l1825_6ADD l1825_6AE0
l1825_6ADD:
	goto l1825_69EE
	// succ:  l1825_69EE
l1825_6AE0:
	SCZO = cond(ax - 0x89<16>)
	branch Test(NE,Z) l1825_6AE8
	// succ:  l1825_6AE5 l1825_6AE8
l1825_6AE5:
	goto l1825_6A4E
	// succ:  l1825_6A4E
l1825_6AE8:
	SCZO = cond(ax - 0x8A<16>)
	branch Test(NE,Z) l1825_6AF0
	// succ:  l1825_6AED l1825_6AF0
l1825_6AED:
	goto l1825_6A5E
	// succ:  l1825_6A5E
l1825_6AF0:
	SCZO = cond(ax - 0x8B<16>)
	branch Test(NE,Z) l1825_6AF8
	// succ:  l1825_6AF5 l1825_6AF8
l1825_6AF5:
	goto l1825_6A6E
	// succ:  l1825_6A6E
l1825_6AF8:
	SCZO = cond(ax - 0x8C<16>)
	branch Test(EQ,Z) l1825_6A80
	// succ:  l1825_6AFD l1825_6A80
l1825_6AFD:
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_67EE_exit
fn1825_67EE_exit:


// fn1825_6B02
// Return size: 4
define fn1825_6B02
fn1825_6B02_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l1825_6B02
l1825_6B02:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 4<16>
	SCZO = cond(sp)
	es_bx = Mem0[ss:bp + 10<i16>:segptr32]
	ax = Mem0[es:bx + 10<i16>:word16]
	Mem0[ss:bp - 4<i16>:word16] = ax
	Mem0[ss:bp - 2<i16>:word16] = 0<16>
	ax = Mem0[ds:0xF17<16>:word16]
	ax = ax - 0x110<16>
	SCZO = cond(ax)
	v14 = ax
	SCZO = cond(ax - 0x20<16>)
	branch Test(ULE,CZ) l1825_6B25
	// succ:  l1825_6B22 l1825_6B25
l1825_6B22:
	goto l1825_6CA4
	// succ:  l1825_6CA4
l1825_6B25:
	ax = ax + ax
	SCZO = cond(ax)
	v13 = bx
	bx = ax
	ax = v13
	switch (v14) { l1825_6C52 l1825_6C2E l1825_6CA4 l1825_6CA4 l1825_6CA4 l1825_6CA4 l1825_6CA4 l1825_6CA4 l1825_6CA4 l1825_6C3A l1825_6CA4 l1825_6CA4 l1825_6CA4 l1825_6CA4 l1825_6C80 l1825_6C46 l1825_6CA4 l1825_6B9C l1825_6C8C l1825_6B90 l1825_6CA4 l1825_6C98 l1825_6CA4 l1825_6CA4 l1825_6CA4 l1825_6CA4 l1825_6CA4 l1825_6CA4 l1825_6B2E l1825_6B78 l1825_6CA4 l1825_6B84 l1825_6BE8 }
	// succ:  l1825_6C52 l1825_6C2E l1825_6CA4 l1825_6CA4 l1825_6CA4 l1825_6CA4 l1825_6CA4 l1825_6CA4 l1825_6CA4 l1825_6C3A l1825_6CA4 l1825_6CA4 l1825_6CA4 l1825_6CA4 l1825_6C80 l1825_6C46 l1825_6CA4 l1825_6B9C l1825_6C8C l1825_6B90 l1825_6CA4 l1825_6C98 l1825_6CA4 l1825_6CA4 l1825_6CA4 l1825_6CA4 l1825_6CA4 l1825_6CA4 l1825_6B2E l1825_6B78 l1825_6CA4 l1825_6B84 l1825_6BE8
l1825_6B2E:
	v29 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v29
	v30 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v30
	ax = 0xA<16>
	// succ:  l1825_6B37
l1825_6B37:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1825_6D08 (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	ax = ax | ax
	SZ = cond(ax)
	O = false
	C = false
	branch Test(NE,Z) l1825_6B46
	// succ:  l1825_6B43 l1825_6B46
l1825_6B43:
	goto l1825_6CEE
	// succ:  l1825_6CEE
l1825_6B46:
	es_bx = Mem0[ss:bp + 10<i16>:segptr32]
	Mem0[es:bx + 2<i16>:word16] = 0<16>
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	Mem0[es:bx + 26<i16>:word16] = 0<16>
	Mem0[es:bx + 4<i16>:word16] = 1<16>
	Mem0[es:bx + 6<i16>:word16] = 0<16>
	Mem0[es:bx + 12<i16>:word16] = 1<16>
	Mem0[es:bx + 14<i16>:word16] = 1<16>
	// succ:  l1825_6B70
l1825_6B70:
	Mem0[ss:bp - 2<i16>:word16] = 1<16>
	goto l1825_6CEE
	// succ:  l1825_6CEE
l1825_6B78:
	v27 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v27
	v28 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v28
	ax = 0x14<16>
	goto l1825_6B37
	// succ:  l1825_6B37
l1825_6B84:
	v25 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v25
	v26 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v26
	ax = 0x1E<16>
	goto l1825_6B37
	// succ:  l1825_6B37
l1825_6B90:
	v33 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v33
	v34 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v34
	ax = 0x28<16>
	goto l1825_6B37
	// succ:  l1825_6B37
l1825_6B9C:
	v17 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v17
	v18 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v18
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	ax = Mem0[es:bx + 8<i16>:word16]
	ax = ax + 0x29<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1825_6D08 (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	ax = ax | ax
	SZ = cond(ax)
	O = false
	C = false
	branch Test(NE,Z) l1825_6BBB
	// succ:  l1825_6BB8 l1825_6BBB
l1825_6BB8:
	goto l1825_6CEE
	// succ:  l1825_6CEE
l1825_6BBB:
	es_bx = Mem0[ss:bp + 10<i16>:segptr32]
	Mem0[es:bx + 2<i16>:word16] = 1<16>
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	Mem0[es:bx + 26<i16>:word16] = 1<16>
	Mem0[es:bx + 4<i16>:word16] = 1<16>
	Mem0[es:bx + 12<i16>:word16] = 1<16>
	Mem0[es:bx + 14<i16>:word16] = 0<16>
	Mem0[es:bx + 6<i16>:word16] = 0<16>
	goto l1825_6B70
	// succ:  l1825_6B70
l1825_6BE8:
	v23 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v23
	v24 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v24
	ax = 0x32<16>
	// succ:  l1825_6BF1
l1825_6BF1:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1825_6D08 (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	ax = ax | ax
	SZ = cond(ax)
	O = false
	C = false
	branch Test(NE,Z) l1825_6C00
	// succ:  l1825_6BFD l1825_6C00
l1825_6BFD:
	goto l1825_6CEE
	// succ:  l1825_6CEE
l1825_6C00:
	es_bx = Mem0[ss:bp + 10<i16>:segptr32]
	Mem0[es:bx + 2<i16>:word16] = 1<16>
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	Mem0[es:bx + 26<i16>:word16] = 1<16>
	// succ:  l1825_6C12
l1825_6C12:
	Mem0[es:bx + 4<i16>:word16] = 1<16>
	Mem0[es:bx + 6<i16>:word16] = 0<16>
	Mem0[es:bx + 12<i16>:word16] = 1<16>
	Mem0[es:bx + 14<i16>:word16] = 0<16>
	goto l1825_6B70
	// succ:  l1825_6B70
l1825_6C2E:
	v15 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v15
	v16 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v16
	ax = 0x3C<16>
	goto l1825_6B37
	// succ:  l1825_6B37
l1825_6C3A:
	v41 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v41
	v42 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v42
	ax = 0x3E<16>
	goto l1825_6BF1
	// succ:  l1825_6BF1
l1825_6C46:
	v37 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v37
	v38 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v38
	ax = 0xE<16>
	goto l1825_6BF1
	// succ:  l1825_6BF1
l1825_6C52:
	v43 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v43
	v44 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v44
	ax = 0x11<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1825_6D08 (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	ax = ax | ax
	SZ = cond(ax)
	O = false
	C = false
	branch Test(NE,Z) l1825_6C6A
	// succ:  l1825_6C67 l1825_6C6A
l1825_6C67:
	goto l1825_6CEE
	// succ:  l1825_6CEE
l1825_6C6A:
	es_bx = Mem0[ss:bp + 10<i16>:segptr32]
	Mem0[es:bx + 2<i16>:word16] = 0<16>
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	Mem0[es:bx + 26<i16>:word16] = 0<16>
	goto l1825_6C12
	// succ:  l1825_6C12
l1825_6C80:
	v39 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v39
	v40 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v40
	ax = 0xC<16>
	goto l1825_6BF1
	// succ:  l1825_6BF1
l1825_6C8C:
	v35 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v35
	v36 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v36
	ax = 0xB<16>
	goto l1825_6BF1
	// succ:  l1825_6BF1
l1825_6C98:
	v31 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v31
	v32 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v32
	ax = 0xD<16>
	goto l1825_6BF1
	// succ:  l1825_6BF1
l1825_6CA4:
	Mem0[ss:bp - 2<i16>:word16] = 0<16>
	// succ:  l1825_6CEE
l1825_6CEE:
	SCZO = cond(Mem0[ss:bp - 2<i16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_6CFC
	// succ:  l1825_6CF4 l1825_6CFC
l1825_6CF4:
	Mem0[ss:bp - 4<i16>:word16] = 0xBB8<16>
	goto l1825_6D01
	// succ:  l1825_6D01
l1825_6CFC:
	Mem0[ss:bp - 4<i16>:word16] = 1<16>
	// succ:  l1825_6D01
l1825_6D01:
	ax = Mem0[ss:bp - 4<i16>:word16]
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_6B02_exit
fn1825_6B02_exit:


// fn1825_6D08
// Return size: 4
define fn1825_6D08
fn1825_6D08_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l1825_6D08
l1825_6D08:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	Mem0[ss:bp - 2<i16>:word16] = 0<16>
	es_bx = Mem0[ss:bp + 8<i16>:segptr32]
	ax = Mem0[ss:bp + 6<i16>:word16]
	SCZO = cond(Mem0[es:bx + 22<i16>:word16] - ax)
	branch Test(EQ,Z) l1825_6D77
	// succ:  l1825_6D20 l1825_6D77
l1825_6D20:
	ax = Mem0[es:bx + 22<i16>:word16]
	Mem0[es:bx + 28<i16>:word16] = ax
	ax = Mem0[ss:bp + 6<i16>:word16]
	dx = dx - dx
	SCZO = cond(dx)
	cx = 0xA<16>
	v16 = dx_ax
	dx = CONVERT(v16 %u cx, word32, uint16)
	ax = CONVERT(v16 /u cx, word16, uint16)
	SCZO = cond(ax)
	si = ax
	si = si | si
	SZ = cond(si)
	O = false
	C = false
	branch Test(EQ,Z) l1825_6D42
	// succ:  l1825_6D38 l1825_6D42
l1825_6D38:
	ax = si - 1<i16>
	Mem0[es:bx + 8<i16>:word16] = ax
	goto l1825_6D48
	// succ:  l1825_6D48
l1825_6D42:
	Mem0[es:bx + 8<i16>:word16] = 0<16>
	// succ:  l1825_6D48
l1825_6D48:
	ax = Mem0[ss:bp + 6<i16>:word16]
	dx = dx - dx
	SCZO = cond(dx)
	cx = 0xA<16>
	v21 = dx_ax
	dx = CONVERT(v21 %u cx, word32, uint16)
	ax = CONVERT(v21 /u cx, word16, uint16)
	SCZO = cond(ax)
	si = dx
	si = si | si
	SZ = cond(si)
	O = false
	C = false
	branch Test(EQ,Z) l1825_6D62
	// succ:  l1825_6D58 l1825_6D62
l1825_6D58:
	ax = si - 1<i16>
	Mem0[es:bx + 16<i16>:word16] = ax
	goto l1825_6D6B
	// succ:  l1825_6D6B
l1825_6D62:
	es_bx = Mem0[ss:bp + 8<i16>:segptr32]
	Mem0[es:bx + 16<i16>:word16] = 0<16>
	// succ:  l1825_6D6B
l1825_6D6B:
	ax = Mem0[ss:bp + 6<i16>:word16]
	Mem0[es:bx + 22<i16>:word16] = ax
	Mem0[ss:bp - 2<i16>:word16] = 1<16>
	// succ:  l1825_6D77
l1825_6D77:
	ax = Mem0[ss:bp - 2<i16>:word16]
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_6D08_exit
fn1825_6D08_exit:


// fn1825_6D80
// Return size: 4
define fn1825_6D80
fn1825_6D80_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l1825_6D80
l1825_6D80:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	SCZO = cond(Mem0[es:bx + 26<i16>:word16] - 0<16>)
	branch Test(NE,Z) l1825_6DA4
	// succ:  l1825_6D8D l1825_6DA4
l1825_6D8D:
	ax = Mem0[es:bx + 22<i16>:word16]
	dx = dx - dx
	SCZO = cond(dx)
	cx = 0xA<16>
	v15 = dx_ax
	dx = CONVERT(v15 %u cx, word32, uint16)
	ax = CONVERT(v15 /u cx, word16, uint16)
	SCZO = cond(ax)
	dx = dx | dx
	SZ = cond(dx)
	O = false
	C = false
	branch Test(EQ,Z) l1825_6DDD
	// succ:  l1825_6D9C l1825_6DDD
l1825_6D9C:
	Mem0[es:bx + 6<i16>:word16] = 0<16>
	goto l1825_6DE3
	// succ:  l1825_6DE3
l1825_6DA4:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = es
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bx
	v19 = Mem0[es:bx + 28<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v19
	call fn1825_6D08 (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	ax = Mem0[es:bx + 24<i16>:word16]
	ax = ax | ax
	SZ = cond(ax)
	O = false
	C = false
	branch Test(EQ,Z) l1825_6DCE
	// succ:  l1825_6DBC l1825_6DCE
l1825_6DBC:
	SCZO = cond(ax - 1<16>)
	branch Test(EQ,Z) l1825_6DDD
	// succ:  l1825_6DC1 l1825_6DDD
l1825_6DC1:
	SCZO = cond(ax - 2<16>)
	branch Test(EQ,Z) l1825_6D9C
	// succ:  l1825_6DC6 l1825_6D9C
l1825_6DC6:
	SCZO = cond(ax - 3<16>)
	branch Test(EQ,Z) l1825_6E0A
	// succ:  l1825_6DCB l1825_6E0A
l1825_6DCB:
	goto l1825_6DE9
	// succ:  l1825_6DE9
l1825_6DCE:
	ax = Mem0[es:bx + 22<i16>:word16]
	dx = dx - dx
	SCZO = cond(dx)
	cx = 0xA<16>
	v20 = dx_ax
	dx = CONVERT(v20 %u cx, word32, uint16)
	ax = CONVERT(v20 /u cx, word16, uint16)
	SCZO = cond(ax)
	dx = dx | dx
	SZ = cond(dx)
	O = false
	C = false
	branch Test(NE,Z) l1825_6D9C
	// succ:  l1825_6DDD l1825_6D9C
l1825_6DDD:
	Mem0[es:bx + 6<i16>:word16] = 1<16>
	// succ:  l1825_6DE3
l1825_6DE3:
	Mem0[es:bx + 14<i16>:word16] = 1<16>
	// succ:  l1825_6DE9
l1825_6DE9:
	Mem0[es:bx + 4<i16>:word16] = 1<16>
	Mem0[es:bx + 12<i16>:word16] = 1<16>
	Mem0[es:bx + 24<i16>:word16] = 0<16>
	Mem0[es:bx + 26<i16>:word16] = 0<16>
	Mem0[es:bx + 22<i16>:word16] = 0<16>
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_6D80_exit
l1825_6E0A:
	Mem0[es:bx + 6<i16>:word16] = 0<16>
	Mem0[es:bx + 14<i16>:word16] = 0<16>
	goto l1825_6DE9
	// succ:  l1825_6DE9
fn1825_6D80_exit:


// fn1825_6E18
// Return size: 4
define fn1825_6E18
fn1825_6E18_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l1825_6E18
l1825_6E18:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 4<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	Mem0[ss:bp - 4<i16>:word16] = 1<16>
	ax = Mem0[ds:0x128A<16>:word16]
	Mem0[ss:bp - 2<i16>:word16] = ax
	goto l1825_6E49
	// succ:  l1825_6E49
l1825_6E2C:
	ax = Mem0[ss:bp + 6<i16>:word16]
	SCZO = cond(Mem0[ss:bp - 4<i16>:word16] - ax)
	branch Test(UGE,C) l1825_6E4F
	// succ:  l1825_6E34 l1825_6E4F
l1825_6E34:
	ax = 0x16<16>
	dx_ax = Mem0[ss:bp - 2<i16>:word16] *u32 ax
	SCZO = cond(dx_ax)
	bx = ax
	es_si = Mem0[ds:0x1282<16>:segptr32]
	ax = Mem0[es:bx + si:word16]
	Mem0[ss:bp - 2<i16>:word16] = ax
	v16 = Mem0[ss:bp - 4<i16>:word16] + 1<16>
	Mem0[ss:bp - 4<i16>:word16] = v16
	SZO = cond(v16)
	// succ:  l1825_6E49
l1825_6E49:
	SCZO = cond(Mem0[ss:bp - 2<i16>:word16] - 0<16>)
	branch Test(NE,Z) l1825_6E2C
	// succ:  l1825_6E4F l1825_6E2C
l1825_6E4F:
	ax = Mem0[ss:bp - 2<i16>:word16]
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_6E18_exit
fn1825_6E18_exit:


// fn1825_6E58
// Return size: 4
define fn1825_6E58
fn1825_6E58_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l1825_6E58
l1825_6E58:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 6<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	ax = Mem0[ds:0x128A<16>:word16]
	Mem0[ss:bp - 2<i16>:word16] = ax
	ax = Mem0[ds:0x1288<16>:word16]
	Mem0[ss:bp - 4<i16>:word16] = ax
	Mem0[ss:bp - 6<i16>:word16] = 1<16>
	goto l1825_6E96
	// succ:  l1825_6E96
l1825_6E72:
	ax = Mem0[ss:bp + 6<i16>:word16]
	SCZO = cond(Mem0[ss:bp - 6<i16>:word16] - ax)
	branch Test(UGE,C) l1825_6E9C
	// succ:  l1825_6E7A l1825_6E9C
l1825_6E7A:
	ax = Mem0[ss:bp - 2<i16>:word16]
	ax = ax - 1<16>
	SZO = cond(ax)
	Mem0[ss:bp - 4<i16>:word16] = ax
	ax = 0x16<16>
	dx_ax = Mem0[ss:bp - 2<i16>:word16] *u32 ax
	SCZO = cond(dx_ax)
	bx = ax
	es_si = Mem0[ds:0x1282<16>:segptr32]
	ax = Mem0[es:bx + si:word16]
	Mem0[ss:bp - 2<i16>:word16] = ax
	v17 = Mem0[ss:bp - 6<i16>:word16] + 1<16>
	Mem0[ss:bp - 6<i16>:word16] = v17
	SZO = cond(v17)
	// succ:  l1825_6E96
l1825_6E96:
	SCZO = cond(Mem0[ss:bp - 2<i16>:word16] - 0<16>)
	branch Test(NE,Z) l1825_6E72
	// succ:  l1825_6E9C l1825_6E72
l1825_6E9C:
	ax = Mem0[ss:bp - 4<i16>:word16]
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_6E58_exit
fn1825_6E58_exit:


// fn1825_6EA4
// Return size: 4
define fn1825_6EA4
fn1825_6EA4_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l1825_6EA4
l1825_6EA4:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x10<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 12<i16>:word16] = 1<16>
	call fn1F38_0517 (retsize: 4;)
	al = ah
	ah = ah - ah
	SCZO = cond(ah)
	Mem0[ss:bp - 8<i16>:word16] = ax
	call fn1F38_0517 (retsize: 4;)
	ah = ah - ah
	SCZO = cond(ah)
	Mem0[ss:bp - 16<i16>:word16] = ax
	Mem0[ss:bp - 6<i16>:word16] = 0xA<16>
	Mem0[ss:bp - 14<i16>:word16] = 0x14<16>
	Mem0[ss:bp - 4<i16>:word16] = 0x12<16>
	Mem0[ss:bp - 2<i16>:word16] = 0x3C<16>
	Mem0[ds:0xA08<16>:word16] = 0xA<16>
	Mem0[ds:0xA0A<16>:word16] = 0x14<16>
	Mem0[ds:0xA0C<16>:word16] = 0x12<16>
	Mem0[ds:0xA0E<16>:word16] = 0x3C<16>
	Mem0[ds:0xA10<16>:word16] = 0<16>
	ax = ax - ax
	SCZO = cond(ax)
	Mem0[ds:0xA14<16>:word16] = ax
	Mem0[ds:0xA12<16>:word16] = ax
	SCZO = cond(Mem0[ds:0xF02<16>:word16] - ax)
	branch Test(EQ,Z) l1825_6F11
	// succ:  l1825_6F05 l1825_6F11
l1825_6F05:
	ax = 0xA08<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1825_703C (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	// succ:  l1825_6F11
l1825_6F11:
	ax = 0xA5E<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v12 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v12
	v13 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v13
	v14 = Mem0[ss:bp - 14<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v14
	v15 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v15
	call fn1F38_05DB (retsize: 4;)
	sp = sp + 0xC<16>
	SCZO = cond(sp)
	ax = 0xA36<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v16 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v16
	v17 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v17
	v18 = Mem0[ss:bp - 14<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v18
	v19 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v19
	call fn1F38_05DB (retsize: 4;)
	sp = sp + 0xC<16>
	SCZO = cond(sp)
	ax = Mem0[ss:bp + 6<i16>:word16]
	SCZO = cond(ax - 1<16>)
	branch Test(NE,Z) l1825_6F4E
	// succ:  l1825_6F4B l1825_6F4E
l1825_6F4B:
	goto l1825_6FFC
	// succ:  l1825_6FFC
l1825_6F4E:
	SCZO = cond(ax - 2<16>)
	branch Test(NE,Z) l1825_6F56
	// succ:  l1825_6F53 l1825_6F56
l1825_6F53:
	goto l1825_701C
	// succ:  l1825_701C
l1825_6F56:
	SCZO = cond(ax - 3<16>)
	branch Test(NE,Z) l1825_6F82
	// succ:  l1825_6F5B l1825_6F82
l1825_6F5B:
	ax = Mem0[ss:bp - 14<i16>:word16]
	ax = ax + 0xB<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 6<i16>:word16]
	ax = ax + 2<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = 0x11<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x5AE8<16>
	// succ:  l1825_6F78
l1825_6F78:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	// succ:  l1825_6F82
l1825_6F82:
	ax = Mem0[ss:bp - 14<i16>:word16]
	ax = ax + 0xA<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 6<i16>:word16]
	ax = ax + 5<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = 0x14<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x5B28<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 8<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn3431_07B6 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 12<i16>:word16] = ax
	ax = 0xA5E<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v20 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v20
	v21 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v21
	v22 = Mem0[ss:bp - 14<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v22
	v23 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v23
	call fn1F38_05DB (retsize: 4;)
	sp = sp + 0xC<16>
	SCZO = cond(sp)
	SCZO = cond(Mem0[ds:0xF02<16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_6FE7
	// succ:  l1825_6FDB l1825_6FE7
l1825_6FDB:
	ax = 0xA08<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1825_704E (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	// succ:  l1825_6FE7
l1825_6FE7:
	v24 = Mem0[ss:bp - 16<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v24
	v25 = Mem0[ss:bp - 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v25
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = ax - ax
	SCZO = cond(ax)
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_6EA4_exit
l1825_6FFC:
	ax = Mem0[ss:bp - 14<i16>:word16]
	ax = ax + 0xA<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 6<i16>:word16]
	ax = ax + 2<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = 0x13<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x5AFA<16>
	goto l1825_6F78
	// succ:  l1825_6F78
l1825_701C:
	ax = Mem0[ss:bp - 14<i16>:word16]
	ax = ax + 7<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 6<i16>:word16]
	ax = ax + 2<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = 0x19<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x5B0E<16>
	goto l1825_6F78
	// succ:  l1825_6F78
fn1825_6EA4_exit:


// fn1825_703C
// Return size: 4
define fn1825_703C
fn1825_703C_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l1825_703C
l1825_703C:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	v6 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v6
	v7 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v7
	call fn1825_4CFE (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_703C_exit
fn1825_703C_exit:


// fn1825_704E
// Return size: 4
define fn1825_704E
fn1825_704E_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l1825_704E
l1825_704E:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	v6 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v6
	v7 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v7
	call fn1825_4D78 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	v12 = Mem0[es:bx + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v12
	v13 = Mem0[es:bx + 12<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v13
	v14 = Mem0[es:bx + 10<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v14
	call fn21DC_09B4 (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_704E_exit
fn1825_704E_exit:


// fn1825_7078
// Return size: 4
define fn1825_7078
fn1825_7078_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l1825_7078
l1825_7078:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	SCZO = cond(Mem0[ss:bp + 6<i16>:word16] - 0<16>)
	branch Test(EQ,Z) l1825_70A8
	// succ:  l1825_7081 l1825_70A8
l1825_7081:
	Mem0[ds:0xEF2<16>:word16] = 0x80<16>
	Mem0[ds:0xEF4<16>:word16] = 1<16>
	Mem0[ds:0xEF6<16>:word16] = 0<16>
	Mem0[ds:0xEF8<16>:word16] = 2<16>
	Mem0[ds:0xEFA<16>:word16] = 0<16>
	Mem0[ds:0xEFC<16>:word16] = 2<16>
	goto l1825_70CC
	// succ:  l1825_70CC
l1825_70A8:
	Mem0[ds:0xEF2<16>:word16] = 0x80<16>
	Mem0[ds:0xEF4<16>:word16] = 0x40<16>
	Mem0[ds:0xEF6<16>:word16] = 0x100<16>
	Mem0[ds:0xEF8<16>:word16] = 0x40<16>
	Mem0[ds:0xEFA<16>:word16] = 0x100<16>
	Mem0[ds:0xEFC<16>:word16] = 0x40<16>
	// succ:  l1825_70CC
l1825_70CC:
	call fn1F38_07E7 (retsize: 4;)
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn1825_7078_exit
fn1825_7078_exit:


// fn1825_70D4
// Return size: 4
define fn1825_70D4
fn1825_70D4_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l1825_70D4
l1825_70D4:
	ax = Mem0[ds:0xEF2<16>:word16]
	Mem0[ds:0xC10<16>:word16] = ax
	ax = Mem0[ds:0xEF4<16>:word16]
	Mem0[ds:0xC12<16>:word16] = ax
	ax = Mem0[ds:0xEF6<16>:word16]
	Mem0[ds:0xC14<16>:word16] = ax
	ax = Mem0[ds:0xEF8<16>:word16]
	Mem0[ds:0xC16<16>:word16] = ax
	ax = Mem0[ds:0xEFA<16>:word16]
	Mem0[ds:0xC18<16>:word16] = ax
	ax = Mem0[ds:0xEFC<16>:word16]
	Mem0[ds:0xC1A<16>:word16] = ax
	ax = Mem0[ds:0xEFE<16>:word16]
	Mem0[ds:0xC1C<16>:word16] = ax
	ax = Mem0[ds:0xF00<16>:word16]
	Mem0[ds:0xC1E<16>:word16] = ax
	return
	// succ:  fn1825_70D4_exit
fn1825_70D4_exit:


// fn1825_7106
// Return size: 4
define fn1825_7106
fn1825_7106_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l1825_7106
l1825_7106:
	ax = Mem0[ds:0xC10<16>:word16]
	Mem0[ds:0xEF2<16>:word16] = ax
	ax = Mem0[ds:0xC12<16>:word16]
	Mem0[ds:0xEF4<16>:word16] = ax
	ax = Mem0[ds:0xC14<16>:word16]
	Mem0[ds:0xEF6<16>:word16] = ax
	ax = Mem0[ds:0xC16<16>:word16]
	Mem0[ds:0xEF8<16>:word16] = ax
	ax = Mem0[ds:0xC18<16>:word16]
	Mem0[ds:0xEFA<16>:word16] = ax
	ax = Mem0[ds:0xC1A<16>:word16]
	Mem0[ds:0xEFC<16>:word16] = ax
	call fn1F38_07E7 (retsize: 4;)
	return
	// succ:  fn1825_7106_exit
fn1825_7106_exit:


