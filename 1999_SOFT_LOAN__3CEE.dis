// fn3CEE_00C7
// Return size: 0
define fn3CEE_00C7
fn3CEE_00C7_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_00C7
l3CEE_00C7:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn3CEE_0244 (retsize: 4;)
	call fn3CEE_02B9 (retsize: 4;)
	sp = sp + 2<16>
	ax = 0xFF<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	sp = sp - 2<i16>
	call 0x3CEE<16>:Mem0[ds:0x3500<16>:word16] (retsize: 2;)
	v9 = Mem0[ds:si + 0xCD30<16>:byte] + dh
	Mem0[ds:si + 0xCD30<16>:byte] = v9
	SCZO = cond(v9)
	goto l3CEE_00DB_thunk_fn3CEE_00DF
	// succ:  l3CEE_00DB_thunk_fn3CEE_00DF
l3CEE_00C7:
l3CEE_00DB_thunk_fn3CEE_00DF:
	call fn3CEE_00DF (retsize: 0;)
	return
	// succ:  fn3CEE_00C7_exit
fn3CEE_00C7_exit:


// fn3CEE_00DC
// Return size: 4
define fn3CEE_00DC
fn3CEE_00DC_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_00DC
l3CEE_00DC:
	ah = 0x30<8>
	al = msdos_get_dos_version(out ah)
	// succ:  l3CEE_00DE_thunk_fn3CEE_00DF
l3CEE_00DE_thunk_fn3CEE_00DF:
	call fn3CEE_00DF (retsize: 0;)
	return
	// succ:  fn3CEE_00DC_exit
fn3CEE_00DC_exit:


// fn3CEE_00DF
// Return size: 0
define fn3CEE_00DF
fn3CEE_00DF_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_00DF
l3CEE_00DF:
	v7 = Mem0[ss:bp + 0x3575<16> + di:word16] & sp
	Mem0[ss:bp + 0x3575<16> + di:word16] = v7
	SZ = cond(Mem0[ss:bp + 0x3575<16> + di:word16])
	O = false
	C = false
	ax = 0x3500<16>
	es_bx = msdos_get_interrupt_vector(al)
	Mem0[ds:0x3561<16>:word16] = bx
	Mem0[ds:0x3563<16>:word16] = es
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = cs
	ds = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	ax = 0x2500<16>
	dx = 0xB8<16>
	msdos_set_interrupt_vector(al, ds_dx)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ss
	ds = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	cx = Mem0[ds:0x3F24<16>:word16]
	branch cx == 0<16> l3CEE_0100_thunk_fn3CEE_0130
	goto l3CEE_0100_thunk_fn3CEE_0102
	// succ:  l3CEE_0100_thunk_fn3CEE_0102 l3CEE_0100_thunk_fn3CEE_0130
l3CEE_00DF:
	Mem0[ds:0x3575<16>:word16] = ax
	ax = 0x3500<16>
	es_bx = msdos_get_interrupt_vector(al)
	Mem0[ds:0x3561<16>:word16] = bx
	Mem0[ds:0x3563<16>:word16] = es
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = cs
	ds = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	ax = 0x2500<16>
	dx = 0xB8<16>
	msdos_set_interrupt_vector(al, ds_dx)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ss
	ds = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	cx = Mem0[ds:0x3F24<16>:word16]
	branch cx == 0<16> l3CEE_0130
	// succ:  l3CEE_00FF_thunk_fn3CEE_0102 l3CEE_00FF_thunk_fn3CEE_0130
l3CEE_00FF_thunk_fn3CEE_0102:
	call fn3CEE_0102 (retsize: 0;)
	return
	// succ:  fn3CEE_00DF_exit
l3CEE_00FF_thunk_fn3CEE_0130:
	call fn3CEE_0130 (retsize: 0;)
	return
	// succ:  fn3CEE_00DF_exit
l3CEE_0100_thunk_fn3CEE_0102:
	call fn3CEE_0102 (retsize: 0;)
	return
	// succ:  fn3CEE_00DF_exit
l3CEE_0100_thunk_fn3CEE_0130:
	call fn3CEE_0130 (retsize: 0;)
	return
	// succ:  fn3CEE_00DF_exit
fn3CEE_00DF_exit:


// fn3CEE_0102
// Return size: 0
define fn3CEE_0102
fn3CEE_0102_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_0102
l3CEE_0102:
	es = Mem0[ds:0x3573<16>:selector]
	si = Mem0[es:0x2C<16>:word16]
	ds_ax = Mem0[ds:0x3F26<16>:segptr32]
	dx = ds
	bx = bx ^ bx
	SZ = cond(bx)
	O = false
	C = false
	call Mem0[ss:0x3F22<16>:segptr32] (retsize: 4;)
	branch Test(UGE,C) l3CEE_011F
	// succ:  l3CEE_011A l3CEE_011F
l3CEE_011A:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ss
	ds = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	goto l3CEE_023E
	// succ:  l3CEE_023E
l3CEE_011F:
	ds_ax = Mem0[ss:0x3F2A<16>:segptr32]
	dx = ds
	bx = 3<16>
	call Mem0[ss:0x3F22<16>:segptr32] (retsize: 4;)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ss
	ds = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	// succ:  l3CEE_012F_thunk_fn3CEE_0130
l3CEE_012F_thunk_fn3CEE_0130:
	call fn3CEE_0130 (retsize: 0;)
	return
	// succ:  fn3CEE_0102_exit
l3CEE_023E:
	ax = 2<16>
	// succ:  l3CEE_0241_thunk_fn3CEE_00C7
l3CEE_0241_thunk_fn3CEE_00C7:
	call fn3CEE_00C7 (retsize: 0;)
	return
	// succ:  fn3CEE_0102_exit
fn3CEE_0102_exit:


// fn3CEE_0130
// Return size: 0
define fn3CEE_0130
fn3CEE_0130_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_0130
l3CEE_0130:
	es = Mem0[ds:0x3573<16>:selector]
	cx = Mem0[es:0x2C<16>:word16]
	branch cx == 0<16> l3CEE_0171
	// succ:  l3CEE_013B l3CEE_0171
l3CEE_013B:
	es = cx
	di = di ^ di
	SZ = cond(di)
	O = false
	C = false
	// succ:  l3CEE_013F
l3CEE_013F:
	SCZO = cond(Mem0[es:di:byte] - 0<8>)
	branch Test(EQ,Z) l3CEE_0171
	// succ:  l3CEE_0145 l3CEE_0171
l3CEE_0145:
	cx = 0xC<16>
	si = 0x3554<16>
	v15 = memcmp(ds:si, es:di, cx *u32 1<16>)
	v16 = __find_first_difference__(ds:si, es:di)
	cx = cx - v16
	si = si + v16
	di = di + v16
	SCZO = cond(v15)
	branch Test(EQ,Z) l3CEE_015A
	// succ:  l3CEE_014F l3CEE_015A
l3CEE_014F:
	cx = 0x7FFF<16>
	ax = ax ^ ax
	SZ = cond(ax)
	O = false
	C = false
	// succ:  l3CEE_0154
l3CEE_0154:
	branch cx == 0<16> l3CEE_0156
	// succ:  l3CEE_0154_1 l3CEE_0156
l3CEE_0154_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 1<i16>
	cx = cx - 1<16>
	branch Test(EQ,Z) l3CEE_0154
	// succ:  l3CEE_0156 l3CEE_0154
l3CEE_0156:
	branch Test(NE,Z) l3CEE_0171
	// succ:  l3CEE_0158 l3CEE_0171
l3CEE_0158:
	goto l3CEE_013F
	// succ:  l3CEE_013F
l3CEE_015A:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = es
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	ds = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	si = di
	di = 0x357C<16>
	al = Mem0[ds:si:byte]
	si = si + 1<i16>
	ax = CONVERT(al, int8, int16)
	v28 = cx
	cx = ax
	ax = v28
	// succ:  l3CEE_0166
l3CEE_0166:
	al = Mem0[ds:si:byte]
	si = si + 1<i16>
	al = al + 1<8>
	SZO = cond(al)
	branch Test(EQ,Z) l3CEE_016C
	// succ:  l3CEE_016B l3CEE_016C
l3CEE_016B:
	ax = ax - 1<16>
	SZO = cond(ax)
	// succ:  l3CEE_016C
l3CEE_016C:
	Mem0[es:di:byte] = al
	di = di + 1<i16>
	cx = cx - 1<16>
	branch cx != 0<16> l3CEE_0166
	// succ:  l3CEE_016F l3CEE_0166
l3CEE_016F:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ss
	ds = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	// succ:  l3CEE_0171
l3CEE_0171:
	bx = 4<16>
	// succ:  l3CEE_0174
l3CEE_0174:
	v20 = Mem0[ds:bx + 0x357C<16>:byte] & 0xBF<8>
	Mem0[ds:bx + 0x357C<16>:byte] = v20
	SZ = cond(Mem0[ds:bx + 0x357C<16>:byte])
	O = false
	C = false
	ax = 0x4400<16>
	C = msdos_ioctl_get_device_info(bx, out dx)
	branch Test(ULT,C) l3CEE_018A
	// succ:  l3CEE_0180 l3CEE_018A
l3CEE_0180:
	SZP = cond(dl & 0x80<8>)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_018A
	// succ:  l3CEE_0185 l3CEE_018A
l3CEE_0185:
	v24 = Mem0[ds:bx + 0x357C<16>:byte] | 0x40<8>
	Mem0[ds:bx + 0x357C<16>:byte] = v24
	SZ = cond(Mem0[ds:bx + 0x357C<16>:byte])
	O = false
	C = false
	// succ:  l3CEE_018A
l3CEE_018A:
	bx = bx - 1<16>
	SZO = cond(bx)
	branch Test(NS,S) l3CEE_0174
	// succ:  l3CEE_018D l3CEE_0174
l3CEE_018D:
	si = 0x3F2E<16>
	di = 0x3F2E<16>
	call fn3CEE_022B (retsize: 2;)
	si = 0x3F2E<16>
	di = 0x3F2E<16>
	call fn3CEE_022B (retsize: 2;)
	return
	// succ:  fn3CEE_0130_exit
fn3CEE_0130_exit:


// fn3CEE_01A0
// Return size: 0
define fn3CEE_01A0
fn3CEE_01A0_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_01A0
l3CEE_01A0:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	si = 0x62A0<16>
	di = 0x62A0<16>
	call fn3CEE_022B (retsize: 2;)
	si = 0x3F2E<16>
	di = 0x3F2E<16>
	call fn3CEE_022B (retsize: 2;)
	// succ:  l3CEE_01B5_thunk_fn3CEE_01BA
l3CEE_01B5_thunk_fn3CEE_01BA:
	call fn3CEE_01BA (retsize: 0;)
	return
	// succ:  fn3CEE_01A0_exit
fn3CEE_01A0_exit:


// fn3CEE_01B7
// Return size: 0
define fn3CEE_01B7
fn3CEE_01B7_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_01B7
l3CEE_01B7:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	// succ:  l3CEE_01B8_thunk_fn3CEE_01BA
l3CEE_01B8_thunk_fn3CEE_01BA:
	call fn3CEE_01BA (retsize: 0;)
	return
	// succ:  fn3CEE_01B7_exit
fn3CEE_01B7_exit:


// fn3CEE_01BA
// Return size: 0
define fn3CEE_01BA
fn3CEE_01BA_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_01BA
l3CEE_01BA:
	si = 0x3F2E<16>
	di = 0x3F2E<16>
	call fn3CEE_022B (retsize: 2;)
	si = 0x3F2E<16>
	di = 0x3F2E<16>
	call fn3CEE_022B (retsize: 2;)
	call fn3CEE_0268 (retsize: 4;)
	ax = ax | ax
	SZ = cond(ax)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_01D3_thunk_fn3CEE_01E0
	goto l3CEE_01D3_thunk_fn3CEE_01D5
	// succ:  l3CEE_01D3_thunk_fn3CEE_01D5 l3CEE_01D3_thunk_fn3CEE_01E0
l3CEE_01BA:
	si = 0x3F2E<16>
	di = 0x3F2E<16>
	call fn3CEE_022B (retsize: 2;)
	si = 0x3F2E<16>
	di = 0x3F2E<16>
	call fn3CEE_022B (retsize: 2;)
	call fn3CEE_0268 (retsize: 4;)
	ax = ax | ax
	SZ = cond(ax)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_01E0
	goto l3CEE_01D3_thunk_fn3CEE_01D5
	// succ:  l3CEE_01D3_thunk_fn3CEE_01D5 l3CEE_01D3_thunk_fn3CEE_01E0
l3CEE_01D3_thunk_fn3CEE_01D5:
	call fn3CEE_01D5 (retsize: 0;)
	return
	// succ:  fn3CEE_01BA_exit
l3CEE_01D3_thunk_fn3CEE_01D5:
	call fn3CEE_01D5 (retsize: 0;)
	return
	// succ:  fn3CEE_01BA_exit
l3CEE_01D3_thunk_fn3CEE_01E0:
	call fn3CEE_01E0 (retsize: 0;)
	return
	// succ:  fn3CEE_01BA_exit
l3CEE_01D3_thunk_fn3CEE_01E0:
	call fn3CEE_01E0 (retsize: 0;)
	return
	// succ:  fn3CEE_01BA_exit
fn3CEE_01BA_exit:


// fn3CEE_01D5
// Return size: 0
define fn3CEE_01D5
fn3CEE_01D5_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_01D5
l3CEE_01D5:
	SCZO = cond(Mem0[ss:bp + 6<i16>:word16] - 0<16>)
	branch Test(NE,Z) l3CEE_01E0
	goto l3CEE_01DB
	// succ:  l3CEE_01DB l3CEE_01D9_thunk_fn3CEE_01E0
l3CEE_01D9_thunk_fn3CEE_01E0:
	call fn3CEE_01E0 (retsize: 0;)
	return
	// succ:  fn3CEE_01D5_exit
l3CEE_01DB:
	Mem0[ss:bp + 6<i16>:word16] = 0xFF<16>
	// succ:  l3CEE_01DB_thunk_fn3CEE_01E0
l3CEE_01DB_thunk_fn3CEE_01E0:
	call fn3CEE_01E0 (retsize: 0;)
	return
	// succ:  fn3CEE_01D5_exit
fn3CEE_01D5_exit:


// fn3CEE_01E0
// Return size: 0
define fn3CEE_01E0
fn3CEE_01E0_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_01E0
l3CEE_01E0:
	cx = 0xF<16>
	bx = 5<16>
	// succ:  l3CEE_01E6
l3CEE_01E6:
	SZP = cond(Mem0[ds:bx + 0x357C<16>:byte] & 1<8>)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_01F1
	// succ:  l3CEE_01ED l3CEE_01F1
l3CEE_01ED:
	ah = 0x3E<8>
	C = msdos_close_file(bx)
	// succ:  l3CEE_01F1
l3CEE_01F1:
	bx = bx + 1<16>
	SZO = cond(bx)
	cx = cx - 1<16>
	branch cx != 0<16> l3CEE_01E6
	// succ:  l3CEE_01F4 l3CEE_01E6
l3CEE_01F4:
	call fn3CEE_01FE (retsize: 2;)
	ax = Mem0[ss:bp + 6<i16>:word16]
	ah = 0x4C<8>
	msdos_terminate(al)
fn3CEE_01E0_exit:


// fn3CEE_01FE
// Return size: 2
define fn3CEE_01FE
fn3CEE_01FE_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_01FE
l3CEE_01FE:
	cx = Mem0[ds:0x3F24<16>:word16]
	branch cx == 0<16> l3CEE_020B
	// succ:  l3CEE_0204 l3CEE_020B
l3CEE_0204:
	bx = 2<16>
	call Mem0[ds:0x3F22<16>:segptr32] (retsize: 4;)
	// succ:  l3CEE_020B
l3CEE_020B:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	ds_dx = Mem0[ds:0x3561<16>:segptr32]
	ax = 0x2500<16>
	msdos_set_interrupt_vector(al, ds_dx)
	ds = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	SCZO = cond(Mem0[ds:0x35A2<16>:byte] - 0<8>)
	branch Test(EQ,Z) l3CEE_022A
	// succ:  l3CEE_021D l3CEE_022A
l3CEE_021D:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	al = Mem0[ds:0x35A3<16>:byte]
	ds_dx = Mem0[ds:0x35A4<16>:segptr32]
	ah = 0x25<8>
	msdos_set_interrupt_vector(al, ds_dx)
	ds = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	// succ:  l3CEE_022A
l3CEE_022A:
	return
	// succ:  fn3CEE_01FE_exit
fn3CEE_01FE_exit:


// fn3CEE_022B
// Return size: 2
define fn3CEE_022B
fn3CEE_022B_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_022B
l3CEE_022B:
	SCZO = cond(si - di)
	branch Test(UGE,C) l3CEE_023D
	// succ:  l3CEE_022F l3CEE_023D
l3CEE_022F:
	di = di - 4<16>
	SCZO = cond(di)
	ax = Mem0[ds:di:word16]
	ax = ax | Mem0[ds:di + 2<i16>:word16]
	SZ = cond(ax)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_022B
	// succ:  l3CEE_0239 l3CEE_022B
l3CEE_0239:
	call Mem0[ds:di:segptr32] (retsize: 4;)
	goto l3CEE_022B
	// succ:  l3CEE_022B
l3CEE_023D:
	return
	// succ:  fn3CEE_022B_exit
fn3CEE_022B_exit:


// fn3CEE_0244
// Return size: 4
define fn3CEE_0244
fn3CEE_0244_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_0244
l3CEE_0244:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	ax = 0xFC<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn3CEE_02B9 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(Mem0[ds:0x35AA<16>:word16] - 0<16>)
	branch Test(EQ,Z) l3CEE_025B
	// succ:  l3CEE_0257 l3CEE_025B
l3CEE_0257:
	call Mem0[ds:0x35A8<16>:segptr32] (retsize: 4;)
	// succ:  l3CEE_025B
l3CEE_025B:
	ax = 0xFF<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn3CEE_02B9 (retsize: 4;)
	sp = sp + 2<16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn3CEE_0244_exit
fn3CEE_0244_exit:


// fn3CEE_0268
// Return size: 4
define fn3CEE_0268
fn3CEE_0268_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_0268
l3CEE_0268:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	si = si ^ si
	SZ = cond(si)
	O = false
	C = false
	cx = 0x42<16>
	ah = ah ^ ah
	SZ = cond(ah)
	O = false
	C = false
	D = false
	// succ:  l3CEE_0271
l3CEE_0271:
	al = Mem0[ds:si:byte]
	si = si + 1<i16>
	ah = ah ^ al
	SZ = cond(ah)
	O = false
	C = false
	cx = cx - 1<16>
	branch cx != 0<16> l3CEE_0271
	// succ:  l3CEE_0276 l3CEE_0271
l3CEE_0276:
	ah = ah ^ 0x55<8>
	SZ = cond(ah)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_028C
	// succ:  l3CEE_027B l3CEE_028C
l3CEE_027B:
	call fn3CEE_0244 (retsize: 4;)
	ax = 1<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn3CEE_02B9 (retsize: 4;)
	sp = sp + 2<16>
	ax = 1<16>
	// succ:  l3CEE_028C
l3CEE_028C:
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn3CEE_0268_exit
fn3CEE_0268_exit:


// fn3CEE_028E
// Return size: 4
define fn3CEE_028E
fn3CEE_028E_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_028E
l3CEE_028E:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	dx = Mem0[ss:bp + 6<i16>:word16]
	si = 0x6271<16>
	// succ:  l3CEE_029B
l3CEE_029B:
	ax = Mem0[ds:si:word16]
	si = si + 2<i16>
	SCZO = cond(ax - dx)
	branch Test(EQ,Z) l3CEE_02B0
	// succ:  l3CEE_02A0 l3CEE_02B0
l3CEE_02A0:
	ax = ax + 1<16>
	SZO = cond(ax)
	v15 = si
	si = ax
	ax = v15
	branch Test(EQ,Z) l3CEE_02B0
	// succ:  l3CEE_02A4 l3CEE_02B0
l3CEE_02A4:
	v16 = di
	di = ax
	ax = v16
	ax = ax ^ ax
	SZ = cond(ax)
	O = false
	C = false
	cx = 0xFFFF<16>
	// succ:  l3CEE_02AA
l3CEE_02AA:
	branch cx == 0<16> l3CEE_02AC
	// succ:  l3CEE_02AA_1 l3CEE_02AC
l3CEE_02AA_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 1<i16>
	cx = cx - 1<16>
	branch Test(EQ,Z) l3CEE_02AA
	// succ:  l3CEE_02AC l3CEE_02AA
l3CEE_02AC:
	si = di
	goto l3CEE_029B
	// succ:  l3CEE_029B
l3CEE_02B0:
	v22 = si
	si = ax
	ax = v22
	di = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn3CEE_028E_exit
fn3CEE_028E_exit:


// fn3CEE_02B9
// Return size: 4
define fn3CEE_02B9
fn3CEE_02B9_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_02B9
l3CEE_02B9:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	v7 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v7
	call fn3CEE_028E (retsize: 4;)
	sp = sp + 2<16>
	ax = ax | ax
	SZ = cond(ax)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_02DD
	// succ:  l3CEE_02C9 l3CEE_02DD
l3CEE_02C9:
	v13 = dx
	dx = ax
	ax = v13
	di = dx
	ax = ax ^ ax
	SZ = cond(ax)
	O = false
	C = false
	cx = 0xFFFF<16>
	// succ:  l3CEE_02D1
l3CEE_02D1:
	branch cx == 0<16> l3CEE_02D3
	// succ:  l3CEE_02D1_1 l3CEE_02D3
l3CEE_02D1_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 1<i16>
	cx = cx - 1<16>
	branch Test(EQ,Z) l3CEE_02D1
	// succ:  l3CEE_02D3 l3CEE_02D1
l3CEE_02D3:
	cx = ~cx
	cx = cx - 1<16>
	SZO = cond(cx)
	bx = 2<16>
	ah = 0x40<8>
	C = msdos_write_file(bx, cx, ds_dx, out ax)
	// succ:  l3CEE_02DD
l3CEE_02DD:
	di = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn3CEE_02B9_exit
fn3CEE_02B9_exit:


// fn3CEE_02E4
// Return size: 4
define fn3CEE_02E4
fn3CEE_02E4_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_02E4
l3CEE_02E4:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	ds = Mem0[ds:0x3573<16>:selector]
	cx = cx ^ cx
	SZ = cond(cx)
	O = false
	C = false
	ax = cx
	bp = cx
	di = cx
	cx = cx - 1<16>
	SZO = cond(cx)
	si = Mem0[ds:0x2C<16>:word16]
	si = si | si
	SZ = cond(si)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_0305
	// succ:  l3CEE_02FD l3CEE_0305
l3CEE_02FD:
	es = si
	// succ:  l3CEE_02FF
l3CEE_02FF:
	branch cx == 0<16> l3CEE_0301
	// succ:  l3CEE_02FF_1 l3CEE_0301
l3CEE_02FF_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 1<i16>
	cx = cx - 1<16>
	branch Test(EQ,Z) l3CEE_02FF
	// succ:  l3CEE_0301 l3CEE_02FF
l3CEE_0301:
	bp = bp + 1<16>
	SZO = cond(bp)
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 1<i16>
	branch Test(NE,Z) l3CEE_02FF
	// succ:  l3CEE_0305 l3CEE_02FF
l3CEE_0305:
	bp = bp + 1<16>
	SZO = cond(bp)
	v19 = di
	di = ax
	ax = v19
	ax = ax + 1<16>
	SZO = cond(ax)
	al = al & 0xFE<8>
	SZ = cond(al)
	O = false
	C = false
	di = bp
	bp = bp << 1<16>
	SCZO = cond(bp)
	bp = bp << 1<16>
	SCZO = cond(bp)
	ax = ax + bp
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ss
	ds = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	di = 9<16>
	call fn3CEE_09D8 (retsize: 2;)
	di = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	cx = di
	di = bp
	di = di + ax
	SCZO = cond(di)
	Mem0[ds:0x3596<16>:word16] = bp
	Mem0[ds:0x3598<16>:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	ds = si
	si = si ^ si
	SZ = cond(si)
	O = false
	C = false
	cx = cx - 1<16>
	SZO = cond(cx)
	branch cx == 0<16> l3CEE_034A
	// succ:  l3CEE_0333 l3CEE_034A
l3CEE_0333:
	SCZO = cond(Mem0[ds:si:word16] - 0x433B<16>)
	branch Test(EQ,Z) l3CEE_0342
	// succ:  l3CEE_0339 l3CEE_0342
l3CEE_0339:
	Mem0[ss:bp:word16] = di
	Mem0[ss:bp + 2<i16>:word16] = es
	bp = bp + 4<16>
	SCZO = cond(bp)
	// succ:  l3CEE_0342
l3CEE_0342:
	al = Mem0[ds:si:byte]
	si = si + 1<i16>
	Mem0[es:di:byte] = al
	di = di + 1<i16>
	al = al | al
	SZ = cond(al)
	O = false
	C = false
	branch Test(NE,Z) l3CEE_0342
	// succ:  l3CEE_0348 l3CEE_0342
l3CEE_0348:
	cx = cx - 1<16>
	branch cx != 0<16> l3CEE_0333
	// succ:  l3CEE_034A l3CEE_0333
l3CEE_034A:
	Mem0[ss:bp:word16] = cx
	Mem0[ss:bp + 2<i16>:word16] = cx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ss
	ds = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn3CEE_02E4_exit
fn3CEE_02E4_exit:


// fn3CEE_0358
// Return size: 0
define fn3CEE_0358
fn3CEE_0358_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_0358
l3CEE_0358:
	Mem0[ds:0x35AC<16>:word16] = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	Mem0[ds:0x35AE<16>:word16] = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	dx = 2<16>
	SCZO = cond(Mem0[ds:0x3575<16>:byte] - dl)
	branch Test(EQ,Z) l3CEE_0392
	// succ:  l3CEE_0369 l3CEE_0392
l3CEE_0369:
	es = Mem0[ds:0x3573<16>:selector]
	es = Mem0[es:0x2C<16>:selector]
	Mem0[ds:0x359C<16>:word16] = es
	ax = ax ^ ax
	SZ = cond(ax)
	O = false
	C = false
	dx_ax = CONVERT(ax, int16, int32)
	cx = 0x8000<16>
	di = di ^ di
	SZ = cond(di)
	O = false
	C = false
	// succ:  l3CEE_037E
l3CEE_037E:
	branch cx == 0<16> l3CEE_0380
	// succ:  l3CEE_037E_1 l3CEE_0380
l3CEE_037E_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 1<i16>
	cx = cx - 1<16>
	branch Test(EQ,Z) l3CEE_037E
	// succ:  l3CEE_0380 l3CEE_037E
l3CEE_0380:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 1<i16>
	branch Test(NE,Z) l3CEE_037E
	// succ:  l3CEE_0383 l3CEE_037E
l3CEE_0383:
	di = di + 1<16>
	SZO = cond(di)
	di = di + 1<16>
	SZO = cond(di)
	Mem0[ds:0x359A<16>:word16] = di
	cx = 0xFFFF<16>
	// succ:  l3CEE_038C
l3CEE_038C:
	branch cx == 0<16> l3CEE_038E
	// succ:  l3CEE_038C_2 l3CEE_038E
l3CEE_038C_2:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 1<i16>
	cx = cx - 1<16>
	branch Test(EQ,Z) l3CEE_038C
	// succ:  l3CEE_038E l3CEE_038C
l3CEE_038E:
	cx = ~cx
	dx = cx
	// succ:  l3CEE_0392
l3CEE_0392:
	di = 1<16>
	si = 0x81<16>
	ds = Mem0[ds:0x3573<16>:selector]
	// succ:  l3CEE_039C
l3CEE_039C:
	al = Mem0[ds:si:byte]
	si = si + 1<i16>
	SCZO = cond(al - 0x20<8>)
	branch Test(EQ,Z) l3CEE_039C
	// succ:  l3CEE_03A1 l3CEE_039C
l3CEE_03A1:
	SCZO = cond(al - 9<8>)
	branch Test(EQ,Z) l3CEE_039C
	// succ:  l3CEE_03A5 l3CEE_039C
l3CEE_03A5:
	SCZO = cond(al - 0xD<8>)
	branch Test(EQ,Z) l3CEE_0418
	// succ:  l3CEE_03A9 l3CEE_0418
l3CEE_03A9:
	al = al | al
	SZ = cond(al)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_0418
	// succ:  l3CEE_03AD l3CEE_0418
l3CEE_03AD:
	di = di + 1<16>
	SZO = cond(di)
	// succ:  l3CEE_03AE
l3CEE_03AE:
	si = si - 1<16>
	SZO = cond(si)
	// succ:  l3CEE_03AF
l3CEE_03AF:
	al = Mem0[ds:si:byte]
	si = si + 1<i16>
	SCZO = cond(al - 0x20<8>)
	branch Test(EQ,Z) l3CEE_039C
	// succ:  l3CEE_03B4 l3CEE_039C
l3CEE_03B4:
	SCZO = cond(al - 9<8>)
	branch Test(EQ,Z) l3CEE_039C
	// succ:  l3CEE_03B8 l3CEE_039C
l3CEE_03B8:
	SCZO = cond(al - 0xD<8>)
	branch Test(EQ,Z) l3CEE_0418
	// succ:  l3CEE_03BC l3CEE_0418
l3CEE_03BC:
	al = al | al
	SZ = cond(al)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_0418
	// succ:  l3CEE_03C0 l3CEE_0418
l3CEE_03C0:
	SCZO = cond(al - 0x22<8>)
	branch Test(EQ,Z) l3CEE_03E8
	// succ:  l3CEE_03C4 l3CEE_03E8
l3CEE_03C4:
	SCZO = cond(al - 0x5C<8>)
	branch Test(EQ,Z) l3CEE_03CB
	// succ:  l3CEE_03C8 l3CEE_03CB
l3CEE_03C8:
	dx = dx + 1<16>
	SZO = cond(dx)
	goto l3CEE_03AF
	// succ:  l3CEE_03AF
l3CEE_03CB:
	cx = cx ^ cx
	SZ = cond(cx)
	O = false
	C = false
	// succ:  l3CEE_03CD
l3CEE_03CD:
	cx = cx + 1<16>
	SZO = cond(cx)
	al = Mem0[ds:si:byte]
	si = si + 1<i16>
	SCZO = cond(al - 0x5C<8>)
	branch Test(EQ,Z) l3CEE_03CD
	// succ:  l3CEE_03D3 l3CEE_03CD
l3CEE_03D3:
	SCZO = cond(al - 0x22<8>)
	branch Test(EQ,Z) l3CEE_03DB
	// succ:  l3CEE_03D7 l3CEE_03DB
l3CEE_03D7:
	dx = dx + cx
	SCZO = cond(dx)
	goto l3CEE_03AE
	// succ:  l3CEE_03AE
l3CEE_03DB:
	ax = cx
	cx = cx >>u 1<16>
	SCZO = cond(cx)
	dx = dx + cx + C
	SCZO = cond(dx)
	SZP = cond(al & 1<8>)
	O = false
	C = false
	branch Test(NE,Z) l3CEE_03AF
	// succ:  l3CEE_03E5 l3CEE_03AF
l3CEE_03E5:
	goto l3CEE_03E8
	// succ:  l3CEE_03E8
l3CEE_03E7:
	si = si - 1<16>
	SZO = cond(si)
	// succ:  l3CEE_03E8
l3CEE_03E8:
	al = Mem0[ds:si:byte]
	si = si + 1<i16>
	SCZO = cond(al - 0xD<8>)
	branch Test(EQ,Z) l3CEE_0418
	// succ:  l3CEE_03ED l3CEE_0418
l3CEE_03ED:
	al = al | al
	SZ = cond(al)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_0418
	// succ:  l3CEE_03F1 l3CEE_0418
l3CEE_03F1:
	SCZO = cond(al - 0x22<8>)
	branch Test(EQ,Z) l3CEE_03AF
	// succ:  l3CEE_03F5 l3CEE_03AF
l3CEE_03F5:
	SCZO = cond(al - 0x5C<8>)
	branch Test(EQ,Z) l3CEE_03FC
	// succ:  l3CEE_03F9 l3CEE_03FC
l3CEE_03F9:
	dx = dx + 1<16>
	SZO = cond(dx)
	goto l3CEE_03E8
	// succ:  l3CEE_03E8
l3CEE_03FC:
	cx = cx ^ cx
	SZ = cond(cx)
	O = false
	C = false
	// succ:  l3CEE_03FE
l3CEE_03FE:
	cx = cx + 1<16>
	SZO = cond(cx)
	al = Mem0[ds:si:byte]
	si = si + 1<i16>
	SCZO = cond(al - 0x5C<8>)
	branch Test(EQ,Z) l3CEE_03FE
	// succ:  l3CEE_0404 l3CEE_03FE
l3CEE_0404:
	SCZO = cond(al - 0x22<8>)
	branch Test(EQ,Z) l3CEE_040C
	// succ:  l3CEE_0408 l3CEE_040C
l3CEE_0408:
	dx = dx + cx
	SCZO = cond(dx)
	goto l3CEE_03E7
	// succ:  l3CEE_03E7
l3CEE_040C:
	ax = cx
	cx = cx >>u 1<16>
	SCZO = cond(cx)
	dx = dx + cx + C
	SCZO = cond(dx)
	SZP = cond(al & 1<8>)
	O = false
	C = false
	branch Test(NE,Z) l3CEE_03E8
	// succ:  l3CEE_0416 l3CEE_03E8
l3CEE_0416:
	goto l3CEE_03AF
	// succ:  l3CEE_03AF
l3CEE_0418:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ss
	ds = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	Mem0[ds:0x3590<16>:word16] = di
	dx = dx + di
	SCZO = cond(dx)
	di = di + 1<16>
	SZO = cond(di)
	di = di << 1<16>
	SCZO = cond(di)
	di = di << 1<16>
	SCZO = cond(di)
	dx = dx + di
	SCZO = cond(dx)
	dl = dl & 0xFE<8>
	SZ = cond(dl)
	O = false
	C = false
	sp = sp - dx
	SCZO = cond(sp)
	ax = sp
	Mem0[ds:0x3592<16>:word16] = ax
	Mem0[ds:0x3594<16>:word16] = ds
	bx = ax
	di = di + bx
	SCZO = cond(di)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ss
	es = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	Mem0[ss:bx:word16] = di
	Mem0[ss:bx + 2<i16>:word16] = ss
	bx = bx + 4<16>
	SCZO = cond(bx)
	ds_si = Mem0[ds:0x359A<16>:segptr32]
	// succ:  l3CEE_0449
l3CEE_0449:
	al = Mem0[ds:si:byte]
	si = si + 1<i16>
	Mem0[es:di:byte] = al
	di = di + 1<i16>
	al = al | al
	SZ = cond(al)
	O = false
	C = false
	branch Test(NE,Z) l3CEE_0449
	// succ:  l3CEE_044F l3CEE_0449
l3CEE_044F:
	si = 0x81<16>
	ds = Mem0[ss:0x3573<16>:selector]
	goto l3CEE_045C
	// succ:  l3CEE_045C
l3CEE_0459:
	ax = ax ^ ax
	SZ = cond(ax)
	O = false
	C = false
	Mem0[es:di:byte] = al
	di = di + 1<i16>
	// succ:  l3CEE_045C
l3CEE_045C:
	al = Mem0[ds:si:byte]
	si = si + 1<i16>
	SCZO = cond(al - 0x20<8>)
	branch Test(EQ,Z) l3CEE_045C
	// succ:  l3CEE_0461 l3CEE_045C
l3CEE_0461:
	SCZO = cond(al - 9<8>)
	branch Test(EQ,Z) l3CEE_045C
	// succ:  l3CEE_0465 l3CEE_045C
l3CEE_0465:
	SCZO = cond(al - 0xD<8>)
	branch Test(NE,Z) l3CEE_046C
	// succ:  l3CEE_0469 l3CEE_046C
l3CEE_0469:
	goto l3CEE_04F0
	// succ:  l3CEE_04F0
l3CEE_046C:
	al = al | al
	SZ = cond(al)
	O = false
	C = false
	branch Test(NE,Z) l3CEE_0473
	// succ:  l3CEE_0470 l3CEE_0473
l3CEE_0470:
	goto l3CEE_04F0
	// succ:  l3CEE_04F0
l3CEE_0473:
	Mem0[ss:bx:word16] = di
	Mem0[ss:bx + 2<i16>:word16] = ss
	bx = bx + 4<16>
	SCZO = cond(bx)
	// succ:  l3CEE_047D
l3CEE_047D:
	si = si - 1<16>
	SZO = cond(si)
	// succ:  l3CEE_047E
l3CEE_047E:
	al = Mem0[ds:si:byte]
	si = si + 1<i16>
	SCZO = cond(al - 0x20<8>)
	branch Test(EQ,Z) l3CEE_0459
	// succ:  l3CEE_0483 l3CEE_0459
l3CEE_0483:
	SCZO = cond(al - 9<8>)
	branch Test(EQ,Z) l3CEE_0459
	// succ:  l3CEE_0487 l3CEE_0459
l3CEE_0487:
	SCZO = cond(al - 0xD<8>)
	branch Test(EQ,Z) l3CEE_04ED
	// succ:  l3CEE_048B l3CEE_04ED
l3CEE_048B:
	al = al | al
	SZ = cond(al)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_04ED
	// succ:  l3CEE_048F l3CEE_04ED
l3CEE_048F:
	SCZO = cond(al - 0x22<8>)
	branch Test(EQ,Z) l3CEE_04BA
	// succ:  l3CEE_0493 l3CEE_04BA
l3CEE_0493:
	SCZO = cond(al - 0x5C<8>)
	branch Test(EQ,Z) l3CEE_049A
	// succ:  l3CEE_0497 l3CEE_049A
l3CEE_0497:
	Mem0[es:di:byte] = al
	di = di + 1<i16>
	goto l3CEE_047E
	// succ:  l3CEE_047E
l3CEE_049A:
	cx = cx ^ cx
	SZ = cond(cx)
	O = false
	C = false
	// succ:  l3CEE_049C
l3CEE_049C:
	cx = cx + 1<16>
	SZO = cond(cx)
	al = Mem0[ds:si:byte]
	si = si + 1<i16>
	SCZO = cond(al - 0x5C<8>)
	branch Test(EQ,Z) l3CEE_049C
	// succ:  l3CEE_04A2 l3CEE_049C
l3CEE_04A2:
	SCZO = cond(al - 0x22<8>)
	branch Test(EQ,Z) l3CEE_04AC
	// succ:  l3CEE_04A6 l3CEE_04AC
l3CEE_04A6:
	al = 0x5C<8>
	// succ:  l3CEE_04A8
l3CEE_04A8:
	branch cx == 0<16> l3CEE_04AA
	// succ:  l3CEE_04A8_1 l3CEE_04AA
l3CEE_04A8_1:
	Mem0[es:di:byte] = al
	di = di + 1<i16>
	cx = cx - 1<16>
	goto l3CEE_04A8
	// succ:  l3CEE_04A8
l3CEE_04AA:
	goto l3CEE_047D
	// succ:  l3CEE_047D
l3CEE_04AC:
	al = 0x5C<8>
	cx = cx >>u 1<16>
	SCZO = cond(cx)
	// succ:  l3CEE_04B0
l3CEE_04B0:
	branch cx == 0<16> l3CEE_04B2
	// succ:  l3CEE_04B0_1 l3CEE_04B2
l3CEE_04B0_1:
	Mem0[es:di:byte] = al
	di = di + 1<i16>
	cx = cx - 1<16>
	goto l3CEE_04B0
	// succ:  l3CEE_04B0
l3CEE_04B2:
	branch Test(UGE,C) l3CEE_04BA
	// succ:  l3CEE_04B4 l3CEE_04BA
l3CEE_04B4:
	al = 0x22<8>
	Mem0[es:di:byte] = al
	di = di + 1<i16>
	goto l3CEE_047E
	// succ:  l3CEE_047E
l3CEE_04B9:
	si = si - 1<16>
	SZO = cond(si)
	// succ:  l3CEE_04BA
l3CEE_04BA:
	al = Mem0[ds:si:byte]
	si = si + 1<i16>
	SCZO = cond(al - 0xD<8>)
	branch Test(EQ,Z) l3CEE_04ED
	// succ:  l3CEE_04BF l3CEE_04ED
l3CEE_04BF:
	al = al | al
	SZ = cond(al)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_04ED
	// succ:  l3CEE_04C3 l3CEE_04ED
l3CEE_04C3:
	SCZO = cond(al - 0x22<8>)
	branch Test(EQ,Z) l3CEE_047E
	// succ:  l3CEE_04C7 l3CEE_047E
l3CEE_04C7:
	SCZO = cond(al - 0x5C<8>)
	branch Test(EQ,Z) l3CEE_04CE
	// succ:  l3CEE_04CB l3CEE_04CE
l3CEE_04CB:
	Mem0[es:di:byte] = al
	di = di + 1<i16>
	goto l3CEE_04BA
	// succ:  l3CEE_04BA
l3CEE_04CE:
	cx = cx ^ cx
	SZ = cond(cx)
	O = false
	C = false
	// succ:  l3CEE_04D0
l3CEE_04D0:
	cx = cx + 1<16>
	SZO = cond(cx)
	al = Mem0[ds:si:byte]
	si = si + 1<i16>
	SCZO = cond(al - 0x5C<8>)
	branch Test(EQ,Z) l3CEE_04D0
	// succ:  l3CEE_04D6 l3CEE_04D0
l3CEE_04D6:
	SCZO = cond(al - 0x22<8>)
	branch Test(EQ,Z) l3CEE_04E0
	// succ:  l3CEE_04DA l3CEE_04E0
l3CEE_04DA:
	al = 0x5C<8>
	// succ:  l3CEE_04DC
l3CEE_04DC:
	branch cx == 0<16> l3CEE_04DE
	// succ:  l3CEE_04DC_1 l3CEE_04DE
l3CEE_04DC_1:
	Mem0[es:di:byte] = al
	di = di + 1<i16>
	cx = cx - 1<16>
	goto l3CEE_04DC
	// succ:  l3CEE_04DC
l3CEE_04DE:
	goto l3CEE_04B9
	// succ:  l3CEE_04B9
l3CEE_04E0:
	al = 0x5C<8>
	cx = cx >>u 1<16>
	SCZO = cond(cx)
	// succ:  l3CEE_04E4
l3CEE_04E4:
	branch cx == 0<16> l3CEE_04E6
	// succ:  l3CEE_04E4_1 l3CEE_04E6
l3CEE_04E4_1:
	Mem0[es:di:byte] = al
	di = di + 1<i16>
	cx = cx - 1<16>
	goto l3CEE_04E4
	// succ:  l3CEE_04E4
l3CEE_04E6:
	branch Test(UGE,C) l3CEE_047E
	// succ:  l3CEE_04E8 l3CEE_047E
l3CEE_04E8:
	al = 0x22<8>
	Mem0[es:di:byte] = al
	di = di + 1<i16>
	goto l3CEE_04BA
	// succ:  l3CEE_04BA
l3CEE_04ED:
	ax = ax ^ ax
	SZ = cond(ax)
	O = false
	C = false
	Mem0[es:di:byte] = al
	di = di + 1<i16>
	// succ:  l3CEE_04F0
l3CEE_04F0:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ss
	ds = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	Mem0[ds:bx:word16] = 0<16>
	Mem0[ds:bx + 2<i16>:word16] = 0<16>
	call Mem0[ds:0x35AC<16>:segptr32] (retsize: 0;)
	return
	// succ:  fn3CEE_0358_exit
fn3CEE_0358_exit:


// fn3CEE_0500
// Return size: 4
define fn3CEE_0500
fn3CEE_0500_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_0500
l3CEE_0500:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bx
	di = di ^ di
	SZ = cond(di)
	O = false
	C = false
	ax = Mem0[ss:bp + 8<i16>:word16]
	ax = ax | ax
	SZ = cond(ax)
	O = false
	C = false
	branch Test(GE,SO) l3CEE_0521
	goto l3CEE_050F
	// succ:  l3CEE_050F l3CEE_050D_thunk_fn3CEE_0521
l3CEE_050D_thunk_fn3CEE_0521:
	call fn3CEE_0521 (retsize: 0;)
	return
	// succ:  fn3CEE_0500_exit
l3CEE_050F:
	di = ~di
	dx = Mem0[ss:bp + 6<i16>:word16]
	C = ax != 0<16>
	ax = -ax
	SZO = cond(ax)
	C = dx != 0<16>
	dx = -dx
	SZO = cond(dx)
	ax = ax - 0<16> - C
	SCZO = cond(ax)
	Mem0[ss:bp + 8<i16>:word16] = ax
	Mem0[ss:bp + 6<i16>:word16] = dx
	// succ:  l3CEE_051E_thunk_fn3CEE_0521
l3CEE_051E_thunk_fn3CEE_0521:
	call fn3CEE_0521 (retsize: 0;)
	return
	// succ:  fn3CEE_0500_exit
fn3CEE_0500_exit:


// fn3CEE_051D
// Return size: 0
define fn3CEE_051D
fn3CEE_051D_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_051D
l3CEE_051D:
	v8 = Mem0[ds:bx + 0x656<16> + di:byte] | cl
	Mem0[ds:bx + 0x656<16> + di:byte] = v8
	SZ = cond(Mem0[ds:bx + 0x656<16> + di:byte])
	O = false
	C = false
	// succ:  l3CEE_051D_thunk_fn3CEE_0521
l3CEE_051D_thunk_fn3CEE_0521:
	call fn3CEE_0521 (retsize: 0;)
	return
	// succ:  fn3CEE_051D_exit
fn3CEE_051D_exit:


// fn3CEE_0521
// Return size: 0
define fn3CEE_0521
fn3CEE_0521_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_0521
l3CEE_0521:
	ax = Mem0[ss:bp + 12<i16>:word16]
	ax = ax | ax
	SZ = cond(ax)
	O = false
	C = false
	branch Test(GE,SO) l3CEE_053A
	// succ:  l3CEE_0528 l3CEE_053A
l3CEE_0528:
	di = ~di
	dx = Mem0[ss:bp + 10<i16>:word16]
	C = ax != 0<16>
	ax = -ax
	SZO = cond(ax)
	C = dx != 0<16>
	dx = -dx
	SZO = cond(dx)
	ax = ax - 0<16> - C
	SCZO = cond(ax)
	Mem0[ss:bp + 12<i16>:word16] = ax
	Mem0[ss:bp + 10<i16>:word16] = dx
	// succ:  l3CEE_053A
l3CEE_053A:
	ax = ax | ax
	SZ = cond(ax)
	O = false
	C = false
	branch Test(NE,Z) l3CEE_0554
	// succ:  l3CEE_053E l3CEE_0554
l3CEE_053E:
	cx = Mem0[ss:bp + 10<i16>:word16]
	ax = Mem0[ss:bp + 8<i16>:word16]
	dx = dx ^ dx
	SZ = cond(dx)
	O = false
	C = false
	v19 = dx_ax
	dx = CONVERT(v19 %u cx, word32, uint16)
	ax = CONVERT(v19 /u cx, word16, uint16)
	SCZO = cond(ax)
	bx = ax
	ax = Mem0[ss:bp + 6<i16>:word16]
	v21 = dx_ax
	dx = CONVERT(v21 %u cx, word32, uint16)
	ax = CONVERT(v21 /u cx, word16, uint16)
	SCZO = cond(ax)
	dx = bx
	goto l3CEE_0591
	// succ:  l3CEE_0591
l3CEE_0554:
	bx = ax
	cx = Mem0[ss:bp + 10<i16>:word16]
	dx = Mem0[ss:bp + 8<i16>:word16]
	ax = Mem0[ss:bp + 6<i16>:word16]
	// succ:  l3CEE_055F
l3CEE_055F:
	bx = bx >>u 1<16>
	SCZO = cond(bx)
	v23 = (cx & 1<16> << 1<8>) != 0<16>
	cx = __rcr<word16,byte>(cx, 1<8>, C)
	C = v23
	dx = dx >>u 1<16>
	SCZO = cond(dx)
	v24 = (ax & 1<16> << 1<8>) != 0<16>
	ax = __rcr<word16,byte>(ax, 1<8>, C)
	C = v24
	bx = bx | bx
	SZ = cond(bx)
	O = false
	C = false
	branch Test(NE,Z) l3CEE_055F
	// succ:  l3CEE_056B l3CEE_055F
l3CEE_056B:
	v25 = dx_ax
	dx = CONVERT(v25 %u cx, word32, uint16)
	ax = CONVERT(v25 /u cx, word16, uint16)
	SCZO = cond(ax)
	si = ax
	dx = dx ^ dx
	SZ = cond(dx)
	O = false
	C = false
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v26 = Mem0[ss:bp + 12<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v26
	v27 = Mem0[ss:bp + 10<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v27
	call fn3CEE_05A6 (retsize: 4;)
	sp = sp + 8<16>
	SCZO = cond(dx - Mem0[ss:bp + 8<i16>:word16])
	branch Test(UGT,CZ) l3CEE_058A
	// succ:  l3CEE_0583 l3CEE_058A
l3CEE_0583:
	branch Test(ULT,C) l3CEE_058D
	// succ:  l3CEE_0585 l3CEE_058D
l3CEE_0585:
	SCZO = cond(ax - Mem0[ss:bp + 6<i16>:word16])
	branch Test(ULE,CZ) l3CEE_058D
	// succ:  l3CEE_058A l3CEE_058D
l3CEE_058A:
	si = si - 1<16>
	SCZO = cond(si)
	// succ:  l3CEE_058D
l3CEE_058D:
	dx = dx ^ dx
	SZ = cond(dx)
	O = false
	C = false
	ax = si
	// succ:  l3CEE_0591
l3CEE_0591:
	di = di | di
	SZ = cond(di)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_059C
	// succ:  l3CEE_0595 l3CEE_059C
l3CEE_0595:
	C = dx != 0<16>
	dx = -dx
	SZO = cond(dx)
	C = ax != 0<16>
	ax = -ax
	SZO = cond(ax)
	dx = dx - 0<16> - C
	SCZO = cond(dx)
	// succ:  l3CEE_059C
l3CEE_059C:
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	di = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn3CEE_0521_exit
fn3CEE_0521_exit:


// fn3CEE_05A6
// Return size: 4
define fn3CEE_05A6
fn3CEE_05A6_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_05A6
l3CEE_05A6:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	ax = Mem0[ss:bp + 8<i16>:word16]
	bx = Mem0[ss:bp + 12<i16>:word16]
	bx = bx | ax
	SZ = cond(bx)
	O = false
	C = false
	bx = Mem0[ss:bp + 10<i16>:word16]
	branch Test(NE,Z) l3CEE_05C1
	// succ:  l3CEE_05B6 l3CEE_05C1
l3CEE_05B6:
	ax = Mem0[ss:bp + 6<i16>:word16]
	dx_ax = bx *u32 ax
	SCZO = cond(dx_ax)
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn3CEE_05A6_exit
l3CEE_05C1:
	dx_ax = bx *u32 ax
	SCZO = cond(dx_ax)
	cx = ax
	ax = Mem0[ss:bp + 6<i16>:word16]
	dx_ax = Mem0[ss:bp + 12<i16>:word16] *u32 ax
	SCZO = cond(dx_ax)
	cx = cx + ax
	SCZO = cond(cx)
	ax = Mem0[ss:bp + 6<i16>:word16]
	dx_ax = bx *u32 ax
	SCZO = cond(dx_ax)
	dx = dx + cx
	SCZO = cond(dx)
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn3CEE_05A6_exit
fn3CEE_05A6_exit:


// fn3CEE_05DA
// Return size: 4
define fn3CEE_05DA
fn3CEE_05DA_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_05DA
l3CEE_05DA:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	di = di ^ di
	SZ = cond(di)
	O = false
	C = false
	ax = Mem0[ss:bp + 8<i16>:word16]
	ax = ax | ax
	SZ = cond(ax)
	O = false
	C = false
	branch Test(GE,SO) l3CEE_05FA
	// succ:  l3CEE_05E8 l3CEE_05FA
l3CEE_05E8:
	di = ~di
	dx = Mem0[ss:bp + 6<i16>:word16]
	C = ax != 0<16>
	ax = -ax
	SZO = cond(ax)
	C = dx != 0<16>
	dx = -dx
	SZO = cond(dx)
	ax = ax - 0<16> - C
	SCZO = cond(ax)
	Mem0[ss:bp + 8<i16>:word16] = ax
	Mem0[ss:bp + 6<i16>:word16] = dx
	// succ:  l3CEE_05FA
l3CEE_05FA:
	ax = Mem0[ss:bp + 12<i16>:word16]
	ax = ax | ax
	SZ = cond(ax)
	O = false
	C = false
	branch Test(GE,SO) l3CEE_0611
	// succ:  l3CEE_0601 l3CEE_0611
l3CEE_0601:
	dx = Mem0[ss:bp + 10<i16>:word16]
	C = ax != 0<16>
	ax = -ax
	SZO = cond(ax)
	C = dx != 0<16>
	dx = -dx
	SZO = cond(dx)
	ax = ax - 0<16> - C
	SCZO = cond(ax)
	Mem0[ss:bp + 12<i16>:word16] = ax
	Mem0[ss:bp + 10<i16>:word16] = dx
	// succ:  l3CEE_0611
l3CEE_0611:
	ax = ax | ax
	SZ = cond(ax)
	O = false
	C = false
	branch Test(NE,Z) l3CEE_062F
	// succ:  l3CEE_0615 l3CEE_062F
l3CEE_0615:
	cx = Mem0[ss:bp + 10<i16>:word16]
	ax = Mem0[ss:bp + 8<i16>:word16]
	dx = dx ^ dx
	SZ = cond(dx)
	O = false
	C = false
	v19 = dx_ax
	dx = CONVERT(v19 %u cx, word32, uint16)
	ax = CONVERT(v19 /u cx, word16, uint16)
	SCZO = cond(ax)
	ax = Mem0[ss:bp + 6<i16>:word16]
	v20 = dx_ax
	dx = CONVERT(v20 %u cx, word32, uint16)
	ax = CONVERT(v20 /u cx, word16, uint16)
	SCZO = cond(ax)
	ax = dx
	dx = dx ^ dx
	SZ = cond(dx)
	O = false
	C = false
	di = di | di
	SZ = cond(di)
	O = false
	C = false
	branch Test(NE,Z) l3CEE_0673
	goto l3CEE_062C
	// succ:  l3CEE_062C l3CEE_062A_thunk_fn3CEE_0645
l3CEE_062A_thunk_fn3CEE_0645:
	call fn3CEE_0645 (retsize: 0;)
	return
	// succ:  fn3CEE_05DA_exit
l3CEE_062C:
	// succ:  l3CEE_062C_thunk_fn3CEE_0645
l3CEE_062C_thunk_fn3CEE_0645:
	call fn3CEE_0645 (retsize: 0;)
	return
	// succ:  fn3CEE_05DA_exit
l3CEE_062F:
	bx = ax
	cx = Mem0[ss:bp + 10<i16>:word16]
	dx = Mem0[ss:bp + 8<i16>:word16]
	ax = Mem0[ss:bp + 6<i16>:word16]
	// succ:  l3CEE_0637_thunk_fn3CEE_0645
l3CEE_0637_thunk_fn3CEE_0645:
	call fn3CEE_0645 (retsize: 0;)
	return
	// succ:  fn3CEE_05DA_exit
fn3CEE_05DA_exit:


// fn3CEE_063A
// Return size: 0
define fn3CEE_063A
fn3CEE_063A_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_063A
l3CEE_063A:
	bx = bx >>u 1<16>
	SCZO = cond(bx)
	v8 = (cx & 1<16> << 1<8>) != 0<16>
	cx = __rcr<word16,byte>(cx, 1<8>, C)
	C = v8
	dx = dx >>u 1<16>
	SCZO = cond(dx)
	v12 = (ax & 1<16> << 1<8>) != 0<16>
	ax = __rcr<word16,byte>(ax, 1<8>, C)
	C = v12
	bx = bx | bx
	SZ = cond(bx)
	O = false
	C = false
	// succ:  l3CEE_0642_thunk_fn3CEE_0644
l3CEE_0642_thunk_fn3CEE_0644:
	call fn3CEE_0644 (retsize: 0;)
	return
	// succ:  fn3CEE_063A_exit
fn3CEE_063A_exit:


// fn3CEE_0644
// Return size: 0
define fn3CEE_0644
fn3CEE_0644_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_0644
l3CEE_0644:
	branch Test(NE,Z) l3CEE_0644_thunk_fn3CEE_063A
	goto l3CEE_0644_thunk_fn3CEE_0646
	// succ:  l3CEE_0644_thunk_fn3CEE_0646 l3CEE_0644_thunk_fn3CEE_063A
l3CEE_0644:
	branch Test(NE,Z) l3CEE_063A
l3CEE_0644_thunk_fn3CEE_063A:
	call fn3CEE_063A (retsize: 0;)
	return
	// succ:  fn3CEE_0644_exit
l3CEE_0644_thunk_fn3CEE_0646:
	call fn3CEE_0646 (retsize: 0;)
	return
	// succ:  fn3CEE_0644_exit
fn3CEE_0644_exit:


// fn3CEE_0645
// Return size: 0
define fn3CEE_0645
fn3CEE_0645_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_0645
l3CEE_0645:
	__halt()
l3CEE_0645:
	call fn3CEE_063A (retsize: 0;)
	return
	// succ:  l3CEE_0645_thunk_fn3CEE_0646 l3CEE_063A fn3CEE_0645_exit
l3CEE_0645_thunk_fn3CEE_0646:
	call fn3CEE_0646 (retsize: 0;)
	return
	// succ:  fn3CEE_0645_exit
fn3CEE_0645_exit:


// fn3CEE_0646
// Return size: 0
define fn3CEE_0646
fn3CEE_0646_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_0646
l3CEE_0646:
	v6 = dx_ax
	dx = CONVERT(v6 %u cx, word32, uint16)
	ax = CONVERT(v6 /u cx, word16, uint16)
	SCZO = cond(ax)
	dx = dx ^ dx
	SZ = cond(dx)
	O = false
	C = false
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v16 = Mem0[ss:bp + 12<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v16
	v17 = Mem0[ss:bp + 10<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v17
	call fn3CEE_05A6 (retsize: 4;)
	sp = sp + 8<16>
	SCZO = cond(dx - Mem0[ss:bp + 8<i16>:word16])
	branch Test(UGT,CZ) l3CEE_0663
	// succ:  l3CEE_065C l3CEE_0663
l3CEE_065C:
	branch Test(ULT,C) l3CEE_0669
	// succ:  l3CEE_065E l3CEE_0669
l3CEE_065E:
	SCZO = cond(ax - Mem0[ss:bp + 6<i16>:word16])
	branch Test(ULE,CZ) l3CEE_0669
	// succ:  l3CEE_0663 l3CEE_0669
l3CEE_0663:
	ax = ax - Mem0[ss:bp + 10<i16>:word16]
	SCZO = cond(ax)
	dx = dx - Mem0[ss:bp + 12<i16>:word16] - C
	SCZO = cond(dx)
	// succ:  l3CEE_0669
l3CEE_0669:
	ax = ax - Mem0[ss:bp + 6<i16>:word16]
	SCZO = cond(ax)
	dx = dx - Mem0[ss:bp + 8<i16>:word16] - C
	SCZO = cond(dx)
	di = di | di
	SZ = cond(di)
	O = false
	C = false
	branch Test(NE,Z) l3CEE_067A
	// succ:  l3CEE_0673 l3CEE_067A
l3CEE_0673:
	C = dx != 0<16>
	dx = -dx
	SZO = cond(dx)
	C = ax != 0<16>
	ax = -ax
	SZO = cond(ax)
	dx = dx - 0<16> - C
	SCZO = cond(dx)
	// succ:  l3CEE_067A
l3CEE_067A:
	di = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn3CEE_0646_exit
fn3CEE_0646_exit:


// fn3CEE_06EA
// Return size: 4
define fn3CEE_06EA
fn3CEE_06EA_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_06EA
l3CEE_06EA:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	bx = Mem0[ss:bp + 6<i16>:word16]
	v7 = Mem0[ss:bp + 10<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v7
	v8 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v8
	v10 = Mem0[ds:bx + 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v10
	v11 = Mem0[ds:bx:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v11
	call fn3CEE_05A6 (retsize: 4;)
	sp = sp + 8<16>
	bx = Mem0[ss:bp + 6<i16>:word16]
	Mem0[ds:bx:word16] = ax
	Mem0[ds:bx + 2<i16>:word16] = dx
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn3CEE_06EA_exit
fn3CEE_06EA_exit:


// fn3CEE_0732
// Return size: 4
define fn3CEE_0732
fn3CEE_0732_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_0732
l3CEE_0732:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	es_bx = Mem0[ss:bp + 6<i16>:segptr32]
	ax = es
	ax = ax | bx
	SZ = cond(ax)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_0743
	// succ:  l3CEE_073E l3CEE_0743
l3CEE_073E:
	v14 = Mem0[es:bx - 2<i16>:byte] | 1<8>
	Mem0[es:bx - 2<i16>:byte] = v14
	SZ = cond(Mem0[es:bx - 2<i16>:byte])
	O = false
	C = false
	// succ:  l3CEE_0743
l3CEE_0743:
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn3CEE_0732_exit
fn3CEE_0732_exit:


// fn3CEE_0747
// Return size: 4
define fn3CEE_0747
fn3CEE_0747_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_0747
l3CEE_0747:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	ax = Mem0[ss:bp + 6<i16>:word16]
	SCZO = cond(ax - 0xFFF1<16>)
	branch Test(UGE,C) l3CEE_0779
	// succ:  l3CEE_0757 l3CEE_0779
l3CEE_0757:
	ax = ax | ax
	SZ = cond(ax)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_0787
	// succ:  l3CEE_075B l3CEE_0787
l3CEE_075B:
	SCZO = cond(Mem0[ds:0x35B0<16>:word16] - 0<16>)
	branch Test(NE,Z) l3CEE_076A
	// succ:  l3CEE_0762 l3CEE_076A
l3CEE_0762:
	call fn3CEE_0790 (retsize: 2;)
	branch Test(EQ,Z) l3CEE_0779
	// succ:  l3CEE_0767 l3CEE_0779
l3CEE_0767:
	Mem0[ds:0x35B0<16>:word16] = ax
	// succ:  l3CEE_076A
l3CEE_076A:
	call fn3CEE_07FF (retsize: 2;)
	branch Test(NE,Z) l3CEE_078A
	// succ:  l3CEE_076F l3CEE_078A
l3CEE_076F:
	call fn3CEE_0790 (retsize: 2;)
	branch Test(EQ,Z) l3CEE_0779
	// succ:  l3CEE_0774 l3CEE_0779
l3CEE_0774:
	call fn3CEE_07FF (retsize: 2;)
	branch Test(NE,Z) l3CEE_078A
	// succ:  l3CEE_0779 l3CEE_078A
l3CEE_0779:
	v15 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v15
	call fn3CEE_098C (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	goto l3CEE_078A
	// succ:  l3CEE_078A
l3CEE_0787:
	ax = ax ^ ax
	SZ = cond(ax)
	O = false
	C = false
	dx_ax = CONVERT(ax, int16, int32)
	// succ:  l3CEE_078A
l3CEE_078A:
	di = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn3CEE_0747_exit
fn3CEE_0747_exit:


// fn3CEE_0790
// Return size: 2
define fn3CEE_0790
fn3CEE_0790_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_0790
l3CEE_0790:
	bx = 0xF0<16>
	SCZO = cond(Mem0[ss:bp + 6<i16>:word16] - bx)
	branch Test(LE,SZO) l3CEE_07A0
	// succ:  l3CEE_0798 l3CEE_07A0
l3CEE_0798:
	bx = Mem0[ss:bp + 6<i16>:word16]
	bx = bx + 1<16>
	SZO = cond(bx)
	bx = bx & 0xFFFE<16>
	SZ = cond(bx)
	O = false
	C = false
	// succ:  l3CEE_07A0
l3CEE_07A0:
	Mem0[ss:bp - 2<i16>:word16] = bx
	ax = ax ^ ax
	SZ = cond(ax)
	O = false
	C = false
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	cx = bx + 14<i16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = cx
	al = 2<8>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn3CEE_0A1A (retsize: 4;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	SCZO = cond(dx - 0xFFFF<16>)
	branch Test(EQ,Z) l3CEE_07FD
	// succ:  l3CEE_07BC l3CEE_07FD
l3CEE_07BC:
	ax = dx
	v18 = Mem0[ds:0x35B2<16>:word16]
	Mem0[ds:0x35B2<16>:word16] = dx
	dx = v18
	Mem0[ds:0x35B4<16>:word16] = ax
	SCZO = cond(ax - Mem0[ds:0x35B8<16>:word16])
	branch Test(ULE,CZ) l3CEE_07CE
	// succ:  l3CEE_07CB l3CEE_07CE
l3CEE_07CB:
	Mem0[ds:0x35B8<16>:word16] = ax
	// succ:  l3CEE_07CE
l3CEE_07CE:
	dx = dx | dx
	SZ = cond(dx)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_07D7
	// succ:  l3CEE_07D2 l3CEE_07D7
l3CEE_07D2:
	ds = dx
	Mem0[ds:8<16>:word16] = ax
	// succ:  l3CEE_07D7
l3CEE_07D7:
	bx = Mem0[ss:bp - 2<i16>:word16]
	ds = ax
	ax = ax ^ ax
	SZ = cond(ax)
	O = false
	C = false
	Mem0[ds:8<16>:word16] = ax
	ax = ax - 1<16>
	SZO = cond(ax)
	ax = ax - 1<16>
	SZO = cond(ax)
	Mem0[ds:bx + 12<i16>:word16] = ax
	ax = 0xA<16>
	Mem0[ds:0<16>:word16] = ax
	Mem0[ds:2<16>:word16] = ax
	ax = bx + 1<i16>
	Mem0[ds:0xA<16>:word16] = ax
	ax = ax + 0xD<16>
	SCZO = cond(ax)
	Mem0[ds:6<16>:word16] = ax
	ax = ds
	// succ:  l3CEE_07FD
l3CEE_07FD:
	ds = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	return
	// succ:  fn3CEE_0790_exit
fn3CEE_0790_exit:


// fn3CEE_07FF
// Return size: 2
define fn3CEE_07FF
fn3CEE_07FF_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_07FF
l3CEE_07FF:
	ax = ds
	es = ax
	cx = Mem0[ss:bp + 6<i16>:word16]
	bx = bx ^ bx
	SZ = cond(bx)
	O = false
	C = false
	ds = Mem0[ds:0x35B4<16>:selector]
	call fn3CEE_0819 (retsize: 2;)
	dx = dx | dx
	SZ = cond(dx)
	O = false
	C = false
	cx = es
	ds = cx
	return
	// succ:  fn3CEE_07FF_exit
fn3CEE_07FF_exit:


// fn3CEE_0819
// Return size: 2
define fn3CEE_0819
fn3CEE_0819_entry:
	sp = fp
	Top = 0<i8>
	goto l3CEE_0819
	// succ:  l3CEE_0819
l3CEE_0816:
	// succ:  l3CEE_0816_thunk_fn3CEE_0877
l3CEE_0816_thunk_fn3CEE_0877:
	call fn3CEE_0877 (retsize: 0;)
	return
	// succ:  fn3CEE_0819_exit
l3CEE_0819:
	cx = cx + 1<16>
	SZO = cond(cx)
	branch Test(EQ,Z) l3CEE_0816
	// succ:  l3CEE_081C l3CEE_0816
l3CEE_081C:
	cl = cl & 0xFE<8>
	SZ = cond(cl)
	O = false
	C = false
	SCZO = cond(cx - 0xFFEE<16>)
	branch Test(UGE,C) l3CEE_0816
	// succ:  l3CEE_0824 l3CEE_0816
l3CEE_0824:
	si = Mem0[ds:bx + 2<i16>:word16]
	D = false
	ax = Mem0[ds:si:word16]
	si = si + 2<i16>
	di = si
	SZP = cond(al & 1<8>)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_0871
	// succ:  l3CEE_082F l3CEE_0871
l3CEE_082F:
	ax = ax - 1<16>
	SZO = cond(ax)
	SCZO = cond(ax - cx)
	branch Test(UGE,C) l3CEE_0849
	goto l3CEE_0834
	// succ:  l3CEE_0834 l3CEE_0832_thunk_fn3CEE_0877
l3CEE_0832_thunk_fn3CEE_0877:
	call fn3CEE_0877 (retsize: 0;)
	return
	// succ:  fn3CEE_0819_exit
l3CEE_0834:
	dx = ax
	si = si + ax
	SCZO = cond(si)
	ax = Mem0[ds:si:word16]
	si = si + 2<i16>
	SZP = cond(al & 1<8>)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_0871
	// succ:  l3CEE_083D l3CEE_0871
l3CEE_083D:
	ax = ax + dx
	SCZO = cond(ax)
	ax = ax + 2<16>
	SCZO = cond(ax)
	si = di
	Mem0[ds:si - 2<i16>:word16] = ax
	goto l3CEE_082F
	// succ:  l3CEE_082F
l3CEE_0871:
	Mem0[es:0x35BA<16>:byte] = 2<8>
fn3CEE_0819_exit:


// fn3CEE_0874
// Return size: 0
define fn3CEE_0874
fn3CEE_0874_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_0874
l3CEE_0874:
	dx = 0x235<16>
	goto l3CEE_0874_thunk_fn3CEE_0877
	// succ:  l3CEE_0874_thunk_fn3CEE_0877
l3CEE_0874:
	call fn3CEE_0877 (retsize: 0;)
	return
	// succ:  l3CEE_0874_thunk_fn3CEE_0877 fn3CEE_0874_exit
l3CEE_0874_thunk_fn3CEE_0877:
	call fn3CEE_0877 (retsize: 0;)
	return
	// succ:  fn3CEE_0874_exit
l3CEE_0874_thunk_fn3CEE_0877:
	call fn3CEE_0877 (retsize: 0;)
	return
	// succ:  fn3CEE_0874_exit
fn3CEE_0874_exit:


// fn3CEE_0877
// Return size: 0
define fn3CEE_0877
fn3CEE_0877_entry:
	sp = fp
	Top = 0<i8>
	goto l3CEE_0877
	// succ:  l3CEE_0877
l3CEE_0849:
	di = si
	branch Test(EQ,Z) l3CEE_0859
	// succ:  l3CEE_084D l3CEE_0859
l3CEE_084D:
	di = di + cx
	SCZO = cond(di)
	Mem0[ds:si - 2<i16>:word16] = cx
	ax = ax - cx
	SCZO = cond(ax)
	ax = ax - 1<16>
	SZO = cond(ax)
	Mem0[ds:di:word16] = ax
	goto l3CEE_085E
	// succ:  l3CEE_085E
l3CEE_0859:
	di = di + cx
	SCZO = cond(di)
	v21 = Mem0[ds:si - 2<i16>:byte] - 1<8>
	Mem0[ds:si - 2<i16>:byte] = v21
	SZO = cond(v21)
	// succ:  l3CEE_085E
l3CEE_085E:
	ax = si
	dx = ds
	cx = ss
	SCZO = cond(dx - cx)
	branch Test(EQ,Z) l3CEE_086D
	// succ:  l3CEE_0868 l3CEE_086D
l3CEE_0868:
	Mem0[es:0x35B4<16>:word16] = ds
	// succ:  l3CEE_086D
l3CEE_086D:
	Mem0[ds:bx + 2<i16>:word16] = di
	return
	// succ:  fn3CEE_0877_exit
l3CEE_0877:
	SCZO = cond(ax - 0xFFFE<16>)
	branch Test(EQ,Z) l3CEE_08A1
	// succ:  l3CEE_087C l3CEE_08A1
l3CEE_087C:
	di = si
	si = si + ax
	SCZO = cond(si)
	// succ:  l3CEE_0880
l3CEE_0880:
	ax = Mem0[ds:si:word16]
	si = si + 2<i16>
	SZP = cond(al & 1<8>)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_0877
	// succ:  l3CEE_0885 l3CEE_0877
l3CEE_0885:
	di = si
	// succ:  l3CEE_0887
l3CEE_0887:
	ax = ax - 1<16>
	SZO = cond(ax)
	SCZO = cond(ax - cx)
	branch Test(UGE,C) l3CEE_0849
	// succ:  l3CEE_088C l3CEE_0849
l3CEE_088C:
	dx = ax
	si = si + ax
	SCZO = cond(si)
	ax = Mem0[ds:si:word16]
	si = si + 2<i16>
	SZP = cond(al & 1<8>)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_0877
	// succ:  l3CEE_0895 l3CEE_0877
l3CEE_0895:
	ax = ax + dx
	SCZO = cond(ax)
	ax = ax + 2<16>
	SCZO = cond(ax)
	si = di
	Mem0[ds:si - 2<i16>:word16] = ax
	goto l3CEE_0887
	// succ:  l3CEE_0887
l3CEE_08A1:
	ax = Mem0[ds:bx + 8<i16>:word16]
	ax = ax | ax
	SZ = cond(ax)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_08AC
	// succ:  l3CEE_08A8 l3CEE_08AC
l3CEE_08A8:
	ds = ax
	goto l3CEE_08C0
	// succ:  l3CEE_08C0
l3CEE_08AC:
	v23 = Mem0[es:0x35BA<16>:byte] - 1<8>
	Mem0[es:0x35BA<16>:byte] = v23
	SZO = cond(v23)
	branch Test(EQ,Z) l3CEE_08C4
	// succ:  l3CEE_08B3 l3CEE_08C4
l3CEE_08B3:
	ax = ds
	di = ss
	SCZO = cond(ax - di)
	branch Test(EQ,Z) l3CEE_08C0
	// succ:  l3CEE_08BB l3CEE_08C0
l3CEE_08BB:
	ds = Mem0[es:0x35B0<16>:selector]
	// succ:  l3CEE_08C0
l3CEE_08C0:
	si = Mem0[ds:bx:word16]
	goto l3CEE_0880
	// succ:  l3CEE_0880
l3CEE_08C4:
	si = Mem0[ds:bx + 6<i16>:word16]
	ax = ax ^ ax
	SZ = cond(ax)
	O = false
	C = false
	call fn3CEE_0936 (retsize: 2;)
	SCZO = cond(ax - si)
	branch Test(EQ,Z) l3CEE_08DD
	// succ:  l3CEE_08D0 l3CEE_08DD
l3CEE_08D0:
	al = al & 1<8>
	SZ = cond(al)
	O = false
	C = false
	ax = ax + 1<16>
	SZO = cond(ax)
	ax = ax + 1<16>
	SZO = cond(ax)
	ax = CONVERT(al, int8, int16)
	call fn3CEE_0936 (retsize: 2;)
	branch Test(EQ,Z) l3CEE_08E7
	// succ:  l3CEE_08DA l3CEE_08E7
l3CEE_08DA:
	v24 = Mem0[ds:di - 2<i16>:byte] - 1<8>
	Mem0[ds:di - 2<i16>:byte] = v24
	SZO = cond(v24)
	// succ:  l3CEE_08DD
l3CEE_08DD:
	call fn3CEE_08FC (retsize: 2;)
	branch Test(EQ,Z) l3CEE_08E7
	// succ:  l3CEE_08E2 l3CEE_08E7
l3CEE_08E2:
	v25 = si
	si = ax
	ax = v25
	si = si - 1<16>
	SZO = cond(si)
	si = si - 1<16>
	SZO = cond(si)
	goto l3CEE_0880
	// succ:  l3CEE_0880
l3CEE_08E7:
	ax = ds
	cx = ss
	SCZO = cond(ax - cx)
	branch Test(EQ,Z) l3CEE_08F3
	// succ:  l3CEE_08EF l3CEE_08F3
l3CEE_08EF:
	Mem0[es:0x35B4<16>:word16] = ax
	// succ:  l3CEE_08F3
l3CEE_08F3:
	ax = Mem0[ds:bx:word16]
	Mem0[ds:bx + 2<i16>:word16] = ax
	ax = ax ^ ax
	SZ = cond(ax)
	O = false
	C = false
	dx_ax = CONVERT(ax, int16, int32)
	return
	// succ:  fn3CEE_0877_exit
fn3CEE_0877_exit:


// fn3CEE_08FC
// Return size: 2
define fn3CEE_08FC
fn3CEE_08FC_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_08FC
l3CEE_08FC:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = cx
	ax = Mem0[ds:di - 2<i16>:word16]
	SZP = cond(al & 1<8>)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_0907
	// succ:  l3CEE_0904 l3CEE_0907
l3CEE_0904:
	cx = cx - ax
	SCZO = cond(cx)
	cx = cx - 1<16>
	SZO = cond(cx)
	// succ:  l3CEE_0907
l3CEE_0907:
	cx = cx + 1<16>
	SZO = cond(cx)
	cx = cx + 1<16>
	SZO = cond(cx)
	dx = 0x7FFF<16>
	// succ:  l3CEE_090C
l3CEE_090C:
	SCZO = cond(dx - Mem0[es:0x35B6<16>:word16])
	branch Test(ULE,CZ) l3CEE_0917
	// succ:  l3CEE_0913 l3CEE_0917
l3CEE_0913:
	dx = dx >>u 1<16>
	SCZO = cond(dx)
	branch Test(NE,Z) l3CEE_090C
	// succ:  l3CEE_0917 l3CEE_090C
l3CEE_0917:
	ax = cx
	ax = ax + si
	SCZO = cond(ax)
	branch Test(ULT,C) l3CEE_0932
	// succ:  l3CEE_091D l3CEE_0932
l3CEE_091D:
	ax = ax + dx
	SCZO = cond(ax)
	branch Test(ULT,C) l3CEE_092E
	// succ:  l3CEE_0921 l3CEE_092E
l3CEE_0921:
	dx = ~dx
	ax = ax & dx
	SZ = cond(ax)
	O = false
	C = false
	ax = ax - si
	SCZO = cond(ax)
	call fn3CEE_0936 (retsize: 2;)
	branch Test(NE,Z) l3CEE_0934
	// succ:  l3CEE_092C l3CEE_0934
l3CEE_092C:
	dx = ~dx
	// succ:  l3CEE_092E
l3CEE_092E:
	dx = dx >>u 1<16>
	SCZO = cond(dx)
	branch Test(NE,Z) l3CEE_0917
	// succ:  l3CEE_0932 l3CEE_0917
l3CEE_0932:
	ax = ax ^ ax
	SZ = cond(ax)
	O = false
	C = false
	// succ:  l3CEE_0934
l3CEE_0934:
	cx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn3CEE_08FC_exit
fn3CEE_08FC_exit:


// fn3CEE_0936
// Return size: 2
define fn3CEE_0936
fn3CEE_0936_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_0936
l3CEE_0936:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = cx
	call fn3CEE_0958 (retsize: 2;)
	branch Test(EQ,Z) l3CEE_0955
	// succ:  l3CEE_093D l3CEE_0955
l3CEE_093D:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	di = si
	si = ax
	si = si + dx
	SCZO = cond(si)
	Mem0[ds:si - 2<i16>:word16] = 0xFFFE<16>
	Mem0[ds:bx + 6<i16>:word16] = si
	dx = si
	dx = dx - di
	SCZO = cond(dx)
	dx = dx - 1<16>
	SZO = cond(dx)
	Mem0[ds:di - 2<i16>:word16] = dx
	ax = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	// succ:  l3CEE_0955
l3CEE_0955:
	cx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	dx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn3CEE_0936_exit
fn3CEE_0936_exit:


// fn3CEE_0958
// Return size: 2
define fn3CEE_0958
fn3CEE_0958_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_0958
l3CEE_0958:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	dx = dx ^ dx
	SZ = cond(dx)
	O = false
	C = false
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 1<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = es
	ds = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	call fn3CEE_0A1A (retsize: 4;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	SCZO = cond(dx - 0xFFFF<16>)
	ds = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	dx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	branch Test(EQ,Z) l3CEE_0978
	// succ:  l3CEE_0976 l3CEE_0978
l3CEE_0976:
	dx = dx | dx
	SZ = cond(dx)
	O = false
	C = false
	// succ:  l3CEE_0978
l3CEE_0978:
	return
	// succ:  fn3CEE_0958_exit
fn3CEE_0958_exit:


// fn3CEE_098C
// Return size: 4
define fn3CEE_098C
fn3CEE_098C_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_098C
l3CEE_098C:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	SCZO = cond(Mem0[ss:bp + 6<i16>:word16] - 0<16>)
	branch Test(EQ,Z) l3CEE_09A9
	// succ:  l3CEE_0997 l3CEE_09A9
l3CEE_0997:
	bx = 0x35BC<16>
	SCZO = cond(Mem0[ds:bx:word16] - 0<16>)
	branch Test(NE,Z) l3CEE_09C8
	// succ:  l3CEE_099F l3CEE_09C8
l3CEE_099F:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	ax = 5<16>
	call fn3CEE_0958 (retsize: 2;)
	branch Test(NE,Z) l3CEE_09AE
	// succ:  l3CEE_09A9 l3CEE_09AE
l3CEE_09A9:
	ax = ax ^ ax
	SZ = cond(ax)
	O = false
	C = false
	dx_ax = CONVERT(ax, int16, int32)
	goto l3CEE_09D2
	// succ:  l3CEE_09D2
l3CEE_09AE:
	ax = ax + 1<16>
	SZO = cond(ax)
	al = al & 0xFE<8>
	SZ = cond(al)
	O = false
	C = false
	Mem0[ds:0x35BC<16>:word16] = ax
	Mem0[ds:0x35BE<16>:word16] = ax
	v20 = si
	si = ax
	ax = v20
	Mem0[ds:si:word16] = 1<16>
	si = si + 4<16>
	SCZO = cond(si)
	Mem0[ds:si - 2<i16>:word16] = 0xFFFE<16>
	Mem0[ds:0x35C2<16>:word16] = si
	// succ:  l3CEE_09C8
l3CEE_09C8:
	cx = Mem0[ss:bp + 6<i16>:word16]
	ax = ds
	es = ax
	call fn3CEE_0819 (retsize: 2;)
	// succ:  l3CEE_09D2
l3CEE_09D2:
	di = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn3CEE_098C_exit
fn3CEE_098C_exit:


// fn3CEE_09D8
// Return size: 2
define fn3CEE_09D8
fn3CEE_09D8_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_09D8
l3CEE_09D8:
	dx = ax
	ax = ax + Mem0[ds:0x3502<16>:word16]
	SCZO = cond(ax)
	branch Test(ULT,C) l3CEE_0A15
	// succ:  l3CEE_09E0 l3CEE_0A15
l3CEE_09E0:
	SCZO = cond(Mem0[ds:0x34FC<16>:word16] - ax)
	branch Test(UGE,C) l3CEE_0A0B
	// succ:  l3CEE_09E6 l3CEE_0A0B
l3CEE_09E6:
	ax = ax + 0xF<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v10 = (ax & 1<16> << 1<8>) != 0<16>
	ax = __rcr<word16,byte>(ax, 1<8>, C)
	C = v10
	cl = 3<8>
	ax = ax >>u cl
	SCZO = cond(ax)
	cx = ds
	bx = Mem0[ds:0x3573<16>:word16]
	cx = cx - bx
	SCZO = cond(cx)
	ax = ax + cx
	SCZO = cond(ax)
	es = bx
	bx = ax
	ah = 0x4A<8>
	C = msdos_resize_memory_block(es, bx, out bx)
	ax = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	branch Test(ULT,C) l3CEE_0A15
	// succ:  l3CEE_0A05 l3CEE_0A15
l3CEE_0A05:
	al = al & 0xF0<8>
	SZ = cond(al)
	O = false
	C = false
	ax = ax - 1<16>
	SZO = cond(ax)
	Mem0[ds:0x34FC<16>:word16] = ax
	// succ:  l3CEE_0A0B
l3CEE_0A0B:
	v21 = bp
	bp = ax
	ax = v21
	bp = Mem0[ds:0x3502<16>:word16]
	v23 = Mem0[ds:0x3502<16>:word16] + dx
	Mem0[ds:0x3502<16>:word16] = v23
	SCZO = cond(v23)
	return
	// succ:  fn3CEE_09D8_exit
l3CEE_0A15:
	ax = di
	// succ:  l3CEE_0A17_thunk_fn3CEE_00C7
l3CEE_0A17_thunk_fn3CEE_00C7:
	call fn3CEE_00C7 (retsize: 0;)
	return
	// succ:  fn3CEE_09D8_exit
fn3CEE_09D8_exit:


// fn3CEE_0A1A
// Return size: 4
define fn3CEE_0A1A
fn3CEE_0A1A_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_0A1A
l3CEE_0A1A:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = es
	SCZO = cond(Mem0[ss:bp + 10<i16>:word16] - 0<16>)
	branch Test(NE,Z) l3CEE_0A5E
	// succ:  l3CEE_0A26 l3CEE_0A5E
l3CEE_0A26:
	di = 0x3502<16>
	dx = Mem0[ss:bp + 8<i16>:word16]
	ax = Mem0[ss:bp + 6<i16>:word16]
	ax = ax - 1<16>
	SZO = cond(ax)
	branch Test(NE,Z) l3CEE_0A39
	// succ:  l3CEE_0A32 l3CEE_0A39
l3CEE_0A32:
	call fn3CEE_0A88 (retsize: 2;)
	branch Test(ULT,C) l3CEE_0A5E
	// succ:  l3CEE_0A37 l3CEE_0A5E
l3CEE_0A37:
	goto l3CEE_0A81
	// succ:  l3CEE_0A81
l3CEE_0A39:
	si = Mem0[ds:0x3552<16>:word16]
	ax = ax - 1<16>
	SZO = cond(ax)
	branch Test(EQ,Z) l3CEE_0A51
	// succ:  l3CEE_0A40 l3CEE_0A51
l3CEE_0A40:
	SCZO = cond(si - di)
	branch Test(EQ,Z) l3CEE_0A51
	// succ:  l3CEE_0A44 l3CEE_0A51
l3CEE_0A44:
	ax = Mem0[ds:si + 2<i16>:word16]
	Mem0[ss:bp + 14<i16>:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	call fn3CEE_0A88 (retsize: 2;)
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	branch Test(UGE,C) l3CEE_0A81
	// succ:  l3CEE_0A51 l3CEE_0A81
l3CEE_0A51:
	si = si + 4<16>
	SCZO = cond(si)
	SCZO = cond(si - 0x3552<16>)
	branch Test(UGE,C) l3CEE_0A5E
	// succ:  l3CEE_0A5A l3CEE_0A5E
l3CEE_0A5A:
	dx = dx | dx
	SZ = cond(dx)
	O = false
	C = false
	branch Test(NE,Z) l3CEE_0A64
	// succ:  l3CEE_0A5E l3CEE_0A64
l3CEE_0A5E:
	ax = 0xFFFF<16>
	dx_ax = CONVERT(ax, int16, int32)
	goto l3CEE_0A81
	// succ:  l3CEE_0A81
l3CEE_0A64:
	bx = dx
	bx = bx + 0xF<16>
	SCZO = cond(bx)
	v20 = (bx & 1<16> << 1<8>) != 0<16>
	bx = __rcr<word16,byte>(bx, 1<8>, C)
	C = v20
	cl = 3<8>
	bx = bx >>u cl
	SCZO = cond(bx)
	ah = 0x48<8>
	C = msdos_allocate_memory_block(bx)
	branch Test(ULT,C) l3CEE_0A5E
	// succ:  l3CEE_0A75 l3CEE_0A5E
l3CEE_0A75:
	v23 = dx
	dx = ax
	ax = v23
	Mem0[ds:si:word16] = ax
	Mem0[ds:si + 2<i16>:word16] = dx
	Mem0[ds:0x3552<16>:word16] = si
	ax = ax ^ ax
	SZ = cond(ax)
	O = false
	C = false
	// succ:  l3CEE_0A81
l3CEE_0A81:
	es = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	di = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn3CEE_0A1A_exit
fn3CEE_0A1A_exit:


// fn3CEE_0A88
// Return size: 2
define fn3CEE_0A88
fn3CEE_0A88_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_0A88
l3CEE_0A88:
	cx = Mem0[ss:bp + 14<i16>:word16]
	si = di
	// succ:  l3CEE_0A8D
l3CEE_0A8D:
	SCZO = cond(Mem0[ds:si + 2<i16>:word16] - cx)
	branch Test(EQ,Z) l3CEE_0A9E
	// succ:  l3CEE_0A92 l3CEE_0A9E
l3CEE_0A92:
	si = si + 4<16>
	SCZO = cond(si)
	SCZO = cond(si - 0x3552<16>)
	branch Test(NE,Z) l3CEE_0A8D
	// succ:  l3CEE_0A9B l3CEE_0A8D
l3CEE_0A9B:
	C = true
	// succ:  l3CEE_0A9C_thunk_fn3CEE_0ACA
l3CEE_0A9C_thunk_fn3CEE_0ACA:
	call fn3CEE_0ACA (retsize: 0;)
	return
	// succ:  fn3CEE_0A88_exit
l3CEE_0A9E:
	bx = dx
	bx = bx + Mem0[ds:si:word16]
	SCZO = cond(bx)
	branch Test(ULT,C) l3CEE_0ADD
	goto l3CEE_0AA4
	// succ:  l3CEE_0AA4 l3CEE_0AA2_thunk_fn3CEE_0ACA
l3CEE_0AA2_thunk_fn3CEE_0ACA:
	call fn3CEE_0ACA (retsize: 0;)
	return
	// succ:  fn3CEE_0A88_exit
l3CEE_0AA4:
	dx = bx
	es = cx
	SCZO = cond(si - di)
	branch Test(NE,Z) l3CEE_0AB2
	// succ:  l3CEE_0AAC l3CEE_0AB2
l3CEE_0AAC:
	SCZO = cond(Mem0[ds:0x34FC<16>:word16] - bx)
	branch Test(UGE,C) l3CEE_0AD8
	goto l3CEE_0AB2
	// succ:  l3CEE_0AB2 l3CEE_0AB0_thunk_fn3CEE_0ACA
l3CEE_0AB0_thunk_fn3CEE_0ACA:
	call fn3CEE_0ACA (retsize: 0;)
	return
	// succ:  fn3CEE_0A88_exit
l3CEE_0AB2:
	bx = bx + 0xF<16>
	SCZO = cond(bx)
	v16 = (bx & 1<16> << 1<8>) != 0<16>
	bx = __rcr<word16,byte>(bx, 1<8>, C)
	C = v16
	bx = bx >>u 1<16>
	SCZO = cond(bx)
	bx = bx >>u 1<16>
	SCZO = cond(bx)
	bx = bx >>u 1<16>
	SCZO = cond(bx)
	SCZO = cond(si - di)
	branch Test(NE,Z) l3CEE_0ACA
	goto l3CEE_0AC1
	// succ:  l3CEE_0AC1 l3CEE_0ABF_thunk_fn3CEE_0ACA
l3CEE_0ABF_thunk_fn3CEE_0ACA:
	call fn3CEE_0ACA (retsize: 0;)
	return
	// succ:  fn3CEE_0A88_exit
l3CEE_0AC1:
	bx = bx + cx
	SCZO = cond(bx)
	ax = Mem0[ds:0x3573<16>:word16]
	// succ:  l3CEE_0AC3_thunk_fn3CEE_0AC5
l3CEE_0AC3_thunk_fn3CEE_0AC5:
	call fn3CEE_0AC5 (retsize: 0;)
	return
	// succ:  fn3CEE_0A88_exit
fn3CEE_0A88_exit:


// fn3CEE_0AC5
// Return size: 0
define fn3CEE_0AC5
fn3CEE_0AC5_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_0AC5
l3CEE_0AC5:
	ax = ax ^ 0xD82B<16>
	SZ = cond(ax)
	O = false
	C = false
	es = ax
	goto l3CEE_0AC8_thunk_fn3CEE_0ACA
	// succ:  l3CEE_0AC8_thunk_fn3CEE_0ACA
l3CEE_0AC5:
	bx = bx - ax
	SCZO = cond(bx)
	es = ax
	// succ:  l3CEE_0AC7_thunk_fn3CEE_0ACA
l3CEE_0AC7_thunk_fn3CEE_0ACA:
	call fn3CEE_0ACA (retsize: 0;)
	return
	// succ:  fn3CEE_0AC5_exit
l3CEE_0AC8_thunk_fn3CEE_0ACA:
	call fn3CEE_0ACA (retsize: 0;)
	return
	// succ:  fn3CEE_0AC5_exit
fn3CEE_0AC5_exit:


// fn3CEE_0ACA
// Return size: 0
define fn3CEE_0ACA
fn3CEE_0ACA_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_0ACA
l3CEE_0ACA:
	ah = 0x4A<8>
	C = msdos_resize_memory_block(es, bx, out bx)
	branch Test(ULT,C) l3CEE_0ADD
	// succ:  l3CEE_0AD0 l3CEE_0ADD
l3CEE_0AD0:
	SCZO = cond(si - di)
	branch Test(NE,Z) l3CEE_0AD8
	// succ:  l3CEE_0AD4 l3CEE_0AD8
l3CEE_0AD4:
	Mem0[ds:0x34FC<16>:word16] = dx
	// succ:  l3CEE_0AD8
l3CEE_0AD8:
	v15 = dx
	dx = ax
	ax = v15
	v17 = Mem0[ds:si:word16]
	Mem0[ds:si:word16] = ax
	ax = v17
	dx = cx
	// succ:  l3CEE_0ADD
l3CEE_0ADD:
	return
	// succ:  fn3CEE_0ACA_exit
fn3CEE_0ACA_exit:


// fn3CEE_0ADE
// Return size: 4
define fn3CEE_0ADE
fn3CEE_0ADE_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_0ADE
l3CEE_0ADE:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	bp = sp
	ax = 1<16>
	di = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn3CEE_0ADE_exit
fn3CEE_0ADE_exit:


// fn3CEE_0AEA
// Return size: 4
define fn3CEE_0AEA
fn3CEE_0AEA_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_0AEA
l3CEE_0AEA:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	bp = sp
	__fninit()
	Mem0[ds:0x35C8<16>:word16] = __fstsw(FPUF)
	ax = 0x64<16>
	dx = ax
	dx_ax = dx *s32 ax
	SCZO = cond(dx_ax)
	SZP = cond(Mem0[ds:0x35C8<16>:word16] & 0xB8BF<16>)
	O = false
	C = false
	branch Test(NE,Z) l3CEE_0B0A
	// succ:  l3CEE_0B04 l3CEE_0B0A
l3CEE_0B04:
	Mem0[ds:0x35C6<16>:word16] = 1<16>
	// succ:  l3CEE_0B0A
l3CEE_0B0A:
	di = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn3CEE_0AEA_exit
fn3CEE_0AEA_exit:


// fn3CEE_0C3E
// Return size: 4
define fn3CEE_0C3E
fn3CEE_0C3E_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_0C3E
l3CEE_0C3E:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	bp = sp
	sp = sp - 2<16>
	SCZO = cond(sp)
	bx = bp + 10<i16>
	call fn3CEE_1008 (retsize: 4;)
	call fn3CEE_1242 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	di = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn3CEE_0C3E_exit
fn3CEE_0C3E_exit:


// fn3CEE_0C5A
// Return size: 4
define fn3CEE_0C5A
fn3CEE_0C5A_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_0C5A
l3CEE_0C5A:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	bp = sp
	sp = sp - 4<16>
	SCZO = cond(sp)
	bx = bp + 10<i16>
	call fn3CEE_1008 (retsize: 4;)
	call fn3CEE_1242 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	di = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn3CEE_0C5A_exit
fn3CEE_0C5A_exit:


// fn3CEE_0CF7
// Return size: 4
define fn3CEE_0CF7
fn3CEE_0CF7_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_0CF7
l3CEE_0CF7:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	bp = sp
	SZP = cond(Mem0[ds:0x35C6<16>:word16] & 0xFFFF<16>)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_0D11
	// succ:  l3CEE_0D04 l3CEE_0D11
l3CEE_0D04:
	__wait()
	Top = Top - 1<i8>
	ST[Top:real64] = CONVERT(Mem0[ss:bp + 10<i16>:int32], int32, real64)
	__wait()
	Mem0[ds:0x3565<16>:real64] = ST[Top:real64]
	Top = Top + 1<i8>
	__wait()
	goto l3CEE_0D26
	// succ:  l3CEE_0D26
l3CEE_0D11:
	bx = bp + 10<i16>
	call fn3CEE_1088 (retsize: 4;)
	bx = 0x3565<16>
	dx = 0x4D8E<16>
	es = dx
	call fn3CEE_11A9 (retsize: 4;)
	// succ:  l3CEE_0D26
l3CEE_0D26:
	ax = 0x3565<16>
	dx = 0x4D8E<16>
	di = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn3CEE_0CF7_exit
fn3CEE_0CF7_exit:


// fn3CEE_0D30
// Return size: 4
define fn3CEE_0D30
fn3CEE_0D30_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_0D30
l3CEE_0D30:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	bp = sp
	si = Mem0[ss:bp + 14<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	es_di = Mem0[ss:bp + 10<i16>:segptr32]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = es
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	call fn38AD_0118 (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	di = di + ax
	SCZO = cond(di)
	si = si - ax
	SCZO = cond(si)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	v12 = Mem0[ss:bp + 12<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v12
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	call fn38AD_014A (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	SCZO = cond(ax - 0x40<16>)
	branch Test(ULE,CZ) l3CEE_0D5F
	// succ:  l3CEE_0D5C l3CEE_0D5F
l3CEE_0D5C:
	ax = 0x40<16>
	// succ:  l3CEE_0D5F
l3CEE_0D5F:
	ax = ax | ax
	SZ = cond(ax)
	O = false
	C = false
	branch Test(NE,Z) l3CEE_0D69
	// succ:  l3CEE_0D63 l3CEE_0D69
l3CEE_0D63:
	si = 0x35D2<16>
	goto l3CEE_0D96
	// succ:  l3CEE_0D96
l3CEE_0D69:
	dx = ds
	cx = ax
	ds = Mem0[ss:bp + 12<i16>:selector]
	si = di
	es = dx
	di = 0x35DA<16>
	size = cx *u32 1<16>
	memcpy(es:di, ds:si, size)
	cx = 0<16>
	si = si + SLICE(size, word16, 0)
	di = di + SLICE(size, word16, 0)
	ds = dx
	cx = ax
	si = 0x35DA<16>
	di = 0x35CA<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	ax = ax - ax
	SCZO = cond(ax)
	bx = ax
	dx = ax
	call fn3CEE_2C38 (retsize: 2;)
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	dx = 0x4D8E<16>
	ds = dx
	si = 0x35CA<16>
	// succ:  l3CEE_0D96
l3CEE_0D96:
	dx = 0x4D8E<16>
	es = dx
	ax = 0x3565<16>
	di = ax
	v23 = Mem0[ds:si:word16]
	Mem0[es:di:word16] = v23
	si = si + 2<i16>
	di = di + 2<i16>
	v24 = Mem0[ds:si:word16]
	Mem0[es:di:word16] = v24
	si = si + 2<i16>
	di = di + 2<i16>
	v25 = Mem0[ds:si:word16]
	Mem0[es:di:word16] = v25
	si = si + 2<i16>
	di = di + 2<i16>
	v26 = Mem0[ds:si:word16]
	Mem0[es:di:word16] = v26
	si = si + 2<i16>
	di = di + 2<i16>
	di = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn3CEE_0D30_exit
fn3CEE_0D30_exit:


// fn3CEE_0DA8
// Return size: 4
define fn3CEE_0DA8
fn3CEE_0DA8_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_0DA8
l3CEE_0DA8:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	bp = sp
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	dx = ds
	es = dx
	di = 0x35CA<16>
	bx = ss
	ds = bx
	bx = bp + 10<i16>
	si = bx
	v12 = Mem0[ds:si:word16]
	Mem0[es:di:word16] = v12
	si = si + 2<i16>
	di = di + 2<i16>
	v13 = Mem0[ds:si:word16]
	Mem0[es:di:word16] = v13
	si = si + 2<i16>
	di = di + 2<i16>
	v14 = Mem0[ds:si:word16]
	Mem0[es:di:word16] = v14
	si = si + 2<i16>
	di = di + 2<i16>
	v15 = Mem0[ds:si:word16]
	Mem0[es:di:word16] = v15
	si = si + 2<i16>
	di = di + 2<i16>
	ds = dx
	si = bx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	call fn3CEE_2F84 (retsize: 2;)
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	si = si + 1<16>
	SZO = cond(si)
	ax = cx
	ax = ax - dx
	SCZO = cond(ax)
	ax = ax - Mem0[ss:bp + 20<i16>:word16]
	SCZO = cond(ax)
	branch Test(LE,SZO) l3CEE_0DF5
	// succ:  l3CEE_0DD5 l3CEE_0DF5
l3CEE_0DD5:
	di = si
	di = di + cx
	SCZO = cond(di)
	di = di - ax
	SCZO = cond(di)
	SCZO = cond(Mem0[ds:di:byte] - 0x35<8>)
	branch Test(ULT,C) l3CEE_0DF5
	// succ:  l3CEE_0DE0 l3CEE_0DF5
l3CEE_0DE0:
	Mem0[ds:di:byte] = 0x30<8>
	di = di - 1<16>
	SZO = cond(di)
	SCZO = cond(di - si)
	branch Test(ULT,C) l3CEE_0DF1
	// succ:  l3CEE_0DE8 l3CEE_0DF1
l3CEE_0DE8:
	SCZO = cond(Mem0[ds:di:byte] - 0x39<8>)
	branch Test(EQ,Z) l3CEE_0DE0
	// succ:  l3CEE_0DED l3CEE_0DE0
l3CEE_0DED:
	v22 = Mem0[ds:di:byte] + 1<8>
	Mem0[ds:di:byte] = v22
	SZO = cond(v22)
	goto l3CEE_0DF5
	// succ:  l3CEE_0DF5
l3CEE_0DF1:
	dx = dx + 1<16>
	SZO = cond(dx)
	Mem0[ds:si:byte] = 0x31<8>
	// succ:  l3CEE_0DF5
l3CEE_0DF5:
	SCZO = cond(bl - 0x2D<8>)
	bx = 1<16>
	branch Test(EQ,Z) l3CEE_0DFE
	// succ:  l3CEE_0DFD l3CEE_0DFE
l3CEE_0DFD:
	bx = bx - 1<16>
	SZO = cond(bx)
	// succ:  l3CEE_0DFE
l3CEE_0DFE:
	ax = dx
	SCZO = cond(ax - 0<16>)
	branch Test(GE,SO) l3CEE_0E0F
	// succ:  l3CEE_0E05 l3CEE_0E0F
l3CEE_0E05:
	C = ax != 0<16>
	ax = -ax
	SZO = cond(ax)
	SCZO = cond(ax - Mem0[ss:bp + 20<i16>:word16])
	branch Test(ULT,C) l3CEE_0E0F
	// succ:  l3CEE_0E0C l3CEE_0E0F
l3CEE_0E0C:
	bx = 0<16>
	// succ:  l3CEE_0E0F
l3CEE_0E0F:
	ax = Mem0[ss:bp + 18<i16>:word16]
	ax = ax - bx
	SCZO = cond(ax)
	SCZO = cond(dx - 0<16>)
	branch Test(LE,SZO) l3CEE_0E1D
	// succ:  l3CEE_0E19 l3CEE_0E1D
l3CEE_0E19:
	ax = ax - dx
	SCZO = cond(ax)
	goto l3CEE_0E1E
	// succ:  l3CEE_0E1E
l3CEE_0E1D:
	ax = ax - 1<16>
	SZO = cond(ax)
	// succ:  l3CEE_0E1E
l3CEE_0E1E:
	SCZO = cond(Mem0[ss:bp + 20<i16>:word16] - 0<16>)
	branch Test(LE,SZO) l3CEE_0E28
	// succ:  l3CEE_0E24 l3CEE_0E28
l3CEE_0E24:
	ax = ax - 1<16>
	SZO = cond(ax)
	ax = ax - Mem0[ss:bp + 20<i16>:word16]
	SCZO = cond(ax)
	// succ:  l3CEE_0E28
l3CEE_0E28:
	es_di = Mem0[ss:bp + 22<i16>:segptr32]
	SCZO = cond(ax - 0<16>)
	branch Test(GE,SO) l3CEE_0E39
	// succ:  l3CEE_0E30 l3CEE_0E39
l3CEE_0E30:
	cx = Mem0[ss:bp + 18<i16>:word16]
	al = 0x2A<8>
	// succ:  l3CEE_0E35
l3CEE_0E35:
	branch cx == 0<16> l3CEE_0E37
	// succ:  l3CEE_0E35_1 l3CEE_0E37
l3CEE_0E35_1:
	Mem0[es:di:byte] = al
	di = di + 1<i16>
	cx = cx - 1<16>
	goto l3CEE_0E35
	// succ:  l3CEE_0E35
l3CEE_0E37:
	goto l3CEE_0EA0
	// succ:  l3CEE_0EA0
l3CEE_0E39:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = cx
	cx = ax
	al = 0x20<8>
	// succ:  l3CEE_0E3E
l3CEE_0E3E:
	branch cx == 0<16> l3CEE_0E40
	// succ:  l3CEE_0E3E_1 l3CEE_0E40
l3CEE_0E3E_1:
	Mem0[es:di:byte] = al
	di = di + 1<i16>
	cx = cx - 1<16>
	goto l3CEE_0E3E
	// succ:  l3CEE_0E3E
l3CEE_0E40:
	cx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bx = bx | bx
	SZ = cond(bx)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_0E48
	// succ:  l3CEE_0E45 l3CEE_0E48
l3CEE_0E45:
	al = 0x2D<8>
	Mem0[es:di:byte] = al
	di = di + 1<i16>
	// succ:  l3CEE_0E48
l3CEE_0E48:
	bx = cx
	SCZO = cond(dx - 0<16>)
	branch Test(LE,SZO) l3CEE_0E6B
	// succ:  l3CEE_0E4F l3CEE_0E6B
l3CEE_0E4F:
	cx = dx
	SCZO = cond(cx - bx)
	branch Test(GT,SZO) l3CEE_0E5B
	// succ:  l3CEE_0E55 l3CEE_0E5B
l3CEE_0E55:
	bx = bx - cx
	SCZO = cond(bx)
	size = cx *u32 1<16>
	memcpy(es:di, ds:si, size)
	cx = 0<16>
	si = si + SLICE(size, word16, 0)
	di = di + SLICE(size, word16, 0)
	goto l3CEE_0E6E
	// succ:  l3CEE_0E6E
l3CEE_0E5B:
	cx = bx
	size = cx *u32 1<16>
	memcpy(es:di, ds:si, size)
	cx = 0<16>
	si = si + SLICE(size, word16, 0)
	di = di + SLICE(size, word16, 0)
	cx = dx
	cx = cx - bx
	SCZO = cond(cx)
	al = 0x30<8>
	// succ:  l3CEE_0E65
l3CEE_0E65:
	branch cx == 0<16> l3CEE_0E67
	// succ:  l3CEE_0E65_1 l3CEE_0E67
l3CEE_0E65_1:
	Mem0[es:di:byte] = al
	di = di + 1<i16>
	cx = cx - 1<16>
	goto l3CEE_0E65
	// succ:  l3CEE_0E65
l3CEE_0E67:
	bx = bx - bx
	SCZO = cond(bx)
	goto l3CEE_0E6E
	// succ:  l3CEE_0E6E
l3CEE_0E6B:
	al = 0x30<8>
	Mem0[es:di:byte] = al
	di = di + 1<i16>
	// succ:  l3CEE_0E6E
l3CEE_0E6E:
	cx = Mem0[ss:bp + 20<i16>:word16]
	branch cx == 0<16> l3CEE_0EA0
	// succ:  l3CEE_0E73 l3CEE_0EA0
l3CEE_0E73:
	al = 0x2E<8>
	Mem0[es:di:byte] = al
	di = di + 1<i16>
	C = dx != 0<16>
	dx = -dx
	SZO = cond(dx)
	branch Test(LE,SZO) l3CEE_0E8C
	// succ:  l3CEE_0E7A l3CEE_0E8C
l3CEE_0E7A:
	SCZO = cond(cx - dx)
	branch Test(GE,SO) l3CEE_0E80
	// succ:  l3CEE_0E7E l3CEE_0E80
l3CEE_0E7E:
	dx = cx
	// succ:  l3CEE_0E80
l3CEE_0E80:
	cx = cx - dx
	SCZO = cond(cx)
	v31 = dx
	dx = cx
	cx = v31
	al = 0x30<8>
	// succ:  l3CEE_0E86
l3CEE_0E86:
	branch cx == 0<16> l3CEE_0E88
	// succ:  l3CEE_0E86_1 l3CEE_0E88
l3CEE_0E86_1:
	Mem0[es:di:byte] = al
	di = di + 1<i16>
	cx = cx - 1<16>
	goto l3CEE_0E86
	// succ:  l3CEE_0E86
l3CEE_0E88:
	cx = dx
	branch cx == 0<16> l3CEE_0EA0
	// succ:  l3CEE_0E8C l3CEE_0EA0
l3CEE_0E8C:
	SCZO = cond(cx - bx)
	branch Test(GT,SZO) l3CEE_0E94
	// succ:  l3CEE_0E90 l3CEE_0E94
l3CEE_0E90:
	size = cx *u32 1<16>
	memcpy(es:di, ds:si, size)
	cx = 0<16>
	si = si + SLICE(size, word16, 0)
	di = di + SLICE(size, word16, 0)
	goto l3CEE_0EA0
	// succ:  l3CEE_0EA0
l3CEE_0E94:
	cx = cx - bx
	SCZO = cond(cx)
	v33 = bx
	bx = cx
	cx = v33
	size = cx *u32 1<16>
	memcpy(es:di, ds:si, size)
	cx = 0<16>
	si = si + SLICE(size, word16, 0)
	di = di + SLICE(size, word16, 0)
	cx = bx
	al = 0x30<8>
	// succ:  l3CEE_0E9E
l3CEE_0E9E:
	branch cx == 0<16> l3CEE_0EA0
	// succ:  l3CEE_0E9E_1 l3CEE_0EA0
l3CEE_0E9E_1:
	Mem0[es:di:byte] = al
	di = di + 1<i16>
	cx = cx - 1<16>
	goto l3CEE_0E9E
	// succ:  l3CEE_0E9E
l3CEE_0EA0:
	al = 0<8>
	Mem0[es:di:byte] = al
	di = di + 1<i16>
	ds = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	di = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn3CEE_0DA8_exit
fn3CEE_0DA8_exit:


// fn3CEE_0EA8
// Return size: 4
define fn3CEE_0EA8
fn3CEE_0EA8_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_0EA8
l3CEE_0EA8:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	bp = sp
	ax = ax - ax
	SCZO = cond(ax)
	ax = 0x2E<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v10 = Mem0[ss:bp + 14<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v10
	v11 = Mem0[ss:bp + 12<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v11
	v12 = Mem0[ss:bp + 10<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v12
	call fn2017_035B (retsize: 4;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v13 = Mem0[ss:bp + 14<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v13
	v14 = Mem0[ss:bp + 12<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v14
	v15 = Mem0[ss:bp + 10<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v15
	call fn3CEE_0D30 (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	ds = dx
	si = ax
	es_di = Mem0[ss:bp + 16<i16>:segptr32]
	v19 = Mem0[ds:si:word16]
	Mem0[es:di:word16] = v19
	si = si + 2<i16>
	di = di + 2<i16>
	v21 = Mem0[ds:si:word16]
	Mem0[es:di:word16] = v21
	si = si + 2<i16>
	di = di + 2<i16>
	v22 = Mem0[ds:si:word16]
	Mem0[es:di:word16] = v22
	si = si + 2<i16>
	di = di + 2<i16>
	v23 = Mem0[ds:si:word16]
	Mem0[es:di:word16] = v23
	si = si + 2<i16>
	di = di + 2<i16>
	ds = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	ax = Mem0[ss:bp + 14<i16>:word16]
	es_di = Mem0[ss:bp + 20<i16>:segptr32]
	Mem0[es:di:word16] = ax
	ax = ax - bx
	SCZO = cond(ax)
	branch Test(EQ,Z) l3CEE_0EF2
	// succ:  l3CEE_0EF1 l3CEE_0EF2
l3CEE_0EF1:
	ax = ax - 1<16>
	SZO = cond(ax)
	// succ:  l3CEE_0EF2
l3CEE_0EF2:
	es_di = Mem0[ss:bp + 24<i16>:segptr32]
	Mem0[es:di:word16] = ax
	di = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn3CEE_0EA8_exit
fn3CEE_0EA8_exit:


// fn3CEE_0EFC
// Return size: 4
define fn3CEE_0EFC
fn3CEE_0EFC_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_0EFC
l3CEE_0EFC:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	bp = sp
	D = false
	bx = Mem0[ss:bp + 14<i16>:word16]
	dx = Mem0[ss:bp + 16<i16>:word16]
	cx = ds
	es = cx
	di = 0x35DA<16>
	si = dx
	dx = dx | dx
	SZ = cond(dx)
	O = false
	C = false
	branch Test(NS,S) l3CEE_0F1C
	// succ:  l3CEE_0F15 l3CEE_0F1C
l3CEE_0F15:
	C = bx != 0<16>
	bx = -bx
	SZO = cond(bx)
	dx = dx + 0<16> + C
	SCZO = cond(dx)
	C = dx != 0<16>
	dx = -dx
	SZO = cond(dx)
	// succ:  l3CEE_0F1C
l3CEE_0F1C:
	cx = 0xA<16>
	// succ:  l3CEE_0F1C_thunk_fn3CEE_0F28
l3CEE_0F1C_thunk_fn3CEE_0F28:
	call fn3CEE_0F28 (retsize: 0;)
	return
	// succ:  fn3CEE_0EFC_exit
fn3CEE_0EFC_exit:


// fn3CEE_0F24
// Return size: 0
define fn3CEE_0F24
fn3CEE_0F24_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_0F24
l3CEE_0F24:
	branch Test(EQ,Z) l3CEE_0F24_thunk_fn3CEE_0F28
	goto l3CEE_0F24_thunk_fn3CEE_0F26
	// succ:  l3CEE_0F24_thunk_fn3CEE_0F26 l3CEE_0F24_thunk_fn3CEE_0F28
l3CEE_0F24:
	branch Test(EQ,Z) l3CEE_0F28
	goto l3CEE_0F24_thunk_fn3CEE_0F26
	// succ:  l3CEE_0F24_thunk_fn3CEE_0F26 l3CEE_0F24_thunk_fn3CEE_0F28
l3CEE_0F24_thunk_fn3CEE_0F26:
	call fn3CEE_0F26 (retsize: 0;)
	return
	// succ:  fn3CEE_0F24_exit
l3CEE_0F24_thunk_fn3CEE_0F26:
	call fn3CEE_0F26 (retsize: 0;)
	return
	// succ:  fn3CEE_0F24_exit
l3CEE_0F24_thunk_fn3CEE_0F28:
	call fn3CEE_0F28 (retsize: 0;)
	return
	// succ:  fn3CEE_0F24_exit
l3CEE_0F24_thunk_fn3CEE_0F28:
	call fn3CEE_0F28 (retsize: 0;)
	return
	// succ:  fn3CEE_0F24_exit
fn3CEE_0F24_exit:


// fn3CEE_0F26
// Return size: 0
define fn3CEE_0F26
fn3CEE_0F26_entry:
	sp = fp
	Top = 0<i8>
	goto l3CEE_0F26_thunk_fn3CEE_0F28
	// succ:  l3CEE_0F26_thunk_fn3CEE_0F28
l3CEE_0F26:
	v6 = dx_ax
	dx = CONVERT(v6 %u cx, word32, uint16)
	ax = CONVERT(v6 /u cx, word16, uint16)
	SCZO = cond(ax)
	goto l3CEE_0F26_thunk_fn3CEE_0F28
	// succ:  l3CEE_0F26_thunk_fn3CEE_0F28
l3CEE_0F26_thunk_fn3CEE_0F28:
	call fn3CEE_0F28 (retsize: 0;)
	return
	// succ:  fn3CEE_0F26_exit
l3CEE_0F26_thunk_fn3CEE_0F28:
	call fn3CEE_0F28 (retsize: 0;)
	return
	// succ:  fn3CEE_0F26_exit
fn3CEE_0F26_exit:


// fn3CEE_0F28
// Return size: 0
define fn3CEE_0F28
fn3CEE_0F28_entry:
	sp = fp
	Top = 0<i8>
	goto l3CEE_0F28
	// succ:  l3CEE_0F28
l3CEE_0F1F:
	v33 = dx
	dx = ax
	ax = v33
	dx = dx ^ dx
	SZ = cond(dx)
	O = false
	C = false
	ax = ax | ax
	SZ = cond(ax)
	O = false
	C = false
	// succ:  l3CEE_0F22_thunk_fn3CEE_0F24
l3CEE_0F22_thunk_fn3CEE_0F24:
	call fn3CEE_0F24 (retsize: 0;)
	return
	// succ:  fn3CEE_0F28_exit
l3CEE_0F28:
	v6 = bx
	bx = ax
	ax = v6
	v9 = dx_ax
	dx = CONVERT(v9 %u cx, word32, uint16)
	ax = CONVERT(v9 /u cx, word16, uint16)
	SCZO = cond(ax)
	v13 = dx
	dx = ax
	ax = v13
	v14 = bx
	bx = dx
	dx = v14
	al = al + 0x30<8>
	SCZO = cond(al)
	Mem0[es:di:byte] = al
	di = di + 1<i16>
	ax = dx
	ax = ax | bx
	SZ = cond(ax)
	O = false
	C = false
	branch Test(NE,Z) l3CEE_0F1F
	// succ:  l3CEE_0F37 l3CEE_0F1F
l3CEE_0F37:
	si = si | si
	SZ = cond(si)
	O = false
	C = false
	branch Test(NS,S) l3CEE_0F3E
	// succ:  l3CEE_0F3B l3CEE_0F3E
l3CEE_0F3B:
	al = 0x2D<8>
	Mem0[es:di:byte] = al
	di = di + 1<i16>
	// succ:  l3CEE_0F3E
l3CEE_0F3E:
	cx = Mem0[ss:bp + 18<i16>:word16]
	bx = di
	bx = bx - 0x35DA<16>
	SCZO = cond(bx)
	dx = Mem0[ss:bp + 20<i16>:word16]
	dx = dx | dx
	SZ = cond(dx)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_0F4F
	// succ:  l3CEE_0F4E l3CEE_0F4F
l3CEE_0F4E:
	dx = dx + 1<16>
	SZO = cond(dx)
	// succ:  l3CEE_0F4F
l3CEE_0F4F:
	si = dx
	si = si + bx
	SCZO = cond(si)
	SCZO = cond(cx - si)
	branch Test(GE,SO) l3CEE_0F65
	// succ:  l3CEE_0F57 l3CEE_0F65
l3CEE_0F57:
	es_di = Mem0[ss:bp + 10<i16>:segptr32]
	al = 0x2A<8>
	// succ:  l3CEE_0F5C
l3CEE_0F5C:
	branch cx == 0<16> l3CEE_0F5E
	// succ:  l3CEE_0F5C_1 l3CEE_0F5E
l3CEE_0F5C_1:
	Mem0[es:di:byte] = al
	di = di + 1<i16>
	cx = cx - 1<16>
	goto l3CEE_0F5C
	// succ:  l3CEE_0F5C
l3CEE_0F5E:
	Mem0[es:di:byte] = 0<8>
	goto l3CEE_0F94
	// succ:  l3CEE_0F94
l3CEE_0F65:
	D = true
	es_di = Mem0[ss:bp + 10<i16>:segptr32]
	di = di + cx
	SCZO = cond(di)
	al = 0<8>
	Mem0[es:di:byte] = al
	di = di - 1<i16>
	dx = dx | dx
	SZ = cond(dx)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_0F80
	// succ:  l3CEE_0F72 l3CEE_0F80
l3CEE_0F72:
	cx = cx - dx
	SCZO = cond(cx)
	v30 = dx
	dx = cx
	cx = v30
	cx = cx - 1<16>
	SZO = cond(cx)
	al = 0x30<8>
	// succ:  l3CEE_0F79
l3CEE_0F79:
	branch cx == 0<16> l3CEE_0F7B
	// succ:  l3CEE_0F79_1 l3CEE_0F7B
l3CEE_0F79_1:
	Mem0[es:di:byte] = al
	di = di - 1<i16>
	cx = cx - 1<16>
	goto l3CEE_0F79
	// succ:  l3CEE_0F79
l3CEE_0F7B:
	al = 0x2E<8>
	Mem0[es:di:byte] = al
	di = di + 1<i16>
	cx = dx
	// succ:  l3CEE_0F80
l3CEE_0F80:
	cx = cx - bx
	SCZO = cond(cx)
	v31 = bx
	bx = cx
	cx = v31
	si = 0x35DA<16>
	// succ:  l3CEE_0F87
l3CEE_0F87:
	D = false
	al = Mem0[ds:si:byte]
	si = si + 1<i16>
	D = true
	Mem0[es:di:byte] = al
	di = di - 1<i16>
	cx = cx - 1<16>
	branch cx != 0<16> l3CEE_0F87
	// succ:  l3CEE_0F8D l3CEE_0F87
l3CEE_0F8D:
	cx = bx
	al = 0x20<8>
	// succ:  l3CEE_0F91
l3CEE_0F91:
	branch cx == 0<16> l3CEE_0F93
	// succ:  l3CEE_0F91_1 l3CEE_0F93
l3CEE_0F91_1:
	Mem0[es:di:byte] = al
	di = di - 1<i16>
	cx = cx - 1<16>
	goto l3CEE_0F91
	// succ:  l3CEE_0F91
l3CEE_0F93:
	D = false
	// succ:  l3CEE_0F94
l3CEE_0F94:
	di = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn3CEE_0F28_exit
fn3CEE_0F28_exit:


// fn3CEE_1008
// Return size: 4
define fn3CEE_1008
fn3CEE_1008_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_1008
l3CEE_1008:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	si = bx
	// succ:  l3CEE_100A_thunk_fn3CEE_100C
l3CEE_100A_thunk_fn3CEE_100C:
	call fn3CEE_100C (retsize: 0;)
	return
	// succ:  fn3CEE_1008_exit
fn3CEE_1008_exit:


// fn3CEE_100C
// Return size: 0
define fn3CEE_100C
fn3CEE_100C_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_100C
l3CEE_100C:
	bx = Mem0[ds:0x3836<16>:word16]
	bx = bx + 0xC<16>
	SCZO = cond(bx)
	di = bx
	cx = ds
	es = cx
	D = false
	v11 = Mem0[ds:si:word16]
	Mem0[es:di:word16] = v11
	si = si + 2<i16>
	di = di + 2<i16>
	v13 = Mem0[ds:si:word16]
	Mem0[es:di:word16] = v13
	si = si + 2<i16>
	di = di + 2<i16>
	v14 = Mem0[ds:si:word16]
	Mem0[es:di:word16] = v14
	si = si + 2<i16>
	di = di + 2<i16>
	v15 = Mem0[ds:si:word16]
	Mem0[es:di:word16] = v15
	si = si + 2<i16>
	di = di + 2<i16>
	si = bx
	SCZO = cond(bx - 0x3822<16>)
	branch Test(EQ,Z) l3CEE_1024_thunk_fn3CEE_1034
	goto l3CEE_1026_in_fn3CEE_100C
	// succ:  l3CEE_1026_in_fn3CEE_100C l3CEE_1024_thunk_fn3CEE_1034
l3CEE_100C:
	bx = Mem0[ds:0x3836<16>:word16]
	bx = bx + 0xC<16>
	SCZO = cond(bx)
	di = bx
	cx = ds
	es = cx
	D = false
	v19 = Mem0[ds:si:word16]
	Mem0[es:di:word16] = v19
	si = si + 2<i16>
	di = di + 2<i16>
	v20 = Mem0[ds:si:word16]
	Mem0[es:di:word16] = v20
	si = si + 2<i16>
	di = di + 2<i16>
	v21 = Mem0[ds:si:word16]
	Mem0[es:di:word16] = v21
	si = si + 2<i16>
	di = di + 2<i16>
	v22 = Mem0[ds:si:word16]
	Mem0[es:di:word16] = v22
	si = si + 2<i16>
	di = di + 2<i16>
	si = bx
	SCZO = cond(bx - 0x3822<16>)
	branch Test(EQ,Z) l3CEE_1034
	goto l3CEE_1026
	// succ:  l3CEE_1026 l3CEE_1024_thunk_fn3CEE_1034
l3CEE_1024_thunk_fn3CEE_1034:
	call fn3CEE_1034 (retsize: 0;)
	return
	// succ:  fn3CEE_100C_exit
l3CEE_1024_thunk_fn3CEE_1034:
	call fn3CEE_1034 (retsize: 0;)
	return
	// succ:  fn3CEE_100C_exit
l3CEE_1026:
	Mem0[ds:0x3836<16>:word16] = bx
	Mem0[ds:bx - 2<i16>:byte] = 7<8>
	Mem0[ds:bx - 4<i16>:word16] = si
	di = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn3CEE_100C_exit
l3CEE_1026_in_fn3CEE_100C:
	Mem0[ds:0x3836<16>:word16] = bx
	Mem0[ds:bx - 2<i16>:byte] = 7<8>
	Mem0[ds:bx - 4<i16>:word16] = si
	di = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn3CEE_100C_exit
fn3CEE_100C_exit:


// fn3CEE_1034
// Return size: 0
define fn3CEE_1034
fn3CEE_1034_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_1034
l3CEE_1034:
	// succ:  l3CEE_1563
l3CEE_1563:
	Mem0[ds:0x36AE<16>:word16] = 0x3031<16>
	al = 0x8A<8>
	// succ:  l3CEE_1569_thunk_fn3CEE_156B
l3CEE_1569_thunk_fn3CEE_156B:
	call fn3CEE_156B (retsize: 0;)
	return
	// succ:  fn3CEE_1034_exit
fn3CEE_1034_exit:


// fn3CEE_1088
// Return size: 4
define fn3CEE_1088
fn3CEE_1088_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_1088
l3CEE_1088:
	ax = Mem0[ds:bx:word16]
	dx = Mem0[ds:bx + 2<i16>:word16]
	// succ:  l3CEE_1092
l3CEE_1092:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	bx = dx
	dx = ax
	al = bh
	al = al & 0x80<8>
	SZ = cond(al)
	O = false
	C = false
	branch Test(NS,S) l3CEE_10A5
	// succ:  l3CEE_109E l3CEE_10A5
l3CEE_109E:
	C = bx != 0<16>
	bx = -bx
	SZO = cond(bx)
	C = dx != 0<16>
	dx = -dx
	SZO = cond(dx)
	bx = bx - 0<16> - C
	SCZO = cond(bx)
	// succ:  l3CEE_10A5
l3CEE_10A5:
	di = Mem0[ds:0x3836<16>:word16]
	di = di + 0xC<16>
	SCZO = cond(di)
	SCZO = cond(di - 0x3822<16>)
	branch Test(EQ,Z) l3CEE_10CE
	// succ:  l3CEE_10B2 l3CEE_10CE
l3CEE_10B2:
	Mem0[ds:0x3836<16>:word16] = di
	Mem0[ds:di - 4<i16>:word16] = di
	cx = ds
	es = cx
	SCZO = cond(bh - 0<8>)
	branch Test(NE,Z) l3CEE_10D1
	// succ:  l3CEE_10C2 l3CEE_10D1
l3CEE_10C2:
	Mem0[ds:di - 2<i16>:byte] = 3<8>
	ah = 0x9E<8>
	call fn3CEE_1CBA (retsize: 2;)
	di = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn3CEE_1088_exit
l3CEE_10CE:
	// succ:  l3CEE_10CE_thunk_fn3CEE_1034
l3CEE_10CE_thunk_fn3CEE_1034:
	call fn3CEE_1034 (retsize: 0;)
	return
	// succ:  fn3CEE_1088_exit
l3CEE_10D1:
	Mem0[ds:di - 2<i16>:byte] = 7<8>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = 0x8760<16>
	cx = bx
	bx = bx ^ bx
	SZ = cond(bx)
	O = false
	C = false
	di = bx
	call fn3CEE_2031 (retsize: 2;)
	sp = sp + 2<16>
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	di = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn3CEE_1088_exit
fn3CEE_1088_exit:


// fn3CEE_11A9
// Return size: 4
define fn3CEE_11A9
fn3CEE_11A9_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_11A9
l3CEE_11A9:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	di = bx
	D = false
	bx = Mem0[ds:0x3836<16>:word16]
	SCZO = cond(Mem0[ds:bx - 2<i16>:byte] - 7<8>)
	branch Test(NE,Z) l3CEE_11C7
	// succ:  l3CEE_11B8 l3CEE_11C7
l3CEE_11B8:
	si = Mem0[ds:bx - 4<i16>:word16]
	// succ:  l3CEE_11BB
l3CEE_11BB:
	v12 = Mem0[ds:si:word16]
	Mem0[es:di:word16] = v12
	si = si + 2<i16>
	di = di + 2<i16>
	v14 = Mem0[ds:si:word16]
	Mem0[es:di:word16] = v14
	si = si + 2<i16>
	di = di + 2<i16>
	v15 = Mem0[ds:si:word16]
	Mem0[es:di:word16] = v15
	si = si + 2<i16>
	di = di + 2<i16>
	v16 = Mem0[ds:si:word16]
	Mem0[es:di:word16] = v16
	si = si + 2<i16>
	di = di + 2<i16>
	v17 = Mem0[ds:0x3836<16>:word16] - 0xC<16>
	Mem0[ds:0x3836<16>:word16] = v17
	SCZO = cond(v17)
	di = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn3CEE_11A9_exit
l3CEE_11C7:
	v18 = di
	di = bx
	bx = v18
	call fn3CEE_160F (retsize: 2;)
	si = di
	v19 = di
	di = bx
	bx = v19
	goto l3CEE_11BB
	// succ:  l3CEE_11BB
fn3CEE_11A9_exit:


// fn3CEE_1242
// Return size: 4
define fn3CEE_1242
fn3CEE_1242_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_1242
l3CEE_1242:
	call fn3CEE_127B (retsize: 4;)
	ah = SCZOP
	Mem0[ds:0x36A8<16>:byte] = ah
	ax = 0x1228<16>
	dx = 0x122E<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	Mem0[ds:0x36B2<16>:word16] = sp
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = cx
	si = Mem0[ds:0x3836<16>:word16]
	si = si - 0xC<16>
	SCZO = cond(si)
	Mem0[ds:0x3836<16>:word16] = si
	SCZO = cond(Mem0[ds:si + 10<i16>:byte] - 3<8>)
	si = Mem0[ds:si + 8<i16>:word16]
	branch Test(NE,Z) l3CEE_1273
	// succ:  l3CEE_126F l3CEE_1273
l3CEE_126F:
	call 0x3CEE<16>:ax (retsize: 2;)
	goto l3CEE_1275
	// succ:  l3CEE_1275
l3CEE_1273:
	call 0x3CEE<16>:dx (retsize: 2;)
	// succ:  l3CEE_1275
l3CEE_1275:
	cx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	di = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn3CEE_1242_exit
fn3CEE_1242_exit:


// fn3CEE_127B
// Return size: 4
define fn3CEE_127B
fn3CEE_127B_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_127B
l3CEE_127B:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	di = Mem0[ds:0x3836<16>:word16]
	bl = Mem0[ds:di - 2<i16>:byte]
	bh = bh ^ bh
	SZ = cond(bh)
	O = false
	C = false
	SZP = cond(Mem0[ds:bx + di:byte] & 0x7F<8>)
	O = false
	C = false
	branch Test(NE,Z) l3CEE_129D
	// succ:  l3CEE_128A l3CEE_129D
l3CEE_128A:
	SCZO = cond(bl - 3<8>)
	branch Test(EQ,Z) l3CEE_1297
	// succ:  l3CEE_128F l3CEE_1297
l3CEE_128F:
	SZP = cond(Mem0[ds:bx - 1<i16> + di:byte] & 0xF0<8>)
	O = false
	C = false
	branch Test(NE,Z) l3CEE_129D
	// succ:  l3CEE_1295 l3CEE_129D
l3CEE_1295:
	di = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn3CEE_127B_exit
l3CEE_1297:
	SZP = cond(Mem0[ds:bx - 1<i16> + di:byte] & 0x80<8>)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_1295
	// succ:  l3CEE_129D l3CEE_1295
l3CEE_129D:
	SZP = cond(Mem0[ds:bx + di:byte] & 0x80<8>)
	O = false
	C = false
	di = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	branch Test(NE,Z) l3CEE_12A6
	// succ:  l3CEE_12A3 l3CEE_12A6
l3CEE_12A3:
	sp = sp | sp
	SZ = cond(sp)
	O = false
	C = false
	return
	// succ:  fn3CEE_127B_exit
l3CEE_12A6:
	C = true
	return
	// succ:  fn3CEE_127B_exit
fn3CEE_127B_exit:


// fn3CEE_12B7
// Return size: 4
define fn3CEE_12B7
fn3CEE_12B7_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_12B7
l3CEE_12B7:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	di = Mem0[ds:0x3836<16>:word16]
	bl = Mem0[ds:di - 2<i16>:byte]
	si = Mem0[ds:di - 4<i16>:word16]
	SCZO = cond(si - di)
	branch Test(NE,Z) l3CEE_12CF
	// succ:  l3CEE_12C7 l3CEE_12CF
l3CEE_12C7:
	bh = bh ^ bh
	SZ = cond(bh)
	O = false
	C = false
	v16 = Mem0[ds:bx + di:byte] ^ 0x80<8>
	Mem0[ds:bx + di:byte] = v16
	SZ = cond(Mem0[ds:bx + di:byte])
	O = false
	C = false
	di = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn3CEE_12B7_exit
l3CEE_12CF:
	Mem0[ds:di - 4<i16>:word16] = di
	cx = ds
	es = cx
	D = false
	v20 = Mem0[ds:si:word16]
	Mem0[es:di:word16] = v20
	si = si + 2<i16>
	di = di + 2<i16>
	SCZO = cond(bl - 3<8>)
	branch Test(NE,Z) l3CEE_12E5
	// succ:  l3CEE_12DD l3CEE_12E5
l3CEE_12DD:
	ax = Mem0[ds:si:word16]
	si = si + 2<i16>
	ah = ah ^ 0x80<8>
	SZ = cond(ah)
	O = false
	C = false
	Mem0[es:di:word16] = ax
	di = di + 2<i16>
	di = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn3CEE_12B7_exit
l3CEE_12E5:
	v23 = Mem0[ds:si:word16]
	Mem0[es:di:word16] = v23
	si = si + 2<i16>
	di = di + 2<i16>
	v24 = Mem0[ds:si:word16]
	Mem0[es:di:word16] = v24
	si = si + 2<i16>
	di = di + 2<i16>
	ax = Mem0[ds:si:word16]
	si = si + 2<i16>
	ah = ah ^ 0x80<8>
	SZ = cond(ah)
	O = false
	C = false
	Mem0[es:di:word16] = ax
	di = di + 2<i16>
	di = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn3CEE_12B7_exit
fn3CEE_12B7_exit:


// fn3CEE_1472
// Return size: 4
define fn3CEE_1472
fn3CEE_1472_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_1472
l3CEE_1472:
	bx = 0x1C<16>
	// succ:  l3CEE_147A
l3CEE_147A:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	di = Mem0[ds:0x3836<16>:word16]
	SCZO = cond(Mem0[ds:di - 2<i16>:byte] - 7<8>)
	branch Test(EQ,Z) l3CEE_14BF
	// succ:  l3CEE_1486 l3CEE_14BF
l3CEE_1486:
	SCZO = cond(Mem0[ds:di - 14<i16>:byte] - 7<8>)
	branch Test(EQ,Z) l3CEE_14B7
	// succ:  l3CEE_148C l3CEE_14B7
l3CEE_148C:
	di = di - 0xC<16>
	SCZO = cond(di)
	Mem0[ds:0x3836<16>:word16] = di
	// succ:  l3CEE_1493
l3CEE_1493:
	ax = ds
	es = ax
	si = Mem0[ds:di - 4<i16>:word16]
	Mem0[ds:di - 4<i16>:word16] = di
	di = Mem0[ds:di + 8<i16>:word16]
	v25 = bx
	SCZO = cond(bx - 0x1C<16>)
	branch Test(UGE,C) l3CEE_14D4
	// succ:  l3CEE_14A5 l3CEE_14D4
l3CEE_14A5:
	v17 = bx
	v15 = bx
	SCZO = cond(bx - 0x18<16>)
	branch Test(UGE,C) l3CEE_14E2
	// succ:  l3CEE_14AA l3CEE_14E2
l3CEE_14AA:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	Mem0[ds:0x36B2<16>:word16] = sp
	call 0x3CEE<16>:Mem0[ds:bx + 0x368C<16>:word16] (retsize: 2;)
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	di = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn3CEE_1472_exit
l3CEE_14B7:
	bx = bx + 2<16>
	SCZO = cond(bx)
	call fn3CEE_160F (retsize: 2;)
	goto l3CEE_148C
	// succ:  l3CEE_148C
l3CEE_14BF:
	bx = bx + 2<16>
	SCZO = cond(bx)
	SCZO = cond(Mem0[ds:di - 14<i16>:byte] - 7<8>)
	branch Test(EQ,Z) l3CEE_148C
	// succ:  l3CEE_14C8 l3CEE_148C
l3CEE_14C8:
	di = di - 0xC<16>
	SCZO = cond(di)
	Mem0[ds:0x3836<16>:word16] = di
	call fn3CEE_160F (retsize: 2;)
	goto l3CEE_1493
	// succ:  l3CEE_1493
l3CEE_14D4:
	v23 = di
	di = si
	si = v23
	v24 = Mem0[ds:0x3836<16>:word16] - 0xC<16>
	Mem0[ds:0x3836<16>:word16] = v24
	SCZO = cond(v24)
	call 0x3CEE<16>:Mem0[ds:bx + 0x3688<16>:word16] (retsize: 2;)
	di = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn3CEE_1472_exit
l3CEE_14E2:
	v16 = Mem0[ds:0x3836<16>:word16] - 0xC<16>
	Mem0[ds:0x3836<16>:word16] = v16
	SCZO = cond(v16)
	call 0x3CEE<16>:Mem0[ds:bx + 0x368C<16>:word16] (retsize: 2;)
	ah = SCZOP
	ax = ax & 0x4100<16>
	SZ = cond(ax)
	O = false
	C = false
	ax = ax >>u 1<16>
	SCZO = cond(ax)
	ah = ah << 1<8>
	SCZO = cond(ah)
	ah = ah | al
	SZ = cond(ah)
	O = false
	C = false
	di = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	SCZO = ah
	return
	// succ:  fn3CEE_1472_exit
fn3CEE_1472_exit:


// fn3CEE_1545
// Return size: 0
define fn3CEE_1545
fn3CEE_1545_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_1545
l3CEE_1545:
	Mem0[ds:0x36AE<16>:word16] = 0x3430<16>
	al = 0x84<8>
	goto l3CEE_154D_thunk_fn3CEE_156B
	// succ:  l3CEE_154D_thunk_fn3CEE_156B
l3CEE_1545:
l3CEE_154D_thunk_fn3CEE_156B:
	call fn3CEE_156B (retsize: 0;)
	return
	// succ:  fn3CEE_1545_exit
fn3CEE_1545_exit:


// fn3CEE_154F
// Return size: 0
define fn3CEE_154F
fn3CEE_154F_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_154F
l3CEE_154F:
	Mem0[ds:0x36AE<16>:word16] = 0x3330<16>
	al = 0x83<8>
	// succ:  l3CEE_1557_thunk_fn3CEE_156B
l3CEE_1557_thunk_fn3CEE_156B:
	call fn3CEE_156B (retsize: 0;)
	return
	// succ:  fn3CEE_154F_exit
fn3CEE_154F_exit:


// fn3CEE_156B
// Return size: 0
define fn3CEE_156B
fn3CEE_156B_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_156B
l3CEE_156B:
	SCZO = cond(Mem0[ds:0x36B6<16>:word16] - 0<16>)
	branch Test(EQ,Z) l3CEE_1570_thunk_fn3CEE_1576
	goto l3CEE_1570_thunk_fn3CEE_1572
	// succ:  l3CEE_1570_thunk_fn3CEE_1572 l3CEE_1570_thunk_fn3CEE_1576
l3CEE_156B:
	SCZO = cond(Mem0[ds:0x36B6<16>:word16] - 0<16>)
	branch Test(EQ,Z) l3CEE_1576
	goto l3CEE_1570_thunk_fn3CEE_1572
	// succ:  l3CEE_1570_thunk_fn3CEE_1572 l3CEE_1570_thunk_fn3CEE_1576
l3CEE_1570_thunk_fn3CEE_1572:
	call fn3CEE_1572 (retsize: 0;)
	return
	// succ:  fn3CEE_156B_exit
l3CEE_1570_thunk_fn3CEE_1572:
	call fn3CEE_1572 (retsize: 0;)
	return
	// succ:  fn3CEE_156B_exit
l3CEE_1570_thunk_fn3CEE_1576:
	call fn3CEE_1576 (retsize: 0;)
	return
	// succ:  fn3CEE_156B_exit
l3CEE_1570_thunk_fn3CEE_1576:
	call fn3CEE_1576 (retsize: 0;)
	return
	// succ:  fn3CEE_156B_exit
fn3CEE_156B_exit:


// fn3CEE_1572
// Return size: 0
define fn3CEE_1572
fn3CEE_1572_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_1572
l3CEE_1572:
	call Mem0[ds:0x36B4<16>:segptr32] (retsize: 4;)
	// succ:  l3CEE_1572_thunk_fn3CEE_1576
l3CEE_1572_thunk_fn3CEE_1576:
	call fn3CEE_1576 (retsize: 0;)
	return
	// succ:  fn3CEE_1572_exit
fn3CEE_1572_exit:


// fn3CEE_1576
// Return size: 0
define fn3CEE_1576
fn3CEE_1576_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_1576
l3CEE_1576:
	SCZO = cond(al - 0x8C<8>)
	branch Test(NE,Z) l3CEE_1580
	// succ:  l3CEE_157A l3CEE_1580
l3CEE_157A:
	Mem0[ds:0x36AE<16>:word16] = 0x3231<16>
	// succ:  l3CEE_1580
l3CEE_1580:
	ah = ah - ah
	SCZO = cond(ah)
	Mem0[ds:0x36B0<16>:word16] = ax
	call fn3CEE_0244 (retsize: 4;)
	bx = 0x36AA<16>
	call fn3CEE_3182 (retsize: 4;)
	ax = 0xFD<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn3CEE_02B9 (retsize: 4;)
	sp = sp + 2<16>
	ax = Mem0[ds:0x36B0<16>:word16]
	ax = ax + 0xFFE4<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn3CEE_02B9 (retsize: 4;)
	sp = sp + 2<16>
	v13 = Mem0[ds:0x36B0<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v13
	call fn3CEE_01A0 (retsize: 4;)
	return
	// succ:  fn3CEE_1576_exit
fn3CEE_1576_exit:


// fn3CEE_160F
// Return size: 2
define fn3CEE_160F
fn3CEE_160F_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_160F
l3CEE_160F:
	si = Mem0[ds:di - 4<i16>:word16]
	Mem0[ds:di - 4<i16>:word16] = di
	Mem0[ds:di - 2<i16>:byte] = 7<8>
	// succ:  l3CEE_161E
l3CEE_161E:
	D = false
	ax = ax ^ ax
	SZ = cond(ax)
	O = false
	C = false
	cx = Mem0[ds:si:word16]
	dx = Mem0[ds:si + 2<i16>:word16]
	SZP = cond(dx & 0x7F80<16>)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_1651
	// succ:  l3CEE_162C l3CEE_1651
l3CEE_162C:
	Mem0[ds:di:word16] = ax
	dx = dx >> 1<16>
	SCZ = cond(dx)
	O = false
	v17 = (cx & 1<16> << 1<8>) != 0<16>
	cx = __rcr<word16,byte>(cx, 1<8>, C)
	C = v17
	v18 = (ax & 1<16> << 1<8>) != 0<16>
	ax = __rcr<word16,byte>(ax, 1<8>, C)
	C = v18
	dx = dx >> 1<16>
	SCZ = cond(dx)
	O = false
	v19 = (cx & 1<16> << 1<8>) != 0<16>
	cx = __rcr<word16,byte>(cx, 1<8>, C)
	C = v19
	v20 = (ax & 1<16> << 1<8>) != 0<16>
	ax = __rcr<word16,byte>(ax, 1<8>, C)
	C = v20
	dx = dx >> 1<16>
	SCZ = cond(dx)
	O = false
	v21 = (cx & 1<16> << 1<8>) != 0<16>
	cx = __rcr<word16,byte>(cx, 1<8>, C)
	C = v21
	v22 = (ax & 1<16> << 1<8>) != 0<16>
	ax = __rcr<word16,byte>(ax, 1<8>, C)
	C = v22
	Mem0[ds:di + 2<i16>:word16] = ax
	Mem0[ds:di + 4<i16>:word16] = cx
	dh = dh & 0x8F<8>
	SZ = cond(dh)
	O = false
	C = false
	dx = dx + 0x3800<16>
	SCZO = cond(dx)
	Mem0[ds:di + 6<i16>:word16] = dx
	return
	// succ:  fn3CEE_160F_exit
l3CEE_1651:
	Mem0[ds:di:word16] = ax
	Mem0[ds:di + 2<i16>:word16] = ax
	Mem0[ds:di + 4<i16>:word16] = ax
	Mem0[ds:di + 6<i16>:word16] = ax
	return
	// succ:  fn3CEE_160F_exit
fn3CEE_160F_exit:


// fn3CEE_1761
// Return size: 2
define fn3CEE_1761
fn3CEE_1761_entry:
	sp = fp
	Top = 0<i8>
	goto l3CEE_1761
	// succ:  l3CEE_1761
l3CEE_1559:
	Mem0[ds:0x36AE<16>:word16] = 0x3130<16>
	al = 0x81<8>
	// succ:  l3CEE_1561_thunk_fn3CEE_156B
l3CEE_1561_thunk_fn3CEE_156B:
	call fn3CEE_156B (retsize: 0;)
	return
	// succ:  fn3CEE_1761_exit
l3CEE_174E:
	SZP = cond(bx & 0x7F80<16>)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_17A0
	// succ:  l3CEE_1754 l3CEE_17A0
l3CEE_1754:
	v24 = (bx & 1<16> << 0x10<8> - 1<8>) != 0<16>
	bx = __rcl<word16,byte>(bx, 1<8>, C)
	C = v24
	C = !C
	return
	// succ:  fn3CEE_1761_exit
l3CEE_1758:
	goto l3CEE_1559
	// succ:  l3CEE_1559
l3CEE_175B:
	ah = ah | 0x7F<8>
	SZ = cond(ah)
	O = false
	C = false
	ah = ah << 1<8>
	SCZO = cond(ah)
	return
	// succ:  fn3CEE_1761_exit
l3CEE_1761:
	ax = Mem0[ds:si + 2<i16>:word16]
	bx = Mem0[es:di + 2<i16>:word16]
	SZP = cond(ax & 0x7F80<16>)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_174E
	// succ:  l3CEE_176D l3CEE_174E
l3CEE_176D:
	ax = ~ax
	SZP = cond(ax & 0x7F80<16>)
	O = false
	C = false
	ax = ~ax
	branch Test(EQ,Z) l3CEE_1758
	// succ:  l3CEE_1776 l3CEE_1758
l3CEE_1776:
	bx = ~bx
	SZP = cond(bx & 0x7F80<16>)
	O = false
	C = false
	bx = ~bx
	branch Test(EQ,Z) l3CEE_1758
	// succ:  l3CEE_1780 l3CEE_1758
l3CEE_1780:
	ch = ah
	ch = ch ^ bh
	SZ = cond(ch)
	O = false
	C = false
	branch Test(SG,S) l3CEE_175B
	// succ:  l3CEE_1786 l3CEE_175B
l3CEE_1786:
	bx = bx << 1<16>
	SCZO = cond(bx)
	ax = ax << 1<16>
	SCZO = cond(ax)
	branch Test(UGE,C) l3CEE_1797
	// succ:  l3CEE_178C l3CEE_1797
l3CEE_178C:
	v20 = bx
	bx = ax
	ax = v20
	v21 = di
	di = si
	si = v21
	dx = es
	cx = ds
	es = cx
	ds = dx
	// succ:  l3CEE_1797
l3CEE_1797:
	SCZO = cond(ax - bx)
	branch Test(NE,Z) l3CEE_17A0
	// succ:  l3CEE_179B l3CEE_17A0
l3CEE_179B:
	ax = Mem0[ds:si:word16]
	SCZO = cond(ax - Mem0[es:di:word16])
	// succ:  l3CEE_17A0
l3CEE_17A0:
	return
	// succ:  fn3CEE_1761_exit
fn3CEE_1761_exit:


// fn3CEE_1BDE
// Return size: 0
define fn3CEE_1BDE
fn3CEE_1BDE_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_1BDE
l3CEE_1BDE:
	v4 = di
	di = si
	si = v4
	// succ:  l3CEE_1BDE_thunk_fn3CEE_1BE0
l3CEE_1BDE_thunk_fn3CEE_1BE0:
	call fn3CEE_1BE0 (retsize: 0;)
	return
	// succ:  fn3CEE_1BDE_exit
fn3CEE_1BDE_exit:


// fn3CEE_1BE0
// Return size: 0
define fn3CEE_1BE0
fn3CEE_1BE0_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_1BE0
l3CEE_1BE0:
	ax = Mem0[ds:di + 2<i16>:word16]
	ah = ah ^ 0x80<8>
	SZ = cond(ah)
	O = false
	C = false
	// succ:  l3CEE_1BE6_thunk_fn3CEE_1BEB
l3CEE_1BE6_thunk_fn3CEE_1BEB:
	call fn3CEE_1BEB (retsize: 0;)
	return
	// succ:  fn3CEE_1BE0_exit
fn3CEE_1BE0_exit:


// fn3CEE_1BE8
// Return size: 2
define fn3CEE_1BE8
fn3CEE_1BE8_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_1BE8
l3CEE_1BE8:
	ax = Mem0[ds:di + 2<i16>:word16]
	// succ:  l3CEE_1BE8_thunk_fn3CEE_1BEB
l3CEE_1BE8_thunk_fn3CEE_1BEB:
	call fn3CEE_1BEB (retsize: 0;)
	return
	// succ:  fn3CEE_1BE8_exit
fn3CEE_1BE8_exit:


// fn3CEE_1BEB
// Return size: 0
define fn3CEE_1BEB
fn3CEE_1BEB_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_1BEB
l3CEE_1BEB:
	bx = Mem0[ds:di + 1<i16>:word16]
	dh = Mem0[ds:di:byte]
	dl = 0<8>
	bh = bh | 0x80<8>
	SZ = cond(bh)
	O = false
	C = false
	cx = Mem0[ds:si + 2<i16>:word16]
	di = Mem0[ds:si - 1<i16>:word16]
	si = Mem0[ds:si + 1<i16>:word16]
	di = di & 0xFF00<16>
	SZ = cond(di)
	O = false
	C = false
	si = si | 0x8000<16>
	SZ = cond(si)
	O = false
	C = false
	v15 = (cx & 1<16> << 0x10<8> - 1<8>) != 0<16>
	cx = __rol<word16,byte>(cx, 1<8>)
	C = v15
	v16 = (ax & 1<16> << 0x10<8> - 1<8>) != 0<16>
	ax = __rol<word16,byte>(ax, 1<8>)
	C = v16
	ch = ch | ch
	SZ = cond(ch)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_1C0C_thunk_fn3CEE_1C73
	goto l3CEE_1C0C_thunk_fn3CEE_1C0E
	// succ:  l3CEE_1C0C_thunk_fn3CEE_1C0E l3CEE_1C0C_thunk_fn3CEE_1C73
l3CEE_1BEB:
	bx = Mem0[ds:di + 1<i16>:word16]
	dh = Mem0[ds:di:byte]
	dl = 0<8>
	bh = bh | 0x80<8>
	SZ = cond(bh)
	O = false
	C = false
	cx = Mem0[ds:si + 2<i16>:word16]
	di = Mem0[ds:si - 1<i16>:word16]
	si = Mem0[ds:si + 1<i16>:word16]
	di = di & 0xFF00<16>
	SZ = cond(di)
	O = false
	C = false
	si = si | 0x8000<16>
	SZ = cond(si)
	O = false
	C = false
	v21 = (cx & 1<16> << 0x10<8> - 1<8>) != 0<16>
	cx = __rol<word16,byte>(cx, 1<8>)
	C = v21
	v22 = (ax & 1<16> << 0x10<8> - 1<8>) != 0<16>
	ax = __rol<word16,byte>(ax, 1<8>)
	C = v22
	ch = ch | ch
	SZ = cond(ch)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_1C73
	goto l3CEE_1C0C_thunk_fn3CEE_1C0E
	// succ:  l3CEE_1C0C_thunk_fn3CEE_1C0E l3CEE_1C0C_thunk_fn3CEE_1C73
l3CEE_1C0C_thunk_fn3CEE_1C0E:
	call fn3CEE_1C0E (retsize: 0;)
	return
	// succ:  fn3CEE_1BEB_exit
l3CEE_1C0C_thunk_fn3CEE_1C0E:
	call fn3CEE_1C0E (retsize: 0;)
	return
	// succ:  fn3CEE_1BEB_exit
l3CEE_1C0C_thunk_fn3CEE_1C73:
	call fn3CEE_1C73 (retsize: 0;)
	return
	// succ:  fn3CEE_1BEB_exit
l3CEE_1C0C_thunk_fn3CEE_1C73:
	call fn3CEE_1C73 (retsize: 0;)
	return
	// succ:  fn3CEE_1BEB_exit
fn3CEE_1BEB_exit:


// fn3CEE_1C0E
// Return size: 0
define fn3CEE_1C0E
fn3CEE_1C0E_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_1C0E
l3CEE_1C0E:
	ah = ah | ah
	SZ = cond(ah)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_1C6D
	// succ:  l3CEE_1C12 l3CEE_1C6D
l3CEE_1C12:
	SCZO = cond(ch - ah)
	branch Test(UGE,C) l3CEE_1C1B
	// succ:  l3CEE_1C16 l3CEE_1C1B
l3CEE_1C16:
	v13 = bx
	bx = si
	si = v13
	v16 = dx
	dx = di
	di = v16
	v19 = cx
	cx = ax
	ax = v19
	// succ:  l3CEE_1C1B
l3CEE_1C1B:
	ah = ah - ch
	SCZO = cond(ah)
	C = ah != 0<8>
	ah = -ah
	SZO = cond(ah)
	SCZO = cond(ah - 0x18<8>)
	branch Test(UGT,CZ) l3CEE_1C6D
	// succ:  l3CEE_1C24 l3CEE_1C6D
l3CEE_1C24:
	v24 = (cl & 1<8> << 1<8>) != 0<8>
	cl = __ror<byte,byte>(cl, 1<8>)
	C = v24
	al = al >>u 1<8>
	SCZO = cond(al)
	v26 = (cl & 1<8> << 1<8>) != 0<8>
	cl = __rcr<byte,byte>(cl, 1<8>, C)
	C = v26
	v27 = cx
	cx = ax
	ax = v27
	cl = ch
	ch = 0<8>
	branch cx == 0<16> l3CEE_1C86
	// succ:  l3CEE_1C31 l3CEE_1C86
l3CEE_1C31:
	SCZO = cond(cl - 0xE<8>)
	branch Test(LT,SO) l3CEE_1C48
	// succ:  l3CEE_1C36 l3CEE_1C48
l3CEE_1C36:
	dx = dx | dx
	SZ = cond(dx)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_1C3D
	// succ:  l3CEE_1C3A l3CEE_1C3D
l3CEE_1C3A:
	bl = bl | 1<8>
	SZ = cond(bl)
	O = false
	C = false
	// succ:  l3CEE_1C3D
l3CEE_1C3D:
	dx = bx
	bx = bx ^ bx
	SZ = cond(bx)
	O = false
	C = false
	cl = cl - 0x10<8>
	SCZO = cond(cl)
	branch Test(ULT,C) l3CEE_1C63
	// succ:  l3CEE_1C46 l3CEE_1C63
l3CEE_1C46:
	branch Test(EQ,Z) l3CEE_1C86
	// succ:  l3CEE_1C48 l3CEE_1C86
l3CEE_1C48:
	SCZO = cond(cl - 5<8>)
	branch Test(LE,SZO) l3CEE_1C78
	// succ:  l3CEE_1C4D l3CEE_1C78
l3CEE_1C4D:
	dl = dl | dl
	SZ = cond(dl)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_1C54
	// succ:  l3CEE_1C51 l3CEE_1C54
l3CEE_1C51:
	dh = dh | 1<8>
	SZ = cond(dh)
	O = false
	C = false
	// succ:  l3CEE_1C54
l3CEE_1C54:
	dl = dh
	dh = bl
	bl = bh
	bh = ch
	cl = cl - 8<8>
	SCZO = cond(cl)
	branch Test(UGT,CZ) l3CEE_1C78
	// succ:  l3CEE_1C61 l3CEE_1C78
l3CEE_1C61:
	branch Test(EQ,Z) l3CEE_1C86
	// succ:  l3CEE_1C63 l3CEE_1C86
l3CEE_1C63:
	dx = dx << 1<16>
	SCZO = cond(dx)
	v33 = (bx & 1<16> << 0x10<8> - 1<8>) != 0<16>
	bx = __rcl<word16,byte>(bx, 1<8>, C)
	C = v33
	cl = cl + 1<8>
	SZO = cond(cl)
	branch Test(NE,Z) l3CEE_1C63
	// succ:  l3CEE_1C6B l3CEE_1C63
l3CEE_1C6B:
	goto l3CEE_1C86
	// succ:  l3CEE_1C86
l3CEE_1C6D:
	bx = si
	dx = di
	ax = cx
	// succ:  l3CEE_1C71_thunk_fn3CEE_1C73
l3CEE_1C71_thunk_fn3CEE_1C73:
	call fn3CEE_1C73 (retsize: 0;)
	return
	// succ:  fn3CEE_1C0E_exit
l3CEE_1C78:
	SZP = cond(dl & 0x3F<8>)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_1C80
	// succ:  l3CEE_1C7D l3CEE_1C80
l3CEE_1C7D:
	dl = dl | 0x20<8>
	SZ = cond(dl)
	O = false
	C = false
	// succ:  l3CEE_1C80
l3CEE_1C80:
	bx = bx >>u 1<16>
	SCZO = cond(bx)
	v37 = (dx & 1<16> << 1<8>) != 0<16>
	dx = __rcr<word16,byte>(dx, 1<8>, C)
	C = v37
	cx = cx - 1<16>
	branch cx != 0<16> l3CEE_1C80
	// succ:  l3CEE_1C86 l3CEE_1C80
l3CEE_1C86:
	SZP = cond(dl & 0x3F<8>)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_1C8E
	// succ:  l3CEE_1C8B l3CEE_1C8E
l3CEE_1C8B:
	dl = dl | 0x20<8>
	SZ = cond(dl)
	O = false
	C = false
	// succ:  l3CEE_1C8E
l3CEE_1C8E:
	al = al << 1<8>
	SCZO = cond(al)
	branch Test(OV,O) l3CEE_1CA6
	// succ:  l3CEE_1C92 l3CEE_1CA6
l3CEE_1C92:
	dx = dx + di
	SCZO = cond(dx)
	bx = bx + si + C
	SCZO = cond(bx)
	branch Test(UGE,C) l3CEE_1CE8
	goto l3CEE_1C98
	// succ:  l3CEE_1C98 l3CEE_1C96_thunk_fn3CEE_1CE8
l3CEE_1C96_thunk_fn3CEE_1CE8:
	call fn3CEE_1CE8 (retsize: 0;)
	return
	// succ:  fn3CEE_1C0E_exit
l3CEE_1C98:
	v35 = (bx & 1<16> << 1<8>) != 0<16>
	bx = __rcr<word16,byte>(bx, 1<8>, C)
	C = v35
	v36 = (dx & 1<16> << 1<8>) != 0<16>
	dx = __rcr<word16,byte>(dx, 1<8>, C)
	C = v36
	ah = ah + 1<8>
	SZO = cond(ah)
	SCZO = cond(ah - 0xFF<8>)
	branch Test(NE,Z) l3CEE_1CE8
	goto l3CEE_1CA3
	// succ:  l3CEE_1CA3 l3CEE_1CA1_thunk_fn3CEE_1CE8
l3CEE_1CA1_thunk_fn3CEE_1CE8:
	call fn3CEE_1CE8 (retsize: 0;)
	return
	// succ:  fn3CEE_1C0E_exit
l3CEE_1CA3:
	// succ:  l3CEE_1CA3_thunk_fn3CEE_1545
l3CEE_1CA3_thunk_fn3CEE_1545:
	call fn3CEE_1545 (retsize: 0;)
	return
	// succ:  fn3CEE_1C0E_exit
l3CEE_1CA6:
	di = di - dx
	SCZO = cond(di)
	si = si - bx - C
	SCZO = cond(si)
	dx = di
	bx = si
	branch Test(UGE,C) l3CEE_1CBA
	goto l3CEE_1CB0
	// succ:  l3CEE_1CB0 l3CEE_1CAE_thunk_fn3CEE_1CBA
l3CEE_1CAE_thunk_fn3CEE_1CBA:
	call fn3CEE_1CBA (retsize: 0;)
	return
	// succ:  fn3CEE_1C0E_exit
l3CEE_1CB0:
	bx = ~bx
	C = dx != 0<16>
	dx = -dx
	SZO = cond(dx)
	C = !C
	bx = bx + 0<16> + C
	SCZO = cond(bx)
	al = ~al
	// succ:  l3CEE_1CB8_thunk_fn3CEE_1CBA
l3CEE_1CB8_thunk_fn3CEE_1CBA:
	call fn3CEE_1CBA (retsize: 0;)
	return
	// succ:  fn3CEE_1C0E_exit
fn3CEE_1C0E_exit:


// fn3CEE_1C73
// Return size: 0
define fn3CEE_1C73
fn3CEE_1C73_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_1C73
l3CEE_1C73:
	al = al >>u 1<8>
	SCZO = cond(al)
	// succ:  l3CEE_1C75_thunk_fn3CEE_1D0F
l3CEE_1C75_thunk_fn3CEE_1D0F:
	call fn3CEE_1D0F (retsize: 0;)
	return
	// succ:  fn3CEE_1C73_exit
fn3CEE_1C73_exit:


// fn3CEE_1CBA
// Return size: 2
define fn3CEE_1CBA
fn3CEE_1CBA_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_1CBA
l3CEE_1CBA:
	bx = bx | bx
	SZ = cond(bx)
	O = false
	C = false
	branch Test(NE,Z) l3CEE_1CC9
	// succ:  l3CEE_1CBE l3CEE_1CC9
l3CEE_1CBE:
	ah = ah - 0x10<8>
	SCZO = cond(ah)
	branch Test(ULE,CZ) l3CEE_1D2D
	goto l3CEE_1CC3
	// succ:  l3CEE_1CC3 l3CEE_1CC1_thunk_fn3CEE_1D2D
l3CEE_1CC1_thunk_fn3CEE_1D2D:
	call fn3CEE_1D2D (retsize: 0;)
	return
	// succ:  fn3CEE_1CBA_exit
l3CEE_1CC3:
	v13 = dx
	dx = bx
	bx = v13
	bx = bx | bx
	SZ = cond(bx)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_1D2D
	goto l3CEE_1CC9
	// succ:  l3CEE_1CC9 l3CEE_1CC7_thunk_fn3CEE_1D2D
l3CEE_1CC7_thunk_fn3CEE_1D2D:
	call fn3CEE_1D2D (retsize: 0;)
	return
	// succ:  fn3CEE_1CBA_exit
l3CEE_1CC9:
	bh = bh | bh
	SZ = cond(bh)
	O = false
	C = false
	branch Test(NE,Z) l3CEE_1CDC
	// succ:  l3CEE_1CCD l3CEE_1CDC
l3CEE_1CCD:
	ah = ah - 8<8>
	SCZO = cond(ah)
	branch Test(ULE,CZ) l3CEE_1D2D
	goto l3CEE_1CD2
	// succ:  l3CEE_1CD2 l3CEE_1CD0_thunk_fn3CEE_1D2D
l3CEE_1CD0_thunk_fn3CEE_1D2D:
	call fn3CEE_1D2D (retsize: 0;)
	return
	// succ:  fn3CEE_1CBA_exit
l3CEE_1CD2:
	bh = bl
	bl = dh
	dh = dl
	dl = dl ^ dl
	SZ = cond(dl)
	O = false
	C = false
	bh = bh | bh
	SZ = cond(bh)
	O = false
	C = false
	// succ:  l3CEE_1CDC
l3CEE_1CDC:
	branch Test(SG,S) l3CEE_1CE8
	goto l3CEE_1CDE
	// succ:  l3CEE_1CDE l3CEE_1CDC_thunk_fn3CEE_1CE8
l3CEE_1CDC_thunk_fn3CEE_1CE8:
	call fn3CEE_1CE8 (retsize: 0;)
	return
	// succ:  fn3CEE_1CBA_exit
l3CEE_1CDE:
	ah = ah - 1<8>
	SZO = cond(ah)
	branch Test(EQ,Z) l3CEE_1D2D
	goto l3CEE_1CE2
	// succ:  l3CEE_1CE2 l3CEE_1CE0_thunk_fn3CEE_1D2D
l3CEE_1CE0_thunk_fn3CEE_1D2D:
	call fn3CEE_1D2D (retsize: 0;)
	return
	// succ:  fn3CEE_1CBA_exit
l3CEE_1CE2:
	dx = dx << 1<16>
	SCZO = cond(dx)
	v20 = (bx & 1<16> << 0x10<8> - 1<8>) != 0<16>
	bx = __rcl<word16,byte>(bx, 1<8>, C)
	C = v20
	branch Test(NO,O) l3CEE_1CDE
	// succ:  l3CEE_1CE6_thunk_fn3CEE_1CE8 l3CEE_1CDE
l3CEE_1CE6_thunk_fn3CEE_1CE8:
	call fn3CEE_1CE8 (retsize: 0;)
	return
	// succ:  fn3CEE_1CBA_exit
fn3CEE_1CBA_exit:


// fn3CEE_1CE8
// Return size: 0
define fn3CEE_1CE8
fn3CEE_1CE8_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_1CE8
l3CEE_1CE8:
	SCZO = cond(Mem0[ds:0x386E<16>:byte] - 0<8>)
	branch Test(EQ,Z) l3CEE_1CF2
	// succ:  l3CEE_1CEF l3CEE_1CF2
l3CEE_1CEF:
	goto l3CEE_1E6E
	// succ:  l3CEE_1E6E
l3CEE_1CF2:
	SCZO = cond(dl - 0x80<8>)
	branch Test(UGT,CZ) l3CEE_1CFE
	// succ:  l3CEE_1CF7 l3CEE_1CFE
l3CEE_1CF7:
	branch Test(ULT,C) l3CEE_1D0D
	// succ:  l3CEE_1CF9 l3CEE_1D0D
l3CEE_1CF9:
	SZP = cond(dh & 1<8>)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_1D0D
	// succ:  l3CEE_1CFE l3CEE_1D0D
l3CEE_1CFE:
	dh = dh + 1<8>
	SCZO = cond(dh)
	bx = bx + 0<16> + C
	SCZO = cond(bx)
	branch Test(UGE,C) l3CEE_1D0D
	// succ:  l3CEE_1D06 l3CEE_1D0D
l3CEE_1D06:
	ah = ah + 1<8>
	SZO = cond(ah)
	SCZO = cond(ah - 0xFF<8>)
	branch Test(EQ,Z) l3CEE_1D0B_thunk_fn3CEE_1D47
	goto l3CEE_1D0D
	// succ:  l3CEE_1D0D l3CEE_1D0B_thunk_fn3CEE_1D47
l3CEE_1D0B_thunk_fn3CEE_1D47:
	call fn3CEE_1D47 (retsize: 0;)
	return
	// succ:  fn3CEE_1CE8_exit
l3CEE_1D0D:
	al = al << 1<8>
	SCZO = cond(al)
	// succ:  l3CEE_1D0D_thunk_fn3CEE_1D0F
l3CEE_1D0D_thunk_fn3CEE_1D0F:
	call fn3CEE_1D0F (retsize: 0;)
	return
	// succ:  fn3CEE_1CE8_exit
l3CEE_1E6E:
	Mem0[ds:0x386E<16>:byte] = 0<8>
	ch = Mem0[ds:0x3870<16>:byte]
	ch = ch | ch
	SZ = cond(ch)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_1E82
	// succ:  l3CEE_1E7B l3CEE_1E82
l3CEE_1E7B:
	ch = ch - 0xE<8>
	SCZO = cond(ch)
	SCZO = cond(ch - ah)
	branch Test(UGT,CZ) l3CEE_1EBE
	goto l3CEE_1E82
	// succ:  l3CEE_1E82 l3CEE_1E80_thunk_fn3CEE_1EBE
l3CEE_1E80_thunk_fn3CEE_1EBE:
	call fn3CEE_1EBE (retsize: 0;)
	return
	// succ:  fn3CEE_1CE8_exit
l3CEE_1E82:
	ah = ah | ah
	SZ = cond(ah)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_1EBE
	goto l3CEE_1E86
	// succ:  l3CEE_1E86 l3CEE_1E84_thunk_fn3CEE_1EBE
l3CEE_1E84_thunk_fn3CEE_1EBE:
	call fn3CEE_1EBE (retsize: 0;)
	return
	// succ:  fn3CEE_1CE8_exit
l3CEE_1E86:
	v13 = Mem0[ds:0x3836<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v13
	Mem0[ds:0x3836<16>:word16] = 0x3871<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	dx = dx ^ dx
	SZ = cond(dx)
	O = false
	C = false
	bl = bl ^ bl
	SZ = cond(bl)
	O = false
	C = false
	call fn3CEE_1CE8 (retsize: 2;)
	sp = sp + 2<16>
	dx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	ax = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	Mem0[ds:0x3836<16>:word16] = 0x3875<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	bh = bh ^ bh
	SZ = cond(bh)
	O = false
	C = false
	call fn3CEE_1CBA (retsize: 2;)
	sp = sp + 2<16>
	// succ:  l3CEE_1EA8_thunk_fn3CEE_1EBE
l3CEE_1EA8_thunk_fn3CEE_1EBE:
	call fn3CEE_1EBE (retsize: 0;)
	return
	// succ:  fn3CEE_1CE8_exit
fn3CEE_1CE8_exit:


// fn3CEE_1D0F
// Return size: 0
define fn3CEE_1D0F
fn3CEE_1D0F_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_1D0F
l3CEE_1D0F:
	v6 = (ax & 1<16> << 1<8>) != 0<16>
	ax = __rcr<word16,byte>(ax, 1<8>, C)
	C = v6
	SZP = cond(ax & 0x7F80<16>)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_1D2D
	goto l3CEE_1D16
	// succ:  l3CEE_1D16 l3CEE_1D14_thunk_fn3CEE_1CBA
l3CEE_1D14_thunk_fn3CEE_1CBA:
	call fn3CEE_1CBA (retsize: 0;)
	return
	// succ:  fn3CEE_1D0F_exit
l3CEE_1D16:
	al = al & 0x80<8>
	SZ = cond(al)
	O = false
	C = false
	bh = bh & 0x7F<8>
	SZ = cond(bh)
	O = false
	C = false
	al = al | bh
	SZ = cond(al)
	O = false
	C = false
	di = Mem0[ds:0x3836<16>:word16]
	Mem0[ds:di + 2<i16>:word16] = ax
	ah = bl
	al = dh
	Mem0[ds:di:word16] = ax
	si = di
	return
	// succ:  fn3CEE_1D0F_exit
fn3CEE_1D0F_exit:


// fn3CEE_1D2D
// Return size: 0
define fn3CEE_1D2D
fn3CEE_1D2D_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_1D2D
l3CEE_1D2D:
	SCZO = cond(Mem0[ds:0x386E<16>:byte] - 0<8>)
	branch Test(EQ,Z) l3CEE_1D37
	// succ:  l3CEE_1D34 l3CEE_1D37
l3CEE_1D34:
	goto l3CEE_1EB5
	// succ:  l3CEE_1EB5
l3CEE_1D37:
	ax = ax ^ ax
	SZ = cond(ax)
	O = false
	C = false
	di = Mem0[ds:0x3836<16>:word16]
	Mem0[ds:di + 2<i16>:word16] = ax
	Mem0[ds:di:word16] = ax
	si = di
	return
	// succ:  fn3CEE_1D2D_exit
l3CEE_1EB5:
	ax = ax ^ ax
	SZ = cond(ax)
	O = false
	C = false
	bx = bx ^ bx
	SZ = cond(bx)
	O = false
	C = false
	dx = dx ^ dx
	SZ = cond(dx)
	O = false
	C = false
	Mem0[ds:0x386E<16>:byte] = al
	// succ:  l3CEE_1EBB_thunk_fn3CEE_1EBE
l3CEE_1EBB_thunk_fn3CEE_1EBE:
	call fn3CEE_1EBE (retsize: 0;)
	return
	// succ:  fn3CEE_1D2D_exit
fn3CEE_1D2D_exit:


// fn3CEE_1D45
// Return size: 0
define fn3CEE_1D45
fn3CEE_1D45_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_1D45
l3CEE_1D45:
	branch Test(NS,S) l3CEE_1D45_thunk_fn3CEE_1D2D
	goto l3CEE_1D45_thunk_fn3CEE_1D47
	// succ:  l3CEE_1D45_thunk_fn3CEE_1D47 l3CEE_1D45_thunk_fn3CEE_1D2D
l3CEE_1D45_thunk_fn3CEE_1D2D:
	call fn3CEE_1D2D (retsize: 0;)
	return
	// succ:  fn3CEE_1D45_exit
l3CEE_1D45_thunk_fn3CEE_1D47:
	call fn3CEE_1D47 (retsize: 0;)
	return
	// succ:  fn3CEE_1D45_exit
fn3CEE_1D45_exit:


// fn3CEE_1D47
// Return size: 0
define fn3CEE_1D47
fn3CEE_1D47_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_1D47
l3CEE_1D47:
	goto l3CEE_1D47_thunk_fn3CEE_1545
	// succ:  l3CEE_1D47_thunk_fn3CEE_1545
l3CEE_1D47:
l3CEE_1D47_thunk_fn3CEE_1545:
	call fn3CEE_1545 (retsize: 0;)
	return
	// succ:  fn3CEE_1D47_exit
fn3CEE_1D47_exit:


// fn3CEE_1D4A
// Return size: 0
define fn3CEE_1D4A
fn3CEE_1D4A_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_1D4A
l3CEE_1D4A:
	D = false
	ax = Mem0[ds:si:word16]
	si = si + 2<i16>
	si = Mem0[ds:si:word16]
	v8 = si
	si = ax
	ax = v8
	ax = ax << 1<16>
	SCZO = cond(ax)
	v10 = (al & 1<8> << 1<8>) != 0<8>
	al = __rcr<byte,byte>(al, 1<8>, C)
	C = v10
	ah = ah | ah
	SZ = cond(ah)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_1D55_thunk_fn3CEE_1D2D
	goto l3CEE_1D57
	// succ:  l3CEE_1D57 l3CEE_1D55_thunk_fn3CEE_1D2D
l3CEE_1D55_thunk_fn3CEE_1D2D:
	call fn3CEE_1D2D (retsize: 0;)
	return
	// succ:  fn3CEE_1D4A_exit
l3CEE_1D57:
	cx = Mem0[ds:di + 2<i16>:word16]
	cx = cx << 1<16>
	SCZO = cond(cx)
	v19 = (cl & 1<8> << 1<8>) != 0<8>
	cl = __rcr<byte,byte>(cl, 1<8>, C)
	C = v19
	ch = ch | ch
	SZ = cond(ch)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_1D60_thunk_fn3CEE_1D2D
	goto l3CEE_1D62
	// succ:  l3CEE_1D62 l3CEE_1D60_thunk_fn3CEE_1D2D
l3CEE_1D60_thunk_fn3CEE_1D2D:
	call fn3CEE_1D2D (retsize: 0;)
	return
	// succ:  fn3CEE_1D4A_exit
l3CEE_1D62:
	di = Mem0[ds:di:word16]
	bx = ax
	al = al ^ cl
	SZ = cond(al)
	O = false
	C = false
	ah = ah - 0x80<8>
	SCZO = cond(ah)
	ch = ch - 0x7F<8>
	SCZO = cond(ch)
	ah = ah + ch
	SCZO = cond(ah)
	// succ:  l3CEE_1D6E_thunk_fn3CEE_1D70
l3CEE_1D6E_thunk_fn3CEE_1D70:
	call fn3CEE_1D70 (retsize: 0;)
	return
	// succ:  fn3CEE_1D4A_exit
fn3CEE_1D4A_exit:


// fn3CEE_1D70
// Return size: 0
define fn3CEE_1D70
fn3CEE_1D70_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_1D70
l3CEE_1D70:
	branch Test(OV,O) l3CEE_1D70_thunk_fn3CEE_1D45
	goto l3CEE_1D70_thunk_fn3CEE_1D72
	// succ:  l3CEE_1D70_thunk_fn3CEE_1D72 l3CEE_1D70_thunk_fn3CEE_1D45
l3CEE_1D70:
	branch Test(OV,O) l3CEE_1D45
	goto l3CEE_1D70_thunk_fn3CEE_1D72
	// succ:  l3CEE_1D70_thunk_fn3CEE_1D72 l3CEE_1D70_thunk_fn3CEE_1D45
l3CEE_1D70_thunk_fn3CEE_1D45:
	call fn3CEE_1D45 (retsize: 0;)
	return
	// succ:  fn3CEE_1D70_exit
l3CEE_1D70_thunk_fn3CEE_1D45:
	call fn3CEE_1D45 (retsize: 0;)
	return
	// succ:  fn3CEE_1D70_exit
l3CEE_1D70_thunk_fn3CEE_1D72:
	call fn3CEE_1D72 (retsize: 0;)
	return
	// succ:  fn3CEE_1D70_exit
l3CEE_1D70_thunk_fn3CEE_1D72:
	call fn3CEE_1D72 (retsize: 0;)
	return
	// succ:  fn3CEE_1D70_exit
fn3CEE_1D70_exit:


// fn3CEE_1D72
// Return size: 0
define fn3CEE_1D72
fn3CEE_1D72_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_1D72
l3CEE_1D72:
	ah = ah + 0x80<8>
	SCZO = cond(ah)
	SCZO = cond(ah - 0xFF<8>)
	// succ:  l3CEE_1D75_thunk_fn3CEE_1DC4
l3CEE_1D75_thunk_fn3CEE_1DC4:
	call fn3CEE_1DC4 (retsize: 0;)
	return
	// succ:  fn3CEE_1D72_exit
fn3CEE_1D72_exit:


// fn3CEE_1D78
// Return size: 0
define fn3CEE_1D78
fn3CEE_1D78_entry:
	sp = fp
	Top = 0<i8>
	goto l3CEE_1D78_thunk_fn3CEE_1D72
	// succ:  l3CEE_1D78_thunk_fn3CEE_1D72
l3CEE_1D78:
	branch Test(EQ,Z) l3CEE_1D78_thunk_fn3CEE_1D47
	goto l3CEE_1D7A
	// succ:  l3CEE_1D7A l3CEE_1D78_thunk_fn3CEE_1D47
l3CEE_1D78_thunk_fn3CEE_1D47:
	call fn3CEE_1D47 (retsize: 0;)
	return
	// succ:  fn3CEE_1D78_exit
l3CEE_1D78_thunk_fn3CEE_1D72:
	call fn3CEE_1D72 (retsize: 0;)
	return
	// succ:  fn3CEE_1D78_exit
l3CEE_1D7A:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	bh = bh ^ bh
	SZ = cond(bh)
	O = false
	C = false
	ch = bh
	bl = bl | 0x80<8>
	SZ = cond(bl)
	O = false
	C = false
	cl = cl | 0x80<8>
	SZ = cond(cl)
	O = false
	C = false
	bp = bx
	ax = si
	dx_ax = di *u32 ax
	SCZO = cond(dx_ax)
	bx = dx
	ax = ax | ax
	SZ = cond(ax)
	O = false
	C = false
	ah = SCZOP
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = bp
	dx_ax = di *u32 ax
	SCZO = cond(dx_ax)
	bx = bx + ax
	SCZO = cond(bx)
	dx = dx + 0<16> + C
	SCZO = cond(dx)
	di = dx
	ax = cx
	dx_ax = si *u32 ax
	SCZO = cond(dx_ax)
	bx = bx + ax
	SCZO = cond(bx)
	di = di + dx + C
	SCZO = cond(di)
	ax = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	SCZO = ah
	branch Test(EQ,Z) l3CEE_1DAB
	// succ:  l3CEE_1DA8 l3CEE_1DAB
l3CEE_1DA8:
	bl = bl | 1<8>
	SZ = cond(bl)
	O = false
	C = false
	// succ:  l3CEE_1DAB
l3CEE_1DAB:
	ax = bp
	ax = cl *u16 al
	SCZO = cond(ax)
	ax = ax + di
	SCZO = cond(ax)
	dx = bx
	v26 = bx
	bx = ax
	ax = v26
	// succ:  l3CEE_1DB3_thunk_fn3CEE_1DB4
l3CEE_1DB3_thunk_fn3CEE_1DB4:
	call fn3CEE_1DB4 (retsize: 0;)
	return
	// succ:  fn3CEE_1D78_exit
fn3CEE_1D78_exit:


// fn3CEE_1DB4
// Return size: 0
define fn3CEE_1DB4
fn3CEE_1DB4_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_1DB4
l3CEE_1DB4:
	ax = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bh = bh | bh
	SZ = cond(bh)
	O = false
	C = false
	branch Test(SG,S) l3CEE_1DB7_thunk_fn3CEE_1DC4
	goto l3CEE_1DB7_thunk_fn3CEE_1DB9
	// succ:  l3CEE_1DB7_thunk_fn3CEE_1DB9 l3CEE_1DB7_thunk_fn3CEE_1DC4
l3CEE_1DB4:
	ax = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bh = bh | bh
	SZ = cond(bh)
	O = false
	C = false
	branch Test(SG,S) l3CEE_1DC4
	goto l3CEE_1DB7_thunk_fn3CEE_1DB9
	// succ:  l3CEE_1DB7_thunk_fn3CEE_1DB9 l3CEE_1DB7_thunk_fn3CEE_1DC4
l3CEE_1DB7_thunk_fn3CEE_1DB9:
	call fn3CEE_1DB9 (retsize: 0;)
	return
	// succ:  fn3CEE_1DB4_exit
l3CEE_1DB7_thunk_fn3CEE_1DB9:
	call fn3CEE_1DB9 (retsize: 0;)
	return
	// succ:  fn3CEE_1DB4_exit
l3CEE_1DB7_thunk_fn3CEE_1DC4:
	call fn3CEE_1DC4 (retsize: 0;)
	return
	// succ:  fn3CEE_1DB4_exit
l3CEE_1DB7_thunk_fn3CEE_1DC4:
	call fn3CEE_1DC4 (retsize: 0;)
	return
	// succ:  fn3CEE_1DB4_exit
fn3CEE_1DB4_exit:


// fn3CEE_1DB9
// Return size: 0
define fn3CEE_1DB9
fn3CEE_1DB9_entry:
	sp = fp
	Top = 0<i8>
	goto l3CEE_1DB9_thunk_fn3CEE_1DC4
	// succ:  l3CEE_1DB9_thunk_fn3CEE_1DC4
l3CEE_1DB9:
	dx = dx << 1<16>
	SCZO = cond(dx)
	v8 = (bx & 1<16> << 0x10<8> - 1<8>) != 0<16>
	bx = __rcl<word16,byte>(bx, 1<8>, C)
	C = v8
	ah = ah | ah
	SZ = cond(ah)
	O = false
	C = false
	branch Test(NE,Z) l3CEE_1DCB
	goto l3CEE_1DBF_thunk_fn3CEE_1DC1
	// succ:  l3CEE_1DBF_thunk_fn3CEE_1DC1 l3CEE_1DCB
l3CEE_1DB9_thunk_fn3CEE_1DC4:
	call fn3CEE_1DC4 (retsize: 0;)
	return
	// succ:  fn3CEE_1DB9_exit
l3CEE_1DBF_thunk_fn3CEE_1DC1:
	call fn3CEE_1DC1 (retsize: 0;)
	return
	// succ:  fn3CEE_1DB9_exit
l3CEE_1DCB:
	// succ:  l3CEE_1DCB_thunk_fn3CEE_1CE8
l3CEE_1DCB_thunk_fn3CEE_1CE8:
	call fn3CEE_1CE8 (retsize: 0;)
	return
	// succ:  fn3CEE_1DB9_exit
fn3CEE_1DB9_exit:


// fn3CEE_1DC1
// Return size: 0
define fn3CEE_1DC1
fn3CEE_1DC1_entry:
	sp = fp
	Top = 0<i8>
	goto l3CEE_1DC1_thunk_fn3CEE_1D72
	// succ:  l3CEE_1DC1_thunk_fn3CEE_1D72
l3CEE_1DC1:
	// succ:  l3CEE_1DC1_thunk_fn3CEE_1D2D
l3CEE_1DC1_thunk_fn3CEE_1D2D:
	call fn3CEE_1D2D (retsize: 0;)
	return
	// succ:  fn3CEE_1DC1_exit
l3CEE_1DC1_thunk_fn3CEE_1D72:
	call fn3CEE_1D72 (retsize: 0;)
	return
	// succ:  fn3CEE_1DC1_exit
fn3CEE_1DC1_exit:


// fn3CEE_1DC4
// Return size: 0
define fn3CEE_1DC4
fn3CEE_1DC4_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_1DC4
l3CEE_1DC4:
	ah = ah + 1<8>
	SZO = cond(ah)
	SCZO = cond(ah - 0xFF<8>)
	branch Test(EQ,Z) l3CEE_1D78
	goto l3CEE_1DC9_thunk_fn3CEE_1DB9
	// succ:  l3CEE_1DC9_thunk_fn3CEE_1DB9 l3CEE_1DC9_thunk_fn3CEE_1D78
l3CEE_1DC9_thunk_fn3CEE_1D78:
	call fn3CEE_1D78 (retsize: 0;)
	return
	// succ:  fn3CEE_1DC4_exit
l3CEE_1DC9_thunk_fn3CEE_1DB9:
	call fn3CEE_1DB9 (retsize: 0;)
	return
	// succ:  fn3CEE_1DC4_exit
fn3CEE_1DC4_exit:


// fn3CEE_1DCE
// Return size: 0
define fn3CEE_1DCE
fn3CEE_1DCE_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_1DCE
l3CEE_1DCE:
	v4 = di
	di = si
	si = v4
	// succ:  l3CEE_1DCE_thunk_fn3CEE_1DD0
l3CEE_1DCE_thunk_fn3CEE_1DD0:
	call fn3CEE_1DD0 (retsize: 0;)
	return
	// succ:  fn3CEE_1DCE_exit
fn3CEE_1DCE_exit:


// fn3CEE_1DD0
// Return size: 0
define fn3CEE_1DD0
fn3CEE_1DD0_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_1DD0
l3CEE_1DD0:
	cx = Mem0[ds:di + 2<i16>:word16]
	cx = cx << 1<16>
	SCZO = cond(cx)
	v8 = (cl & 1<8> << 1<8>) != 0<8>
	cl = __rcr<byte,byte>(cl, 1<8>, C)
	C = v8
	ax = Mem0[ds:si + 2<i16>:word16]
	ax = ax << 1<16>
	SCZO = cond(ax)
	v13 = (al & 1<8> << 1<8>) != 0<8>
	al = __rcr<byte,byte>(al, 1<8>, C)
	C = v13
	ch = ch | ch
	SZ = cond(ch)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_1E3E
	// succ:  l3CEE_1DE2 l3CEE_1E3E
l3CEE_1DE2:
	ah = ah | ah
	SZ = cond(ah)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_1DE4_thunk_fn3CEE_1DC1
	goto l3CEE_1DE6
	// succ:  l3CEE_1DE6 l3CEE_1DE4_thunk_fn3CEE_1DC1
l3CEE_1DE4_thunk_fn3CEE_1DC1:
	call fn3CEE_1DC1 (retsize: 0;)
	return
	// succ:  fn3CEE_1DD0_exit
l3CEE_1DE6:
	al = al ^ cl
	SZ = cond(al)
	O = false
	C = false
	ah = ah - 0x81<8>
	SCZO = cond(ah)
	ch = ch - 0x7F<8>
	SCZO = cond(ch)
	ah = ah - ch
	SCZO = cond(ah)
	branch Test(NO,O) l3CEE_1DF5
	// succ:  l3CEE_1DF2 l3CEE_1DF5
l3CEE_1DF2:
	// succ:  l3CEE_1DF2_thunk_fn3CEE_1D70
l3CEE_1DF2_thunk_fn3CEE_1D70:
	call fn3CEE_1D70 (retsize: 0;)
	return
	// succ:  fn3CEE_1DD0_exit
l3CEE_1DF5:
	ah = ah + 0x80<8>
	SCZO = cond(ah)
	SCZO = cond(ah - 0xFF<8>)
	branch Test(NE,Z) l3CEE_1E00
	// succ:  l3CEE_1DFD l3CEE_1E00
l3CEE_1DFD:
	// succ:  l3CEE_1DFD_thunk_fn3CEE_1D78
l3CEE_1DFD_thunk_fn3CEE_1D78:
	call fn3CEE_1D78 (retsize: 0;)
	return
	// succ:  fn3CEE_1DD0_exit
l3CEE_1E00:
	bx = Mem0[ds:di + 1<i16>:word16]
	ch = Mem0[ds:di:byte]
	cl = cl ^ cl
	SZ = cond(cl)
	O = false
	C = false
	bh = bh | 0x80<8>
	SZ = cond(bh)
	O = false
	C = false
	SCZO = cond(Mem0[ds:0x386E<16>:byte] - 0<8>)
	branch Test(EQ,Z) l3CEE_1E19
	goto l3CEE_1E11
	// succ:  l3CEE_1E11 l3CEE_1E0F_thunk_fn3CEE_1E19
l3CEE_1E0F_thunk_fn3CEE_1E19:
	call fn3CEE_1E19 (retsize: 0;)
	return
	// succ:  fn3CEE_1DD0_exit
l3CEE_1E11:
	bx = bx >>u 1<16>
	SCZO = cond(bx)
	// succ:  l3CEE_1E11_thunk_fn3CEE_1E13
l3CEE_1E11_thunk_fn3CEE_1E13:
	call fn3CEE_1E13 (retsize: 0;)
	return
	// succ:  fn3CEE_1DD0_exit
l3CEE_1E3E:
	// succ:  l3CEE_1E3E_thunk_fn3CEE_154F
l3CEE_1E3E_thunk_fn3CEE_154F:
	call fn3CEE_154F (retsize: 0;)
	return
	// succ:  fn3CEE_1DD0_exit
fn3CEE_1DD0_exit:


// fn3CEE_1E13
// Return size: 0
define fn3CEE_1E13
fn3CEE_1E13_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_1E13
l3CEE_1E13:
	v4 = (cx & 1<16> << 1<8>) != 0<16>
	cx = __rcr<word16,byte>(cx, 1<8>, C)
	C = v4
	bh = bh + Mem0[ds:0x386E<16>:byte]
	SCZO = cond(bh)
	goto l3CEE_1E15_thunk_fn3CEE_1E19
	// succ:  l3CEE_1E15_thunk_fn3CEE_1E19
l3CEE_1E13:
	v11 = (cx & 1<16> << 1<8>) != 0<16>
	cx = __rcr<word16,byte>(cx, 1<8>, C)
	C = v11
	bh = bh + Mem0[ds:0x386E<16>:byte]
	SCZO = cond(bh)
	goto l3CEE_1E15_thunk_fn3CEE_1E19
	// succ:  l3CEE_1E15_thunk_fn3CEE_1E19
l3CEE_1E15_thunk_fn3CEE_1E19:
	call fn3CEE_1E19 (retsize: 0;)
	return
	// succ:  fn3CEE_1E13_exit
l3CEE_1E15_thunk_fn3CEE_1E19:
	call fn3CEE_1E19 (retsize: 0;)
	return
	// succ:  fn3CEE_1E13_exit
fn3CEE_1E13_exit:


// fn3CEE_1E19
// Return size: 0
define fn3CEE_1E19
fn3CEE_1E19_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_1E19
l3CEE_1E19:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	dx = Mem0[ds:si + 1<i16>:word16]
	ah = Mem0[ds:si:byte]
	al = al ^ al
	SZ = cond(al)
	O = false
	C = false
	dh = dh | 0x80<8>
	SZ = cond(dh)
	O = false
	C = false
	dx = dx >>u 1<16>
	SCZO = cond(dx)
	v17 = (ax & 1<16> << 1<8>) != 0<16>
	ax = __rcr<word16,byte>(ax, 1<8>, C)
	C = v17
	call fn3CEE_1E45 (retsize: 2;)
	bp = si
	call fn3CEE_1E41 (retsize: 2;)
	ax = ax | dx
	SZ = cond(ax)
	O = false
	C = false
	dx = si
	branch Test(EQ,Z) l3CEE_1E39
	// succ:  l3CEE_1E36 l3CEE_1E39
l3CEE_1E36:
	dl = dl | 1<8>
	SZ = cond(dl)
	O = false
	C = false
	// succ:  l3CEE_1E39
l3CEE_1E39:
	bx = bp
	// succ:  l3CEE_1E3B_thunk_fn3CEE_1DB4
l3CEE_1E3B_thunk_fn3CEE_1DB4:
	call fn3CEE_1DB4 (retsize: 0;)
	return
	// succ:  fn3CEE_1E19_exit
fn3CEE_1E19_exit:


// fn3CEE_1E41
// Return size: 2
define fn3CEE_1E41
fn3CEE_1E41_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_1E41
l3CEE_1E41:
	SCZO = cond(dx - bx)
	branch Test(UGE,C) l3CEE_1E62
	// succ:  l3CEE_1E43_thunk_fn3CEE_1E45 l3CEE_1E62
l3CEE_1E43_thunk_fn3CEE_1E45:
	call fn3CEE_1E45 (retsize: 0;)
	return
	// succ:  fn3CEE_1E41_exit
l3CEE_1E62:
	si = 0xFFFF<16>
	ax = ax - cx
	SCZO = cond(ax)
	dx = dx + ax
	SCZO = cond(dx)
	ax = cx
	branch Test(UGE,C) l3CEE_1E6B_thunk_fn3CEE_1E5A
	goto l3CEE_1E6D
	// succ:  l3CEE_1E6D l3CEE_1E6B_thunk_fn3CEE_1E5A
l3CEE_1E6B_thunk_fn3CEE_1E5A:
	call fn3CEE_1E5A (retsize: 0;)
	return
	// succ:  fn3CEE_1E41_exit
l3CEE_1E6D:
	return
	// succ:  fn3CEE_1E41_exit
fn3CEE_1E41_exit:


// fn3CEE_1E45
// Return size: 2
define fn3CEE_1E45
fn3CEE_1E45_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_1E45
l3CEE_1E45:
	v7 = dx_ax
	dx = CONVERT(v7 %u bx, word32, uint16)
	ax = CONVERT(v7 /u bx, word16, uint16)
	SCZO = cond(ax)
	v10 = si
	si = ax
	ax = v10
	ax = ax ^ ax
	SZ = cond(ax)
	O = false
	C = false
	branch cx == 0<16> l3CEE_1E61
	goto l3CEE_1E4C
	// succ:  l3CEE_1E4C l3CEE_1E4A_thunk_fn3CEE_1E5A
l3CEE_1E4A_thunk_fn3CEE_1E5A:
	call fn3CEE_1E5A (retsize: 0;)
	return
	// succ:  fn3CEE_1E45_exit
l3CEE_1E4C:
	di = dx
	ax = si
	dx_ax = cx *u32 ax
	SCZO = cond(dx_ax)
	C = ax != 0<16>
	ax = -ax
	SZO = cond(ax)
	di = di - dx - C
	SCZO = cond(di)
	dx = di
	branch Test(UGE,C) l3CEE_1E61
	// succ:  l3CEE_1E58_thunk_fn3CEE_1E5A l3CEE_1E58_thunk_fn3CEE_1E5A
l3CEE_1E58_thunk_fn3CEE_1E5A:
	call fn3CEE_1E5A (retsize: 0;)
	return
	// succ:  fn3CEE_1E45_exit
l3CEE_1E58_thunk_fn3CEE_1E5A:
	call fn3CEE_1E5A (retsize: 0;)
	return
	// succ:  fn3CEE_1E45_exit
fn3CEE_1E45_exit:


// fn3CEE_1E5A
// Return size: 0
define fn3CEE_1E5A
fn3CEE_1E5A_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_1E5A
l3CEE_1E5A:
	si = si - 1<16>
	SZO = cond(si)
	ax = ax + cx
	SCZO = cond(ax)
	dx = dx + bx + C
	SCZO = cond(dx)
	branch Test(UGE,C) l3CEE_1E5A
	// succ:  l3CEE_1E61 l3CEE_1E5A
l3CEE_1E61:
	return
	// succ:  fn3CEE_1E5A_exit
fn3CEE_1E5A_exit:


// fn3CEE_1EBE
// Return size: 0
define fn3CEE_1EBE
fn3CEE_1EBE_entry:
	sp = fp
	Top = 0<i8>
	goto l3CEE_1EBE
	// succ:  l3CEE_1EBE
l3CEE_1EAB:
	dx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	ax = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	Mem0[ds:0x3836<16>:word16] = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	// succ:  l3CEE_1EB2_thunk_fn3CEE_1CE8
l3CEE_1EB2_thunk_fn3CEE_1CE8:
	call fn3CEE_1CE8 (retsize: 0;)
	return
	// succ:  fn3CEE_1EBE_exit
l3CEE_1EBE:
	v6 = Mem0[ds:0x3836<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v6
	Mem0[ds:0x3836<16>:word16] = 0x3875<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	call fn3CEE_1CE8 (retsize: 2;)
	sp = sp + 2<16>
	ax = ax ^ ax
	SZ = cond(ax)
	O = false
	C = false
	Mem0[ds:0x3871<16>:word16] = ax
	Mem0[ds:0x3873<16>:word16] = ax
	goto l3CEE_1EAB
	// succ:  l3CEE_1EAB
fn3CEE_1EBE_exit:


// fn3CEE_1ED8
// Return size: 0
define fn3CEE_1ED8
fn3CEE_1ED8_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_1ED8
l3CEE_1ED8:
	v4 = di
	di = si
	si = v4
	// succ:  l3CEE_1ED8_thunk_fn3CEE_1EDA
l3CEE_1ED8_thunk_fn3CEE_1EDA:
	call fn3CEE_1EDA (retsize: 0;)
	return
	// succ:  fn3CEE_1ED8_exit
fn3CEE_1ED8_exit:


// fn3CEE_1EDA
// Return size: 0
define fn3CEE_1EDA
fn3CEE_1EDA_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_1EDA
l3CEE_1EDA:
	bp = Mem0[ds:di + 6<i16>:word16]
	bp = bp ^ 0x8000<16>
	SZ = cond(bp)
	O = false
	C = false
	// succ:  l3CEE_1EE1_thunk_fn3CEE_1F00
l3CEE_1EE1_thunk_fn3CEE_1F00:
	call fn3CEE_1F00 (retsize: 0;)
	return
	// succ:  fn3CEE_1EDA_exit
fn3CEE_1EDA_exit:


// fn3CEE_1EFD
// Return size: 2
define fn3CEE_1EFD
fn3CEE_1EFD_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_1EFD
l3CEE_1EFD:
	bp = Mem0[ds:di + 6<i16>:word16]
	// succ:  l3CEE_1EFD_thunk_fn3CEE_1F00
l3CEE_1EFD_thunk_fn3CEE_1F00:
	call fn3CEE_1F00 (retsize: 0;)
	return
	// succ:  fn3CEE_1EFD_exit
fn3CEE_1EFD_exit:


// fn3CEE_1F00
// Return size: 0
define fn3CEE_1F00
fn3CEE_1F00_entry:
	sp = fp
	Top = 0<i8>
	goto l3CEE_1F00
	// succ:  l3CEE_1F00
l3CEE_1EE3_in_fn3CEE_1F00:
	si = di
	di = Mem0[ds:0x3836<16>:word16]
	v19 = Mem0[ds:si:word16]
	Mem0[es:di:word16] = v19
	si = si + 2<i16>
	di = di + 2<i16>
	v21 = Mem0[ds:si:word16]
	Mem0[es:di:word16] = v21
	si = si + 2<i16>
	di = di + 2<i16>
	v22 = Mem0[ds:si:word16]
	Mem0[es:di:word16] = v22
	si = si + 2<i16>
	di = di + 2<i16>
	ax = Mem0[ds:si:word16]
	si = si + 2<i16>
	ah = ah & 0x7F<8>
	SZ = cond(ah)
	O = false
	C = false
	dh = dh & 0x80<8>
	SZ = cond(dh)
	O = false
	C = false
	ah = ah | dh
	SZ = cond(ah)
	O = false
	C = false
	Mem0[es:di:word16] = ax
	di = di + 2<i16>
	si = Mem0[ds:0x3836<16>:word16]
	di = si
	return
	// succ:  fn3CEE_1F00_exit
l3CEE_1F00:
	D = false
	ax = Mem0[ds:si + 6<i16>:word16]
	bp = bp << 1<16>
	SCZO = cond(bp)
	v10 = (dh & 1<8> << 1<8>) != 0<8>
	dh = __rcr<byte,byte>(dh, 1<8>, C)
	C = v10
	ax = ax << 1<16>
	SCZO = cond(ax)
	v13 = (dl & 1<8> << 1<8>) != 0<8>
	dl = __rcr<byte,byte>(dl, 1<8>, C)
	C = v13
	ax = ax & 0xFFE0<16>
	SZ = cond(ax)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_1EE3_in_fn3CEE_1F00
	goto l3CEE_1F0F_thunk_fn3CEE_1F11
	// succ:  l3CEE_1F0F_thunk_fn3CEE_1F11 l3CEE_1EE3_in_fn3CEE_1F00
l3CEE_1F00:
	D = false
	ax = Mem0[ds:si + 6<i16>:word16]
	bp = bp << 1<16>
	SCZO = cond(bp)
	v25 = (dh & 1<8> << 1<8>) != 0<8>
	dh = __rcr<byte,byte>(dh, 1<8>, C)
	C = v25
	ax = ax << 1<16>
	SCZO = cond(ax)
	v26 = (dl & 1<8> << 1<8>) != 0<8>
	dl = __rcr<byte,byte>(dl, 1<8>, C)
	C = v26
	ax = ax & 0xFFE0<16>
	SZ = cond(ax)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_1EE3
	goto l3CEE_1F0F_thunk_fn3CEE_1F11
	// succ:  l3CEE_1F0F_thunk_fn3CEE_1F11 l3CEE_1F0F_thunk_fn3CEE_1F11
l3CEE_1F0F_thunk_fn3CEE_1F11:
	call fn3CEE_1F11 (retsize: 0;)
	return
	// succ:  fn3CEE_1F00_exit
l3CEE_1F0F_thunk_fn3CEE_1F11:
	call fn3CEE_1F11 (retsize: 0;)
	return
	// succ:  fn3CEE_1F00_exit
l3CEE_1F0F_thunk_fn3CEE_1F11:
	call fn3CEE_1F11 (retsize: 0;)
	return
	// succ:  fn3CEE_1F00_exit
fn3CEE_1F00_exit:


// fn3CEE_1F11
// Return size: 0
define fn3CEE_1F11
fn3CEE_1F11_entry:
	sp = fp
	Top = 0<i8>
	goto l3CEE_1F11
	// succ:  l3CEE_1F11
l3CEE_1EE3:
	si = di
	di = Mem0[ds:0x3836<16>:word16]
	v59 = Mem0[ds:si:word16]
	Mem0[es:di:word16] = v59
	si = si + 2<i16>
	di = di + 2<i16>
	v61 = Mem0[ds:si:word16]
	Mem0[es:di:word16] = v61
	si = si + 2<i16>
	di = di + 2<i16>
	v62 = Mem0[ds:si:word16]
	Mem0[es:di:word16] = v62
	si = si + 2<i16>
	di = di + 2<i16>
	ax = Mem0[ds:si:word16]
	si = si + 2<i16>
	ah = ah & 0x7F<8>
	SZ = cond(ah)
	O = false
	C = false
	dh = dh & 0x80<8>
	SZ = cond(dh)
	O = false
	C = false
	ah = ah | dh
	SZ = cond(ah)
	O = false
	C = false
	Mem0[es:di:word16] = ax
	di = di + 2<i16>
	si = Mem0[ds:0x3836<16>:word16]
	di = si
	return
	// succ:  fn3CEE_1F11_exit
l3CEE_1F11:
	bp = bp & 0xFFE0<16>
	SZ = cond(bp)
	O = false
	C = false
	SCZO = cond(bp - ax)
	branch Test(UGT,CZ) l3CEE_1F22
	// succ:  l3CEE_1F19 l3CEE_1F22
l3CEE_1F19:
	v13 = di
	di = si
	si = v13
	v15 = bp
	bp = ax
	ax = v15
	v17 = dh
	dh = dl
	dl = v17
	ax = ax | ax
	SZ = cond(ax)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_1EE3
	// succ:  l3CEE_1F22 l3CEE_1EE3
l3CEE_1F22:
	ax = ax - bp
	SCZO = cond(ax)
	C = ax != 0<16>
	ax = -ax
	SZO = cond(ax)
	SCZO = cond(ax - 0x6A0<16>)
	branch Test(UGT,CZ) l3CEE_1EE3
	// succ:  l3CEE_1F2B l3CEE_1EE3
l3CEE_1F2B:
	dh = dh << 1<8>
	SCZO = cond(dh)
	v21 = (bp & 1<16> << 1<8>) != 0<16>
	bp = __rcr<word16,byte>(bp, 1<8>, C)
	C = v21
	dl = dl << 1<8>
	SCZO = cond(dl)
	v22 = (bp & 1<16> << 1<8>) != 0<16>
	bp = __rcr<word16,byte>(bp, 1<8>, C)
	C = v22
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	v24 = (ax & 1<16> << 0x10<8> - 1<8>) != 0<16>
	ax = __rol<word16,byte>(ax, 1<8>)
	C = v24
	v25 = (ax & 1<16> << 0x10<8> - 1<8>) != 0<16>
	ax = __rol<word16,byte>(ax, 1<8>)
	C = v25
	v26 = (ax & 1<16> << 0x10<8> - 1<8>) != 0<16>
	ax = __rol<word16,byte>(ax, 1<8>)
	C = v26
	v28 = al
	al = ah
	ah = v28
	di = ax
	al = Mem0[ds:si:byte]
	si = si + 1<i16>
	ah = al
	al = al ^ al
	SZ = cond(al)
	O = false
	C = false
	v32 = dx
	dx = ax
	ax = v32
	ax = Mem0[ds:si:word16]
	si = si + 2<i16>
	v34 = cx
	cx = ax
	ax = v34
	ax = Mem0[ds:si:word16]
	si = si + 2<i16>
	v36 = bx
	bx = ax
	ax = v36
	ax = Mem0[ds:si:word16]
	si = si + 2<i16>
	ah = ah & 0xF<8>
	SZ = cond(ah)
	O = false
	C = false
	ah = ah | 0x10<8>
	SZ = cond(ah)
	O = false
	C = false
	di = di | di
	SZ = cond(di)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_1FB6
	// succ:  l3CEE_1F53 l3CEE_1FB6
l3CEE_1F53:
	SCZO = cond(di - 0xE<16>)
	branch Test(LT,SO) l3CEE_1F70
	// succ:  l3CEE_1F58 l3CEE_1F70
l3CEE_1F58:
	dx = dx | dx
	SZ = cond(dx)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_1F5F
	// succ:  l3CEE_1F5C l3CEE_1F5F
l3CEE_1F5C:
	cl = cl | 1<8>
	SZ = cond(cl)
	O = false
	C = false
	// succ:  l3CEE_1F5F
l3CEE_1F5F:
	dx = cx
	cx = bx
	bx = ax
	ax = ax ^ ax
	SZ = cond(ax)
	O = false
	C = false
	di = di - 0x10<16>
	SCZO = cond(di)
	branch Test(UGT,CZ) l3CEE_1F53
	// succ:  l3CEE_1F6C l3CEE_1F53
l3CEE_1F6C:
	branch Test(EQ,Z) l3CEE_1FB6
	// succ:  l3CEE_1F6E l3CEE_1FB6
l3CEE_1F6E:
	branch Test(ULT,C) l3CEE_1F93
	// succ:  l3CEE_1F70 l3CEE_1F93
l3CEE_1F70:
	SCZO = cond(di - 6<16>)
	branch Test(LT,SO) l3CEE_1FA0
	// succ:  l3CEE_1F75 l3CEE_1FA0
l3CEE_1F75:
	dl = dl | dl
	SZ = cond(dl)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_1F7C
	// succ:  l3CEE_1F79 l3CEE_1F7C
l3CEE_1F79:
	dh = dh | 1<8>
	SZ = cond(dh)
	O = false
	C = false
	// succ:  l3CEE_1F7C
l3CEE_1F7C:
	dl = dh
	dh = cl
	cl = ch
	ch = bl
	bl = bh
	bh = al
	al = ah
	ah = ah ^ ah
	SZ = cond(ah)
	O = false
	C = false
	di = di - 8<16>
	SCZO = cond(di)
	branch Test(UGT,CZ) l3CEE_1FA0
	// succ:  l3CEE_1F91 l3CEE_1FA0
l3CEE_1F91:
	branch Test(EQ,Z) l3CEE_1FB6
	// succ:  l3CEE_1F93 l3CEE_1FB6
l3CEE_1F93:
	dx = dx << 1<16>
	SCZO = cond(dx)
	v42 = (cx & 1<16> << 0x10<8> - 1<8>) != 0<16>
	cx = __rcl<word16,byte>(cx, 1<8>, C)
	C = v42
	v43 = (bx & 1<16> << 0x10<8> - 1<8>) != 0<16>
	bx = __rcl<word16,byte>(bx, 1<8>, C)
	C = v43
	v44 = (ax & 1<16> << 0x10<8> - 1<8>) != 0<16>
	ax = __rcl<word16,byte>(ax, 1<8>, C)
	C = v44
	di = di + 1<16>
	SZO = cond(di)
	branch Test(NE,Z) l3CEE_1F93
	// succ:  l3CEE_1F9E l3CEE_1F93
l3CEE_1F9E:
	goto l3CEE_1FB6
	// succ:  l3CEE_1FB6
l3CEE_1FA0:
	v54 = di
	di = cx
	cx = v54
	SZP = cond(dl & 0x3F<8>)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_1FAA
	// succ:  l3CEE_1FA7 l3CEE_1FAA
l3CEE_1FA7:
	dl = dl | 0x20<8>
	SZ = cond(dl)
	O = false
	C = false
	// succ:  l3CEE_1FAA
l3CEE_1FAA:
	ax = ax >>u 1<16>
	SCZO = cond(ax)
	v55 = (bx & 1<16> << 1<8>) != 0<16>
	bx = __rcr<word16,byte>(bx, 1<8>, C)
	C = v55
	v56 = (di & 1<16> << 1<8>) != 0<16>
	di = __rcr<word16,byte>(di, 1<8>, C)
	C = v56
	v57 = (dx & 1<16> << 1<8>) != 0<16>
	dx = __rcr<word16,byte>(dx, 1<8>, C)
	C = v57
	cx = cx - 1<16>
	branch cx != 0<16> l3CEE_1FAA
	// succ:  l3CEE_1FB4 l3CEE_1FAA
l3CEE_1FB4:
	v58 = di
	di = cx
	cx = v58
	// succ:  l3CEE_1FB6
l3CEE_1FB6:
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	v45 = di
	di = ax
	ax = v45
	SZP = cond(dl & 0x3F<8>)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_1FC0
	// succ:  l3CEE_1FBD l3CEE_1FC0
l3CEE_1FBD:
	dl = dl | 0x20<8>
	SZ = cond(dl)
	O = false
	C = false
	// succ:  l3CEE_1FC0
l3CEE_1FC0:
	bp = bp << 1<16>
	SCZO = cond(bp)
	branch Test(OV,O) l3CEE_1FFF
	// succ:  l3CEE_1FC4 l3CEE_1FFF
l3CEE_1FC4:
	bp = bp << 1<16>
	SCZO = cond(bp)
	v47 = (al & 1<8> << 1<8>) != 0<8>
	al = __rcr<byte,byte>(al, 1<8>, C)
	C = v47
	dh = dh + Mem0[ds:si:byte]
	SCZO = cond(dh)
	cx = cx + Mem0[ds:si + 1<i16>:word16] + C
	SCZO = cond(cx)
	bx = bx + Mem0[ds:si + 3<i16>:word16] + C
	SCZO = cond(bx)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ah = SCZOP
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	si = Mem0[ds:si + 5<i16>:word16]
	si = si & 0xFFF<16>
	SZ = cond(si)
	O = false
	C = false
	si = si | 0x1000<16>
	SZ = cond(si)
	O = false
	C = false
	ax = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	SCZO = ah
	ax = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	di = di + si + C
	SCZO = cond(di)
	SZP = cond(di & 0x2000<16>)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_1FFC
	// succ:  l3CEE_1FE9 l3CEE_1FFC
l3CEE_1FE9:
	v49 = (di & 1<16> << 1<8>) != 0<16>
	di = __rcr<word16,byte>(di, 1<8>, C)
	C = v49
	v50 = (bx & 1<16> << 1<8>) != 0<16>
	bx = __rcr<word16,byte>(bx, 1<8>, C)
	C = v50
	v51 = (cx & 1<16> << 1<8>) != 0<16>
	cx = __rcr<word16,byte>(cx, 1<8>, C)
	C = v51
	v52 = (dx & 1<16> << 1<8>) != 0<16>
	dx = __rcr<word16,byte>(dx, 1<8>, C)
	C = v52
	bp = bp + 0x20<16>
	SCZO = cond(bp)
	SCZO = cond(bp - 0xFFE0<16>)
	branch Test(NE,Z) l3CEE_1FFC
	// succ:  l3CEE_1FF9 l3CEE_1FFC
l3CEE_1FF9:
	// succ:  l3CEE_1FF9_thunk_fn3CEE_1545
l3CEE_1FF9_thunk_fn3CEE_1545:
	call fn3CEE_1545 (retsize: 0;)
	return
	// succ:  fn3CEE_1F11_exit
l3CEE_1FFC:
	// succ:  l3CEE_1FFC_thunk_fn3CEE_2087
l3CEE_1FFC_thunk_fn3CEE_2087:
	call fn3CEE_2087 (retsize: 0;)
	return
	// succ:  fn3CEE_1F11_exit
l3CEE_1FFF:
	bp = bp << 1<16>
	SCZO = cond(bp)
	v53 = (al & 1<8> << 1<8>) != 0<8>
	al = __rcr<byte,byte>(al, 1<8>, C)
	C = v53
	al = ~al
	dh = dh - Mem0[ds:si:byte]
	SCZO = cond(dh)
	cx = cx - Mem0[ds:si + 1<i16>:word16] - C
	SCZO = cond(cx)
	bx = bx - Mem0[ds:si + 3<i16>:word16] - C
	SCZO = cond(bx)
	si = Mem0[ds:si + 5<i16>:word16]
	ah = SCZOP
	si = si & 0xFFF<16>
	SZ = cond(si)
	O = false
	C = false
	si = si | 0x1000<16>
	SZ = cond(si)
	O = false
	C = false
	SCZO = ah
	di = di - si - C
	SCZO = cond(di)
	branch Test(UGE,C) l3CEE_2031
	goto l3CEE_201E
	// succ:  l3CEE_201E l3CEE_201C_thunk_fn3CEE_2031
l3CEE_201C_thunk_fn3CEE_2031:
	call fn3CEE_2031 (retsize: 0;)
	return
	// succ:  fn3CEE_1F11_exit
l3CEE_201E:
	si = si ^ si
	SZ = cond(si)
	O = false
	C = false
	al = ~al
	di = ~di
	bx = ~bx
	cx = ~cx
	C = dx != 0<16>
	dx = -dx
	SZO = cond(dx)
	C = !C
	cx = cx + si + C
	SCZO = cond(cx)
	bx = bx + si + C
	SCZO = cond(bx)
	di = di + si + C
	SCZO = cond(di)
	// succ:  l3CEE_202F_thunk_fn3CEE_2031
l3CEE_202F_thunk_fn3CEE_2031:
	call fn3CEE_2031 (retsize: 0;)
	return
	// succ:  fn3CEE_1F11_exit
fn3CEE_1F11_exit:


// fn3CEE_2031
// Return size: 0
define fn3CEE_2031
fn3CEE_2031_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_2031
l3CEE_2031:
	D = false
	si = 4<16>
	// succ:  l3CEE_2035
l3CEE_2035:
	di = di | di
	SZ = cond(di)
	O = false
	C = false
	branch Test(NE,Z) l3CEE_2051
	// succ:  l3CEE_2039 l3CEE_2051
l3CEE_2039:
	SZP = cond(bh & 0xE0<8>)
	O = false
	C = false
	branch Test(NE,Z) l3CEE_2051
	// succ:  l3CEE_203E l3CEE_2051
l3CEE_203E:
	bp = bp - 0x200<16>
	SCZO = cond(bp)
	branch Test(ULE,CZ) l3CEE_2084
	// succ:  l3CEE_2044 l3CEE_2084
l3CEE_2044:
	si = si - 1<16>
	SZO = cond(si)
	branch Test(EQ,Z) l3CEE_2084
	// succ:  l3CEE_2047 l3CEE_2084
l3CEE_2047:
	di = bx
	bx = cx
	cx = dx
	dx = dx ^ dx
	SZ = cond(dx)
	O = false
	C = false
	goto l3CEE_2035
	// succ:  l3CEE_2035
l3CEE_2051:
	SZP = cond(di & 0x1FE0<16>)
	O = false
	C = false
	branch Test(NE,Z) l3CEE_206F
	// succ:  l3CEE_2057 l3CEE_206F
l3CEE_2057:
	bp = bp - 0x100<16>
	SCZO = cond(bp)
	branch Test(ULE,CZ) l3CEE_2084
	// succ:  l3CEE_205D l3CEE_2084
l3CEE_205D:
	v20 = di
	di = ax
	ax = v20
	ah = al
	al = bh
	bh = bl
	bl = ch
	ch = cl
	cl = dh
	dh = dl
	dl = 0<8>
	v29 = di
	di = ax
	ax = v29
	// succ:  l3CEE_206F
l3CEE_206F:
	SZP = cond(di & 0x1000<16>)
	O = false
	C = false
	branch Test(NE,Z) l3CEE_2087
	goto l3CEE_2075
	// succ:  l3CEE_2075 l3CEE_2073_thunk_fn3CEE_2087
l3CEE_2073_thunk_fn3CEE_2087:
	call fn3CEE_2087 (retsize: 0;)
	return
	// succ:  fn3CEE_2031_exit
l3CEE_2075:
	bp = bp - 0x20<16>
	SCZO = cond(bp)
	branch Test(EQ,Z) l3CEE_20EB
	goto l3CEE_207A
	// succ:  l3CEE_207A l3CEE_2078_thunk_fn3CEE_2087
l3CEE_2078_thunk_fn3CEE_2087:
	call fn3CEE_2087 (retsize: 0;)
	return
	// succ:  fn3CEE_2031_exit
l3CEE_207A:
	dx = dx << 1<16>
	SCZO = cond(dx)
	v30 = (cx & 1<16> << 0x10<8> - 1<8>) != 0<16>
	cx = __rcl<word16,byte>(cx, 1<8>, C)
	C = v30
	v31 = (bx & 1<16> << 0x10<8> - 1<8>) != 0<16>
	bx = __rcl<word16,byte>(bx, 1<8>, C)
	C = v31
	v32 = (di & 1<16> << 0x10<8> - 1<8>) != 0<16>
	di = __rcl<word16,byte>(di, 1<8>, C)
	C = v32
	goto l3CEE_206F
	// succ:  l3CEE_206F
l3CEE_2084:
	// succ:  l3CEE_2084_thunk_fn3CEE_20EB
l3CEE_2084_thunk_fn3CEE_20EB:
	call fn3CEE_20EB (retsize: 0;)
	return
	// succ:  fn3CEE_2031_exit
fn3CEE_2031_exit:


// fn3CEE_2087
// Return size: 2
define fn3CEE_2087
fn3CEE_2087_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_2087
l3CEE_2087:
	D = false
	SCZO = cond(Mem0[ds:0x3886<16>:byte] - 0<8>)
	branch Test(EQ,Z) l3CEE_2092
	// succ:  l3CEE_208F l3CEE_2092
l3CEE_208F:
	goto l3CEE_2417
	// succ:  l3CEE_2417
l3CEE_2092:
	SCZO = cond(dl - 0x80<8>)
	branch Test(UGT,CZ) l3CEE_209E
	// succ:  l3CEE_2097 l3CEE_209E
l3CEE_2097:
	branch Test(ULT,C) l3CEE_20B8
	// succ:  l3CEE_2099 l3CEE_20B8
l3CEE_2099:
	SZP = cond(dh & 1<8>)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_20B8
	// succ:  l3CEE_209E l3CEE_20B8
l3CEE_209E:
	dh = dh + 1<8>
	SCZO = cond(dh)
	cx = cx + 0<16> + C
	SCZO = cond(cx)
	bx = bx + 0<16> + C
	SCZO = cond(bx)
	di = di + 0<16> + C
	SCZO = cond(di)
	SZP = cond(di & 0x2000<16>)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_20B8
	// succ:  l3CEE_20B0 l3CEE_20B8
l3CEE_20B0:
	bp = bp + 0x20<16>
	SCZO = cond(bp)
	SCZO = cond(bp - 0xFFE0<16>)
	branch Test(EQ,Z) l3CEE_20E8
	goto l3CEE_20B8
	// succ:  l3CEE_20B8 l3CEE_20B6_thunk_fn3CEE_20E8
l3CEE_20B6_thunk_fn3CEE_20E8:
	call fn3CEE_20E8 (retsize: 0;)
	return
	// succ:  fn3CEE_2087_exit
l3CEE_20B8:
	si = di
	di = Mem0[ds:0x3836<16>:word16]
	v24 = si
	si = bx
	bx = v24
	al = al & 0x80<8>
	SZ = cond(al)
	O = false
	C = false
	bh = bh & 0xF<8>
	SZ = cond(bh)
	O = false
	C = false
	bp = bp >>u 1<16>
	SCZO = cond(bp)
	branch Test(EQ,Z) l3CEE_20EB
	goto l3CEE_20C9
	// succ:  l3CEE_20C9 l3CEE_20C7_thunk_fn3CEE_20EB
l3CEE_20C7_thunk_fn3CEE_20EB:
	call fn3CEE_20EB (retsize: 0;)
	return
	// succ:  fn3CEE_2087_exit
l3CEE_20C9:
	v27 = al
	al = ah
	ah = v27
	al = al ^ al
	SZ = cond(al)
	O = false
	C = false
	ax = ax | bp
	SZ = cond(ax)
	O = false
	C = false
	al = al | bh
	SZ = cond(al)
	O = false
	C = false
	Mem0[ds:di + 6<i16>:word16] = ax
	Mem0[ds:di + 5<i16>:byte] = bl
	al = dh
	Mem0[es:di:byte] = al
	di = di + 1<i16>
	ax = cx
	Mem0[es:di:word16] = ax
	di = di + 2<i16>
	ax = si
	Mem0[es:di:word16] = ax
	di = di + 2<i16>
	di = di - 5<16>
	SCZO = cond(di)
	si = di
	return
	// succ:  fn3CEE_2087_exit
l3CEE_2417:
	Mem0[ds:0x3886<16>:byte] = 0<8>
	si = Mem0[ds:0x3887<16>:word16]
	si = si | si
	SZ = cond(si)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_242C
	// succ:  l3CEE_2424 l3CEE_242C
l3CEE_2424:
	si = si - 0x4C0<16>
	SCZO = cond(si)
	SCZO = cond(si - bp)
	branch Test(UGT,CZ) l3CEE_247C
	goto l3CEE_242C
	// succ:  l3CEE_242C l3CEE_242A_thunk_fn3CEE_20EB
l3CEE_242A_thunk_fn3CEE_20EB:
	call fn3CEE_20EB (retsize: 0;)
	return
	// succ:  fn3CEE_2087_exit
l3CEE_242C:
	bp = bp | bp
	SZ = cond(bp)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_247C
	goto l3CEE_2430
	// succ:  l3CEE_2430 l3CEE_242E_thunk_fn3CEE_20EB
l3CEE_242E_thunk_fn3CEE_20EB:
	call fn3CEE_20EB (retsize: 0;)
	return
	// succ:  fn3CEE_2087_exit
l3CEE_2430:
	v14 = Mem0[ds:0x3836<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v14
	Mem0[ds:0x3836<16>:word16] = 0x3889<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = cx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	bx = bx ^ bx
	SZ = cond(bx)
	O = false
	C = false
	cx = cx ^ cx
	SZ = cond(cx)
	O = false
	C = false
	dx = dx ^ dx
	SZ = cond(dx)
	O = false
	C = false
	call fn3CEE_2087 (retsize: 2;)
	sp = sp + 2<16>
	di = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	dx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	cx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	ax = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	Mem0[ds:0x3836<16>:word16] = 0x3891<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = cx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	di = di ^ di
	SZ = cond(di)
	O = false
	C = false
	call fn3CEE_2031 (retsize: 2;)
	sp = sp + 2<16>
	// succ:  l3CEE_245D_thunk_fn3CEE_20EB
l3CEE_245D_thunk_fn3CEE_20EB:
	call fn3CEE_20EB (retsize: 0;)
	return
	// succ:  fn3CEE_2087_exit
fn3CEE_2087_exit:


// fn3CEE_20E6
// Return size: 0
define fn3CEE_20E6
fn3CEE_20E6_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_20E6
l3CEE_20E6:
	branch Test(NS,S) l3CEE_20E6_thunk_fn3CEE_20EB
	// succ:  l3CEE_20E6_thunk_fn3CEE_20E8 l3CEE_20E6_thunk_fn3CEE_20EB
l3CEE_20E6_thunk_fn3CEE_20E8:
	call fn3CEE_20E8 (retsize: 0;)
	return
	// succ:  fn3CEE_20E6_exit
l3CEE_20E6_thunk_fn3CEE_20EB:
	call fn3CEE_20EB (retsize: 0;)
	return
	// succ:  fn3CEE_20E6_exit
fn3CEE_20E6_exit:


// fn3CEE_20E8
// Return size: 0
define fn3CEE_20E8
fn3CEE_20E8_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_20E8
l3CEE_20E8:
	// succ:  l3CEE_20E8_thunk_fn3CEE_1545
l3CEE_20E8_thunk_fn3CEE_1545:
	call fn3CEE_1545 (retsize: 0;)
	return
	// succ:  fn3CEE_20E8_exit
fn3CEE_20E8_exit:


// fn3CEE_20EB
// Return size: 2
define fn3CEE_20EB
fn3CEE_20EB_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_20EB
l3CEE_20EB:
	D = false
	SCZO = cond(Mem0[ds:0x3886<16>:byte] - 0<8>)
	branch Test(EQ,Z) l3CEE_20F6
	// succ:  l3CEE_20F3 l3CEE_20F6
l3CEE_20F3:
	goto l3CEE_246D
	// succ:  l3CEE_246D
l3CEE_20F6:
	ax = ax ^ ax
	SZ = cond(ax)
	O = false
	C = false
	di = Mem0[ds:0x3836<16>:word16]
	si = di
	Mem0[es:di:word16] = ax
	di = di + 2<i16>
	Mem0[es:di:word16] = ax
	di = di + 2<i16>
	Mem0[es:di:word16] = ax
	di = di + 2<i16>
	Mem0[es:di:word16] = ax
	di = di + 2<i16>
	di = si
	return
	// succ:  fn3CEE_20EB_exit
l3CEE_2460:
	di = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	dx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	cx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	ax = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	Mem0[ds:0x3836<16>:word16] = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	// succ:  l3CEE_246A_thunk_fn3CEE_2087
l3CEE_246A_thunk_fn3CEE_2087:
	call fn3CEE_2087 (retsize: 0;)
	return
	// succ:  fn3CEE_20EB_exit
l3CEE_246D:
	ax = ax ^ ax
	SZ = cond(ax)
	O = false
	C = false
	cx = cx ^ cx
	SZ = cond(cx)
	O = false
	C = false
	dx = dx ^ dx
	SZ = cond(dx)
	O = false
	C = false
	bx = bx ^ bx
	SZ = cond(bx)
	O = false
	C = false
	bp = bp ^ bp
	SZ = cond(bp)
	O = false
	C = false
	di = di ^ di
	SZ = cond(di)
	O = false
	C = false
	Mem0[ds:0x3886<16>:byte] = al
	// succ:  l3CEE_247C
l3CEE_247C:
	v19 = Mem0[ds:0x3836<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v19
	Mem0[ds:0x3836<16>:word16] = 0x3891<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = cx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	call fn3CEE_2087 (retsize: 2;)
	sp = sp + 2<16>
	di = 0x3889<16>
	ax = ax ^ ax
	SZ = cond(ax)
	O = false
	C = false
	Mem0[es:di:word16] = ax
	di = di + 2<i16>
	Mem0[es:di:word16] = ax
	di = di + 2<i16>
	Mem0[es:di:word16] = ax
	di = di + 2<i16>
	Mem0[es:di:word16] = ax
	di = di + 2<i16>
	goto l3CEE_2460
	// succ:  l3CEE_2460
fn3CEE_20EB_exit:


// fn3CEE_2105
// Return size: 2
define fn3CEE_2105
fn3CEE_2105_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_2105
l3CEE_2105:
	D = false
	ax = Mem0[ds:si + 6<i16>:word16]
	dx = ax
	ax = ax & 0x7FF0<16>
	SZ = cond(ax)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_210E_thunk_fn3CEE_20EB
	goto l3CEE_2110
	// succ:  l3CEE_2110 l3CEE_210E_thunk_fn3CEE_20EB
l3CEE_210E_thunk_fn3CEE_20EB:
	call fn3CEE_20EB (retsize: 0;)
	return
	// succ:  fn3CEE_2105_exit
l3CEE_2110:
	cx = Mem0[ds:di + 6<i16>:word16]
	dx = dx ^ cx
	SZ = cond(dx)
	O = false
	C = false
	cx = cx & 0x7FF0<16>
	SZ = cond(cx)
	O = false
	C = false
	// succ:  l3CEE_2115_thunk_fn3CEE_2119
l3CEE_2115_thunk_fn3CEE_2119:
	call fn3CEE_2119 (retsize: 0;)
	return
	// succ:  fn3CEE_2105_exit
fn3CEE_2105_exit:


// fn3CEE_2119
// Return size: 2
define fn3CEE_2119
fn3CEE_2119_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_2119
l3CEE_2119:
	branch Test(EQ,Z) l3CEE_2119_thunk_fn3CEE_20EB
	goto l3CEE_2119_thunk_fn3CEE_211B
	// succ:  l3CEE_2119_thunk_fn3CEE_211B l3CEE_2119_thunk_fn3CEE_20EB
l3CEE_2119:
	branch Test(EQ,Z) l3CEE_2119_thunk_fn3CEE_20EB
	goto l3CEE_2119_thunk_fn3CEE_211B
	// succ:  l3CEE_2119_thunk_fn3CEE_211B l3CEE_2119_thunk_fn3CEE_20EB
l3CEE_2119_thunk_fn3CEE_20EB:
	call fn3CEE_20EB (retsize: 0;)
	return
	// succ:  fn3CEE_2119_exit
l3CEE_2119_thunk_fn3CEE_20EB:
	call fn3CEE_20EB (retsize: 0;)
	return
	// succ:  fn3CEE_2119_exit
l3CEE_2119_thunk_fn3CEE_211B:
	call fn3CEE_211B (retsize: 0;)
	return
	// succ:  fn3CEE_2119_exit
l3CEE_2119_thunk_fn3CEE_211B:
	call fn3CEE_211B (retsize: 0;)
	return
	// succ:  fn3CEE_2119_exit
fn3CEE_2119_exit:


// fn3CEE_211B
// Return size: 0
define fn3CEE_211B
fn3CEE_211B_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_211B
l3CEE_211B:
	ax = ax << 1<16>
	SCZO = cond(ax)
	cx = cx << 1<16>
	SCZO = cond(cx)
	ax = ax - 0x8000<16>
	SCZO = cond(ax)
	cx = cx - 0x7FE0<16>
	SCZO = cond(cx)
	ax = ax + cx
	SCZO = cond(ax)
	// succ:  l3CEE_2126_thunk_fn3CEE_2128
l3CEE_2126_thunk_fn3CEE_2128:
	call fn3CEE_2128 (retsize: 0;)
	return
	// succ:  fn3CEE_211B_exit
fn3CEE_211B_exit:


// fn3CEE_2128
// Return size: 0
define fn3CEE_2128
fn3CEE_2128_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_2128
l3CEE_2128:
	branch Test(OV,O) l3CEE_2128_thunk_fn3CEE_20E6
	goto l3CEE_2128_thunk_fn3CEE_212A
	// succ:  l3CEE_2128_thunk_fn3CEE_212A l3CEE_2128_thunk_fn3CEE_20E6
l3CEE_2128:
	branch Test(OV,O) l3CEE_20E6
	goto l3CEE_2128_thunk_fn3CEE_212A
	// succ:  l3CEE_2128_thunk_fn3CEE_212A l3CEE_2128_thunk_fn3CEE_20E6
l3CEE_2128_thunk_fn3CEE_20E6:
	call fn3CEE_20E6 (retsize: 0;)
	return
	// succ:  fn3CEE_2128_exit
l3CEE_2128_thunk_fn3CEE_20E6:
	call fn3CEE_20E6 (retsize: 0;)
	return
	// succ:  fn3CEE_2128_exit
l3CEE_2128_thunk_fn3CEE_212A:
	call fn3CEE_212A (retsize: 0;)
	return
	// succ:  fn3CEE_2128_exit
l3CEE_2128_thunk_fn3CEE_212A:
	call fn3CEE_212A (retsize: 0;)
	return
	// succ:  fn3CEE_2128_exit
fn3CEE_2128_exit:


// fn3CEE_212A
// Return size: 0
define fn3CEE_212A
fn3CEE_212A_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_212A
l3CEE_212A:
	ax = ax + 0x8000<16>
	SCZO = cond(ax)
	SCZO = cond(ax - 0xFFE0<16>)
	// succ:  l3CEE_212D_thunk_fn3CEE_2130
l3CEE_212D_thunk_fn3CEE_2130:
	call fn3CEE_2130 (retsize: 0;)
	return
	// succ:  fn3CEE_212A_exit
fn3CEE_212A_exit:


// fn3CEE_2130
// Return size: 0
define fn3CEE_2130
fn3CEE_2130_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_2130
l3CEE_2130:
	branch Test(EQ,Z) l3CEE_2130_thunk_fn3CEE_20E8
	goto l3CEE_2130_thunk_fn3CEE_2132
	// succ:  l3CEE_2130_thunk_fn3CEE_2132 l3CEE_2130_thunk_fn3CEE_20E8
l3CEE_2130:
	branch Test(EQ,Z) l3CEE_2130_thunk_fn3CEE_20E8
	goto l3CEE_2130_thunk_fn3CEE_2132
	// succ:  l3CEE_2130_thunk_fn3CEE_2132 l3CEE_2130_thunk_fn3CEE_20E8
l3CEE_2130_thunk_fn3CEE_20E8:
	call fn3CEE_20E8 (retsize: 0;)
	return
	// succ:  fn3CEE_2130_exit
l3CEE_2130_thunk_fn3CEE_20E8:
	call fn3CEE_20E8 (retsize: 0;)
	return
	// succ:  fn3CEE_2130_exit
l3CEE_2130_thunk_fn3CEE_2132:
	call fn3CEE_2132 (retsize: 0;)
	return
	// succ:  fn3CEE_2130_exit
l3CEE_2130_thunk_fn3CEE_2132:
	call fn3CEE_2132 (retsize: 0;)
	return
	// succ:  fn3CEE_2130_exit
fn3CEE_2130_exit:


// fn3CEE_2132
// Return size: 0
define fn3CEE_2132
fn3CEE_2132_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_2132
l3CEE_2132:
	dh = dh << 1<8>
	SCZO = cond(dh)
	v8 = (ax & 1<16> << 1<8>) != 0<16>
	ax = __rcr<word16,byte>(ax, 1<8>, C)
	C = v8
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn3CEE_22BB (retsize: 2;)
	branch Test(EQ,Z) l3CEE_213F
	goto l3CEE_213C
	// succ:  l3CEE_213C l3CEE_213A_thunk_fn3CEE_213F
l3CEE_213A_thunk_fn3CEE_213F:
	call fn3CEE_213F (retsize: 0;)
	return
	// succ:  fn3CEE_2132_exit
l3CEE_213C:
	dl = dl | 1<8>
	SZ = cond(dl)
	O = false
	C = false
	// succ:  l3CEE_213C_thunk_fn3CEE_213F
l3CEE_213C_thunk_fn3CEE_213F:
	call fn3CEE_213F (retsize: 0;)
	return
	// succ:  fn3CEE_2132_exit
fn3CEE_2132_exit:


// fn3CEE_213F
// Return size: 0
define fn3CEE_213F
fn3CEE_213F_entry:
	sp = fp
	Top = 0<i8>
	goto l3CEE_213F_thunk_fn3CEE_2132
	// succ:  l3CEE_213F_thunk_fn3CEE_2132
l3CEE_213F:
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bp = bp << 1<16>
	SCZO = cond(bp)
	v9 = (al & 1<8> << 1<8>) != 0<8>
	al = __rcr<byte,byte>(al, 1<8>, C)
	C = v9
	SZP = cond(di & 0x1000<16>)
	O = false
	C = false
	branch Test(NE,Z) l3CEE_2158
	goto l3CEE_214A
	// succ:  l3CEE_214A l3CEE_2158
l3CEE_213F_thunk_fn3CEE_2132:
	call fn3CEE_2132 (retsize: 0;)
	return
	// succ:  fn3CEE_213F_exit
l3CEE_214A:
	dx = dx << 1<16>
	SCZO = cond(dx)
	v17 = (cx & 1<16> << 0x10<8> - 1<8>) != 0<16>
	cx = __rcl<word16,byte>(cx, 1<8>, C)
	C = v17
	v19 = (bx & 1<16> << 0x10<8> - 1<8>) != 0<16>
	bx = __rcl<word16,byte>(bx, 1<8>, C)
	C = v19
	v20 = (di & 1<16> << 0x10<8> - 1<8>) != 0<16>
	di = __rcl<word16,byte>(di, 1<8>, C)
	C = v20
	bp = bp | bp
	SZ = cond(bp)
	O = false
	C = false
	branch Test(NE,Z) l3CEE_2160
	// succ:  l3CEE_2156 l3CEE_2160
l3CEE_2156:
	// succ:  l3CEE_2156_thunk_fn3CEE_20EB
l3CEE_2156_thunk_fn3CEE_20EB:
	call fn3CEE_20EB (retsize: 0;)
	return
	// succ:  fn3CEE_213F_exit
l3CEE_2158:
	bp = bp + 0x20<16>
	SCZO = cond(bp)
	SCZO = cond(bp - 0xFFE0<16>)
	branch Test(EQ,Z) l3CEE_215E_thunk_fn3CEE_20E8
	goto l3CEE_2160
	// succ:  l3CEE_2160 l3CEE_215E_thunk_fn3CEE_20E8
l3CEE_215E_thunk_fn3CEE_20E8:
	call fn3CEE_20E8 (retsize: 0;)
	return
	// succ:  fn3CEE_213F_exit
l3CEE_2160:
	// succ:  l3CEE_2160_thunk_fn3CEE_2087
l3CEE_2160_thunk_fn3CEE_2087:
	call fn3CEE_2087 (retsize: 0;)
	return
	// succ:  fn3CEE_213F_exit
fn3CEE_213F_exit:


// fn3CEE_2166
// Return size: 0
define fn3CEE_2166
fn3CEE_2166_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_2166
l3CEE_2166:
	v4 = di
	di = si
	si = v4
	// succ:  l3CEE_2166_thunk_fn3CEE_2168
l3CEE_2166_thunk_fn3CEE_2168:
	call fn3CEE_2168 (retsize: 0;)
	return
	// succ:  fn3CEE_2166_exit
fn3CEE_2166_exit:


// fn3CEE_2168
// Return size: 0
define fn3CEE_2168
fn3CEE_2168_entry:
	sp = fp
	Top = 0<i8>
	goto l3CEE_2168
	// succ:  l3CEE_2168
l3CEE_2163:
	// succ:  l3CEE_2163_thunk_fn3CEE_154F
l3CEE_2163_thunk_fn3CEE_154F:
	call fn3CEE_154F (retsize: 0;)
	return
	// succ:  fn3CEE_2168_exit
l3CEE_2168:
	D = false
	cx = Mem0[ds:di + 6<i16>:word16]
	dx = cx
	cx = cx & 0x7FF0<16>
	SZ = cond(cx)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_2163
	// succ:  l3CEE_2174 l3CEE_2163
l3CEE_2174:
	ax = Mem0[ds:si + 6<i16>:word16]
	dx = dx ^ ax
	SZ = cond(dx)
	O = false
	C = false
	ax = ax & 0x7FF0<16>
	SZ = cond(ax)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_217C_thunk_fn3CEE_2119
	goto l3CEE_217E
	// succ:  l3CEE_217E l3CEE_217C_thunk_fn3CEE_2119
l3CEE_217C_thunk_fn3CEE_2119:
	call fn3CEE_2119 (retsize: 0;)
	return
	// succ:  fn3CEE_2168_exit
l3CEE_217E:
	ax = ax << 1<16>
	SCZO = cond(ax)
	cx = cx << 1<16>
	SCZO = cond(cx)
	ax = ax - 0x8020<16>
	SCZO = cond(ax)
	cx = cx - 0x7FE0<16>
	SCZO = cond(cx)
	ax = ax - cx
	SCZO = cond(ax)
	branch Test(OV,O) l3CEE_218B_thunk_fn3CEE_2128
	goto l3CEE_218D
	// succ:  l3CEE_218D l3CEE_218B_thunk_fn3CEE_2128
l3CEE_218B_thunk_fn3CEE_2128:
	call fn3CEE_2128 (retsize: 0;)
	return
	// succ:  fn3CEE_2168_exit
l3CEE_218D:
	ax = ax + 0x8000<16>
	SCZO = cond(ax)
	SCZO = cond(ax - 0xFFE0<16>)
	branch Test(EQ,Z) l3CEE_2193_thunk_fn3CEE_2130
	goto l3CEE_2195
	// succ:  l3CEE_2195 l3CEE_2193_thunk_fn3CEE_2130
l3CEE_2193_thunk_fn3CEE_2130:
	call fn3CEE_2130 (retsize: 0;)
	return
	// succ:  fn3CEE_2168_exit
l3CEE_2195:
	dh = dh << 1<8>
	SCZO = cond(dh)
	v17 = (ax & 1<16> << 1<8>) != 0<16>
	ax = __rcr<word16,byte>(ax, 1<8>, C)
	C = v17
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:si:byte]
	si = si + 1<i16>
	ch = al
	cl = cl ^ cl
	SZ = cond(cl)
	O = false
	C = false
	ax = Mem0[ds:si:word16]
	si = si + 2<i16>
	v22 = bx
	bx = ax
	ax = v22
	ax = Mem0[ds:si:word16]
	si = si + 2<i16>
	v24 = dx
	dx = ax
	ax = v24
	ax = Mem0[ds:si:word16]
	si = si + 2<i16>
	ah = ah & 0xF<8>
	SZ = cond(ah)
	O = false
	C = false
	ah = ah | 0x10<8>
	SZ = cond(ah)
	O = false
	C = false
	v26 = dx
	dx = ax
	ax = v26
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	si = di
	si = si + 5<16>
	SCZO = cond(si)
	di = 0x3884<16>
	D = true
	ax = Mem0[ds:si:word16]
	si = si - 2<i16>
	ah = ah & 0xF<8>
	SZ = cond(ah)
	O = false
	C = false
	ah = ah | 0x10<8>
	SZ = cond(ah)
	O = false
	C = false
	Mem0[es:di:word16] = ax
	di = di - 2<i16>
	v28 = Mem0[ds:si:word16]
	Mem0[es:di:word16] = v28
	si = si - 2<i16>
	di = di - 2<i16>
	v29 = Mem0[ds:si:word16]
	Mem0[es:di:word16] = v29
	si = si - 2<i16>
	di = di - 2<i16>
	si = si + 1<16>
	SZO = cond(si)
	di = di + 1<16>
	SZO = cond(di)
	v31 = Mem0[ds:si:byte]
	Mem0[es:di:byte] = v31
	si = si - 1<i16>
	di = di - 1<i16>
	D = false
	Mem0[ds:di:byte] = 0<8>
	SCZO = cond(Mem0[ds:0x3886<16>:byte] - 0<8>)
	branch Test(EQ,Z) l3CEE_21EC
	// succ:  l3CEE_21CD l3CEE_21EC
l3CEE_21CD:
	D = true
	di = 0x3884<16>
	si = di
	ax = Mem0[ds:si:word16]
	si = si - 2<i16>
	bp = ax
	ax = ax >>u 1<16>
	SCZO = cond(ax)
	ah = ah + Mem0[ds:0x3886<16>:byte]
	SCZO = cond(ah)
	Mem0[es:di:word16] = ax
	di = di - 2<i16>
	bp = bp >>u 1<16>
	SCZO = cond(bp)
	ax = Mem0[ds:si:word16]
	si = si - 2<i16>
	v33 = (ax & 1<16> << 1<8>) != 0<16>
	ax = __rcr<word16,byte>(ax, 1<8>, C)
	C = v33
	Mem0[es:di:word16] = ax
	di = di - 2<i16>
	ax = Mem0[ds:si:word16]
	si = si - 2<i16>
	v34 = (ax & 1<16> << 1<8>) != 0<16>
	ax = __rcr<word16,byte>(ax, 1<8>, C)
	C = v34
	Mem0[es:di:word16] = ax
	di = di - 2<i16>
	ax = Mem0[ds:si:word16]
	si = si - 2<i16>
	v35 = (ax & 1<16> << 1<8>) != 0<16>
	ax = __rcr<word16,byte>(ax, 1<8>, C)
	C = v35
	Mem0[es:di:word16] = ax
	di = di - 2<i16>
	D = false
	// succ:  l3CEE_21EC
l3CEE_21EC:
	ax = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	dx = dx >>u 1<16>
	SCZO = cond(dx)
	v36 = (ax & 1<16> << 1<8>) != 0<16>
	ax = __rcr<word16,byte>(ax, 1<8>, C)
	C = v36
	v37 = (bx & 1<16> << 1<8>) != 0<16>
	bx = __rcr<word16,byte>(bx, 1<8>, C)
	C = v37
	v38 = (cx & 1<16> << 1<8>) != 0<16>
	cx = __rcr<word16,byte>(cx, 1<8>, C)
	C = v38
	call fn3CEE_2237 (retsize: 2;)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	call fn3CEE_2237 (retsize: 2;)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	call fn3CEE_2237 (retsize: 2;)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	call fn3CEE_2237 (retsize: 2;)
	ax = ax | bx
	SZ = cond(ax)
	O = false
	C = false
	ax = ax | cx
	SZ = cond(ax)
	O = false
	C = false
	ax = ax | dx
	SZ = cond(ax)
	O = false
	C = false
	dx = di
	cx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	di = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	branch Test(EQ,Z) l3CEE_2214
	// succ:  l3CEE_2211 l3CEE_2214
l3CEE_2211:
	dl = dl | 1<8>
	SZ = cond(dl)
	O = false
	C = false
	// succ:  l3CEE_2214
l3CEE_2214:
	SZP = cond(dl & 7<8>)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_221C
	// succ:  l3CEE_2219 l3CEE_221C
l3CEE_2219:
	dl = dl | 8<8>
	SZ = cond(dl)
	O = false
	C = false
	// succ:  l3CEE_221C
l3CEE_221C:
	di = di >>u 1<16>
	SCZO = cond(di)
	v41 = (bx & 1<16> << 1<8>) != 0<16>
	bx = __rcr<word16,byte>(bx, 1<8>, C)
	C = v41
	v42 = (cx & 1<16> << 1<8>) != 0<16>
	cx = __rcr<word16,byte>(cx, 1<8>, C)
	C = v42
	v43 = (dx & 1<16> << 1<8>) != 0<16>
	dx = __rcr<word16,byte>(dx, 1<8>, C)
	C = v43
	di = di >>u 1<16>
	SCZO = cond(di)
	v44 = (bx & 1<16> << 1<8>) != 0<16>
	bx = __rcr<word16,byte>(bx, 1<8>, C)
	C = v44
	v45 = (cx & 1<16> << 1<8>) != 0<16>
	cx = __rcr<word16,byte>(cx, 1<8>, C)
	C = v45
	v46 = (dx & 1<16> << 1<8>) != 0<16>
	dx = __rcr<word16,byte>(dx, 1<8>, C)
	C = v46
	di = di >>u 1<16>
	SCZO = cond(di)
	v47 = (bx & 1<16> << 1<8>) != 0<16>
	bx = __rcr<word16,byte>(bx, 1<8>, C)
	C = v47
	v48 = (cx & 1<16> << 1<8>) != 0<16>
	cx = __rcr<word16,byte>(cx, 1<8>, C)
	C = v48
	v49 = (dx & 1<16> << 1<8>) != 0<16>
	dx = __rcr<word16,byte>(dx, 1<8>, C)
	C = v49
	// succ:  l3CEE_2234_thunk_fn3CEE_213F
l3CEE_2234_thunk_fn3CEE_213F:
	call fn3CEE_213F (retsize: 0;)
	return
	// succ:  fn3CEE_2168_exit
fn3CEE_2168_exit:


// fn3CEE_2237
// Return size: 2
define fn3CEE_2237
fn3CEE_2237_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_2237
l3CEE_2237:
	si = Mem0[ds:0x3884<16>:word16]
	di = di ^ di
	SZ = cond(di)
	O = false
	C = false
	SCZO = cond(dx - si)
	branch Test(UGE,C) l3CEE_229D
	// succ:  l3CEE_2241 l3CEE_229D
l3CEE_2241:
	dx = dx | dx
	SZ = cond(dx)
	O = false
	C = false
	branch Test(NE,Z) l3CEE_2249
	// succ:  l3CEE_2245 l3CEE_2249
l3CEE_2245:
	SCZO = cond(si - ax)
	branch Test(UGT,CZ) l3CEE_2284
	// succ:  l3CEE_2249 l3CEE_2284
l3CEE_2249:
	v16 = dx_ax
	dx = CONVERT(v16 %u si, word32, uint16)
	ax = CONVERT(v16 /u si, word16, uint16)
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	v18 = di
	di = ax
	ax = v18
	bp = bp ^ bp
	SZ = cond(bp)
	O = false
	C = false
	si = bp
	ax = Mem0[ds:0x387E<16>:word16]
	ax = ax | ax
	SZ = cond(ax)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_225C
	// succ:  l3CEE_2258 l3CEE_225C
l3CEE_2258:
	dx_ax = di *u32 ax
	SCZO = cond(dx_ax)
	si = dx
	// succ:  l3CEE_225C
l3CEE_225C:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ds:0x3880<16>:word16]
	ax = ax | ax
	SZ = cond(ax)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_226A
	// succ:  l3CEE_2264 l3CEE_226A
l3CEE_2264:
	dx_ax = di *u32 ax
	SCZO = cond(dx_ax)
	si = si + ax
	SCZO = cond(si)
	bp = bp + dx + C
	SCZO = cond(bp)
	// succ:  l3CEE_226A
l3CEE_226A:
	ax = Mem0[ds:0x3882<16>:word16]
	ax = ax | ax
	SZ = cond(ax)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_2279
	// succ:  l3CEE_2271 l3CEE_2279
l3CEE_2271:
	dx_ax = di *u32 ax
	SCZO = cond(dx_ax)
	bp = bp + ax
	SCZO = cond(bp)
	dx = dx + 0<16> + C
	SCZO = cond(dx)
	v26 = dx
	dx = ax
	ax = v26
	// succ:  l3CEE_2279
l3CEE_2279:
	dx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	C = dx != 0<16>
	dx = -dx
	SZO = cond(dx)
	cx = cx - si - C
	SCZO = cond(cx)
	bx = bx - bp - C
	SCZO = cond(bx)
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bp = bp - ax - C
	SCZO = cond(bp)
	v27 = bp
	bp = ax
	ax = v27
	// succ:  l3CEE_2284
l3CEE_2284:
	v23 = dx
	dx = ax
	ax = v23
	v24 = cx
	cx = ax
	ax = v24
	v25 = bx
	bx = ax
	ax = v25
	branch Test(UGE,C) l3CEE_229C
	// succ:  l3CEE_2289 l3CEE_229C
l3CEE_2289:
	di = di - 1<16>
	SZO = cond(di)
	cx = cx + Mem0[ds:0x387E<16>:word16]
	SCZO = cond(cx)
	bx = bx + Mem0[ds:0x3880<16>:word16] + C
	SCZO = cond(bx)
	ax = ax + Mem0[ds:0x3882<16>:word16] + C
	SCZO = cond(ax)
	dx = dx + Mem0[ds:0x3884<16>:word16] + C
	SCZO = cond(dx)
	branch Test(UGE,C) l3CEE_2289
	// succ:  l3CEE_229C l3CEE_2289
l3CEE_229C:
	return
	// succ:  fn3CEE_2237_exit
l3CEE_229D:
	di = di - 1<16>
	SZO = cond(di)
	cx = cx - Mem0[ds:0x387E<16>:word16]
	SCZO = cond(cx)
	bx = bx - Mem0[ds:0x3880<16>:word16] - C
	SCZO = cond(bx)
	ax = ax - Mem0[ds:0x3882<16>:word16] - C
	SCZO = cond(ax)
	cx = cx + Mem0[ds:0x3880<16>:word16]
	SCZO = cond(cx)
	bx = bx + Mem0[ds:0x3882<16>:word16] + C
	SCZO = cond(bx)
	ax = ax + dx + C
	SCZO = cond(ax)
	dx = Mem0[ds:0x387E<16>:word16]
	C = !C
	goto l3CEE_2284
	// succ:  l3CEE_2284
fn3CEE_2237_exit:


// fn3CEE_22BB
// Return size: 2
define fn3CEE_22BB
fn3CEE_22BB_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_22BB
l3CEE_22BB:
	al = Mem0[ds:si + 6<i16>:byte]
	ah = ah ^ ah
	SZ = cond(ah)
	O = false
	C = false
	al = al & 0xF<8>
	SZ = cond(al)
	O = false
	C = false
	al = al | 0x10<8>
	SZ = cond(al)
	O = false
	C = false
	Mem0[ds:0x387A<16>:word16] = ax
	al = Mem0[ds:di + 6<i16>:byte]
	al = al & 0xF<8>
	SZ = cond(al)
	O = false
	C = false
	al = al | 0x10<8>
	SZ = cond(al)
	O = false
	C = false
	Mem0[ds:0x387C<16>:word16] = ax
	bx = bx ^ bx
	SZ = cond(bx)
	O = false
	C = false
	bp = bx
	cx = Mem0[ds:si:word16]
	branch cx == 0<16> l3CEE_22F3
	// succ:  l3CEE_22D9 l3CEE_22F3
l3CEE_22D9:
	v16 = cx
	cx = ax
	ax = v16
	cx = Mem0[ds:di:word16]
	branch cx == 0<16> l3CEE_22E6
	// succ:  l3CEE_22DE l3CEE_22E6
l3CEE_22DE:
	dx_ax = cx *u32 ax
	SCZO = cond(dx_ax)
	bp = ax
	cx = dx
	ax = Mem0[ds:si:word16]
	// succ:  l3CEE_22E6
l3CEE_22E6:
	dx = Mem0[ds:di + 2<i16>:word16]
	dx = dx | dx
	SZ = cond(dx)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_22F3
	// succ:  l3CEE_22ED l3CEE_22F3
l3CEE_22ED:
	dx_ax = dx *u32 ax
	SCZO = cond(dx_ax)
	cx = cx + ax
	SCZO = cond(cx)
	bx = bx + dx + C
	SCZO = cond(bx)
	// succ:  l3CEE_22F3
l3CEE_22F3:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = bp ^ bp
	SZ = cond(bp)
	O = false
	C = false
	ax = Mem0[ds:si + 2<i16>:word16]
	ax = ax | ax
	SZ = cond(ax)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_230B
	// succ:  l3CEE_22FD l3CEE_230B
l3CEE_22FD:
	dx = Mem0[ds:di:word16]
	dx = dx | dx
	SZ = cond(dx)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_230B
	// succ:  l3CEE_2303 l3CEE_230B
l3CEE_2303:
	dx_ax = dx *u32 ax
	SCZO = cond(dx_ax)
	cx = cx + ax
	SCZO = cond(cx)
	bx = bx + dx + C
	SCZO = cond(bx)
	v22 = (bp & 1<16> << 0x10<8> - 1<8>) != 0<16>
	bp = __rcl<word16,byte>(bp, 1<8>, C)
	C = v22
	// succ:  l3CEE_230B
l3CEE_230B:
	ax = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	ax = ax | cx
	SZ = cond(ax)
	O = false
	C = false
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ds:si + 2<i16>:word16]
	ax = ax | ax
	SZ = cond(ax)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_2323
	// succ:  l3CEE_2316 l3CEE_2323
l3CEE_2316:
	dx = Mem0[ds:di + 2<i16>:word16]
	dx = dx | dx
	SZ = cond(dx)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_2323
	// succ:  l3CEE_231D l3CEE_2323
l3CEE_231D:
	dx_ax = dx *u32 ax
	SCZO = cond(dx_ax)
	bx = bx + ax
	SCZO = cond(bx)
	bp = bp + dx + C
	SCZO = cond(bp)
	// succ:  l3CEE_2323
l3CEE_2323:
	cx = cx ^ cx
	SZ = cond(cx)
	O = false
	C = false
	ax = Mem0[ds:si:word16]
	ax = ax | ax
	SZ = cond(ax)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_233A
	// succ:  l3CEE_232B l3CEE_233A
l3CEE_232B:
	dx = Mem0[ds:di + 4<i16>:word16]
	dx = dx | dx
	SZ = cond(dx)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_233A
	// succ:  l3CEE_2332 l3CEE_233A
l3CEE_2332:
	dx_ax = dx *u32 ax
	SCZO = cond(dx_ax)
	bx = bx + ax
	SCZO = cond(bx)
	bp = bp + dx + C
	SCZO = cond(bp)
	v23 = (cx & 1<16> << 0x10<8> - 1<8>) != 0<16>
	cx = __rcl<word16,byte>(cx, 1<8>, C)
	C = v23
	// succ:  l3CEE_233A
l3CEE_233A:
	ax = Mem0[ds:si + 4<i16>:word16]
	ax = ax | ax
	SZ = cond(ax)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_2350
	// succ:  l3CEE_2341 l3CEE_2350
l3CEE_2341:
	dx = Mem0[ds:di:word16]
	dx = dx | dx
	SZ = cond(dx)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_2350
	// succ:  l3CEE_2347 l3CEE_2350
l3CEE_2347:
	dx_ax = dx *u32 ax
	SCZO = cond(dx_ax)
	bx = bx + ax
	SCZO = cond(bx)
	bp = bp + dx + C
	SCZO = cond(bp)
	cx = cx + 0<16> + C
	SCZO = cond(cx)
	// succ:  l3CEE_2350
l3CEE_2350:
	ax = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	ax = ax | bx
	SZ = cond(ax)
	O = false
	C = false
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ds:si:word16]
	ax = ax | ax
	SZ = cond(ax)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_2362
	// succ:  l3CEE_235A l3CEE_2362
l3CEE_235A:
	dx_ax = Mem0[ds:0x387C<16>:word16] *u32 ax
	SCZO = cond(dx_ax)
	bp = bp + ax
	SCZO = cond(bp)
	cx = cx + dx + C
	SCZO = cond(cx)
	// succ:  l3CEE_2362
l3CEE_2362:
	ax = Mem0[ds:di:word16]
	ax = ax | ax
	SZ = cond(ax)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_2370
	// succ:  l3CEE_2368 l3CEE_2370
l3CEE_2368:
	dx_ax = Mem0[ds:0x387A<16>:word16] *u32 ax
	SCZO = cond(dx_ax)
	bp = bp + ax
	SCZO = cond(bp)
	cx = cx + dx + C
	SCZO = cond(cx)
	// succ:  l3CEE_2370
l3CEE_2370:
	bx = bx ^ bx
	SZ = cond(bx)
	O = false
	C = false
	ax = Mem0[ds:si + 2<i16>:word16]
	ax = ax | ax
	SZ = cond(ax)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_2388
	// succ:  l3CEE_2379 l3CEE_2388
l3CEE_2379:
	dx = Mem0[ds:di + 4<i16>:word16]
	dx = dx | dx
	SZ = cond(dx)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_2388
	// succ:  l3CEE_2380 l3CEE_2388
l3CEE_2380:
	dx_ax = dx *u32 ax
	SCZO = cond(dx_ax)
	bp = bp + ax
	SCZO = cond(bp)
	cx = cx + dx + C
	SCZO = cond(cx)
	v24 = (bx & 1<16> << 0x10<8> - 1<8>) != 0<16>
	bx = __rcl<word16,byte>(bx, 1<8>, C)
	C = v24
	// succ:  l3CEE_2388
l3CEE_2388:
	ax = Mem0[ds:si + 4<i16>:word16]
	ax = ax | ax
	SZ = cond(ax)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_239F
	// succ:  l3CEE_238F l3CEE_239F
l3CEE_238F:
	dx = Mem0[ds:di + 2<i16>:word16]
	dx = dx | dx
	SZ = cond(dx)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_239F
	// succ:  l3CEE_2396 l3CEE_239F
l3CEE_2396:
	dx_ax = dx *u32 ax
	SCZO = cond(dx_ax)
	bp = bp + ax
	SCZO = cond(bp)
	cx = cx + dx + C
	SCZO = cond(cx)
	bx = bx + 0<16> + C
	SCZO = cond(bx)
	// succ:  l3CEE_239F
l3CEE_239F:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = bp ^ bp
	SZ = cond(bp)
	O = false
	C = false
	ax = Mem0[ds:di + 2<i16>:word16]
	ax = ax | ax
	SZ = cond(ax)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_23B1
	// succ:  l3CEE_23A9 l3CEE_23B1
l3CEE_23A9:
	dx_ax = Mem0[ds:0x387A<16>:word16] *u32 ax
	SCZO = cond(dx_ax)
	cx = cx + ax
	SCZO = cond(cx)
	bx = bx + dx + C
	SCZO = cond(bx)
	// succ:  l3CEE_23B1
l3CEE_23B1:
	ax = Mem0[ds:si + 2<i16>:word16]
	ax = ax | ax
	SZ = cond(ax)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_23C0
	// succ:  l3CEE_23B8 l3CEE_23C0
l3CEE_23B8:
	dx_ax = Mem0[ds:0x387C<16>:word16] *u32 ax
	SCZO = cond(dx_ax)
	cx = cx + ax
	SCZO = cond(cx)
	bx = bx + dx + C
	SCZO = cond(bx)
	// succ:  l3CEE_23C0
l3CEE_23C0:
	ax = Mem0[ds:si + 4<i16>:word16]
	ax = ax | ax
	SZ = cond(ax)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_23E1
	// succ:  l3CEE_23C7 l3CEE_23E1
l3CEE_23C7:
	dx = Mem0[ds:di + 4<i16>:word16]
	dx = dx | dx
	SZ = cond(dx)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_23D9
	// succ:  l3CEE_23CE l3CEE_23D9
l3CEE_23CE:
	dx_ax = dx *u32 ax
	SCZO = cond(dx_ax)
	cx = cx + ax
	SCZO = cond(cx)
	bx = bx + dx + C
	SCZO = cond(bx)
	v25 = (bp & 1<16> << 0x10<8> - 1<8>) != 0<16>
	bp = __rcl<word16,byte>(bp, 1<8>, C)
	C = v25
	ax = Mem0[ds:si + 4<i16>:word16]
	// succ:  l3CEE_23D9
l3CEE_23D9:
	dx_ax = Mem0[ds:0x387C<16>:word16] *u32 ax
	SCZO = cond(dx_ax)
	bx = bx + ax
	SCZO = cond(bx)
	bp = bp + dx + C
	SCZO = cond(bp)
	// succ:  l3CEE_23E1
l3CEE_23E1:
	ax = Mem0[ds:di + 4<i16>:word16]
	ax = ax | ax
	SZ = cond(ax)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_23F0
	// succ:  l3CEE_23E8 l3CEE_23F0
l3CEE_23E8:
	dx_ax = Mem0[ds:0x387A<16>:word16] *u32 ax
	SCZO = cond(dx_ax)
	bx = bx + ax
	SCZO = cond(bx)
	bp = bp + dx + C
	SCZO = cond(bp)
	// succ:  l3CEE_23F0
l3CEE_23F0:
	al = Mem0[ds:0x387A<16>:byte]
	ax = Mem0[ds:0x387C<16>:byte] *u16 al
	SCZO = cond(ax)
	ax = ax + bp
	SCZO = cond(ax)
	v26 = di
	di = ax
	ax = v26
	dx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	dx = dx << 1<16>
	SCZO = cond(dx)
	v27 = (cx & 1<16> << 0x10<8> - 1<8>) != 0<16>
	cx = __rcl<word16,byte>(cx, 1<8>, C)
	C = v27
	v28 = (bx & 1<16> << 0x10<8> - 1<8>) != 0<16>
	bx = __rcl<word16,byte>(bx, 1<8>, C)
	C = v28
	v29 = (di & 1<16> << 0x10<8> - 1<8>) != 0<16>
	di = __rcl<word16,byte>(di, 1<8>, C)
	C = v29
	dx = dx << 1<16>
	SCZO = cond(dx)
	v30 = (cx & 1<16> << 0x10<8> - 1<8>) != 0<16>
	cx = __rcl<word16,byte>(cx, 1<8>, C)
	C = v30
	v31 = (bx & 1<16> << 0x10<8> - 1<8>) != 0<16>
	bx = __rcl<word16,byte>(bx, 1<8>, C)
	C = v31
	v32 = (di & 1<16> << 0x10<8> - 1<8>) != 0<16>
	di = __rcl<word16,byte>(di, 1<8>, C)
	C = v32
	dx = dx << 1<16>
	SCZO = cond(dx)
	v33 = (cx & 1<16> << 0x10<8> - 1<8>) != 0<16>
	cx = __rcl<word16,byte>(cx, 1<8>, C)
	C = v33
	v34 = (bx & 1<16> << 0x10<8> - 1<8>) != 0<16>
	bx = __rcl<word16,byte>(bx, 1<8>, C)
	C = v34
	v35 = (di & 1<16> << 0x10<8> - 1<8>) != 0<16>
	di = __rcl<word16,byte>(di, 1<8>, C)
	C = v35
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	si = si | si
	SZ = cond(si)
	O = false
	C = false
	return
	// succ:  fn3CEE_22BB_exit
fn3CEE_22BB_exit:


// fn3CEE_2A62
// Return size: 2
define fn3CEE_2A62
fn3CEE_2A62_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_2A62
l3CEE_2A62:
	bp = 0x39F0<16>
	cx = 8<16>
	di = bp
	ax = ax ^ ax
	SZ = cond(ax)
	O = false
	C = false
	// succ:  l3CEE_2A6C
l3CEE_2A6C:
	branch cx == 0<16> l3CEE_2A6E
	// succ:  l3CEE_2A6C_1 l3CEE_2A6E
l3CEE_2A6C_1:
	Mem0[es:di:word16] = ax
	di = di + 2<i16>
	cx = cx - 1<16>
	goto l3CEE_2A6C
	// succ:  l3CEE_2A6C
l3CEE_2A6E:
	ax = Mem0[0x3CEE<16>:bx + 8<i16>:word16]
	v15 = Mem0[ds:si + 8<i16>:word16] + ax
	Mem0[ds:si + 8<i16>:word16] = v15
	SCZO = cond(v15)
	di = 7<16>
	// succ:  l3CEE_2A78
l3CEE_2A78:
	ax = 4<16>
	ax = ax - di
	SCZO = cond(ax)
	ah = ah & al
	SZ = cond(ah)
	O = false
	C = false
	al = al - ah
	SCZO = cond(al)
	al = al - ah
	SCZO = cond(al)
	C = al != 0<8>
	al = -al
	SZO = cond(al)
	al = al + 4<8>
	SCZO = cond(al)
	ax = CONVERT(al, int8, int16)
	cx = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	bx = bx - cx
	SCZO = cond(bx)
	bx = bx - di
	SCZO = cond(bx)
	bx = bx + 8<16>
	SCZO = cond(bx)
	si = si + cx
	SCZO = cond(si)
	si = si - di
	SCZO = cond(si)
	si = si + 6<16>
	SCZO = cond(si)
	// succ:  l3CEE_2A9A
l3CEE_2A9A:
	ax = Mem0[ds:si:word16]
	dx_ax = Mem0[0x3CEE<16>:bx:word16] *u32 ax
	SCZO = cond(dx_ax)
	v22 = Mem0[ds:bp:word16] + ax
	Mem0[ds:bp:word16] = v22
	SCZO = cond(v22)
	v24 = Mem0[ds:bp + 2<i16>:word16] + dx + C
	Mem0[ds:bp + 2<i16>:word16] = v24
	SCZO = cond(v24)
	v25 = Mem0[ds:bp + 4<i16>:word16] + 0<16> + C
	Mem0[ds:bp + 4<i16>:word16] = v25
	SCZO = cond(v25)
	si = si - 2<16>
	SCZO = cond(si)
	bx = bx + 2<16>
	SCZO = cond(bx)
	cx = cx - 1<16>
	branch cx != 0<16> l3CEE_2A9A
	// succ:  l3CEE_2AB4 l3CEE_2A9A
l3CEE_2AB4:
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bp = bp + 2<16>
	SCZO = cond(bp)
	di = di - 1<16>
	SZO = cond(di)
	branch Test(NE,Z) l3CEE_2A78
	// succ:  l3CEE_2ABC l3CEE_2A78
l3CEE_2ABC:
	bp = bp - 0xE<16>
	SCZO = cond(bp)
	v27 = bp
	bp = si
	si = v27
	ax = Mem0[ds:si:word16]
	si = si + 2<i16>
	v28 = cx
	cx = ax
	ax = v28
	ax = Mem0[ds:si:word16]
	si = si + 2<i16>
	cx = cx | ax
	SZ = cond(cx)
	O = false
	C = false
	ax = Mem0[ds:si:word16]
	si = si + 2<i16>
	cx = cx | ax
	SZ = cond(cx)
	O = false
	C = false
	cl = cl | ch
	SZ = cond(cl)
	O = false
	C = false
	ax = Mem0[ds:si:word16]
	si = si + 2<i16>
	v31 = dx
	dx = ax
	ax = v31
	dl = dl | cl
	SZ = cond(dl)
	O = false
	C = false
	ax = Mem0[ds:si:word16]
	si = si + 2<i16>
	v33 = di
	di = ax
	ax = v33
	ax = Mem0[ds:si:word16]
	si = si + 2<i16>
	v34 = cx
	cx = ax
	ax = v34
	ax = Mem0[ds:si:word16]
	si = si + 2<i16>
	v35 = bx
	bx = ax
	ax = v35
	ax = Mem0[ds:si:word16]
	si = si + 2<i16>
	si = bp
	ax = ax | ax
	SZ = cond(ax)
	O = false
	C = false
	branch Test(SG,S) l3CEE_2AE9
	// succ:  l3CEE_2ADC l3CEE_2AE9
l3CEE_2ADC:
	v37 = Mem0[ds:si + 8<i16>:word16] - 1<16>
	Mem0[ds:si + 8<i16>:word16] = v37
	SZO = cond(v37)
	dx = dx << 1<16>
	SCZO = cond(dx)
	v38 = (di & 1<16> << 0x10<8> - 1<8>) != 0<16>
	di = __rcl<word16,byte>(di, 1<8>, C)
	C = v38
	v39 = (cx & 1<16> << 0x10<8> - 1<8>) != 0<16>
	cx = __rcl<word16,byte>(cx, 1<8>, C)
	C = v39
	v40 = (bx & 1<16> << 0x10<8> - 1<8>) != 0<16>
	bx = __rcl<word16,byte>(bx, 1<8>, C)
	C = v40
	v41 = (ax & 1<16> << 0x10<8> - 1<8>) != 0<16>
	ax = __rcl<word16,byte>(ax, 1<8>, C)
	C = v41
	// succ:  l3CEE_2AE9
l3CEE_2AE9:
	bp = 1<16>
	bp = bp & di
	SZ = cond(bp)
	O = false
	C = false
	dx = dx | bp
	SZ = cond(dx)
	O = false
	C = false
	bp = bp ^ bp
	SZ = cond(bp)
	O = false
	C = false
	SCZO = cond(dx - 0x8001<16>)
	C = !C
	di = di + bp + C
	SCZO = cond(di)
	cx = cx + bp + C
	SCZO = cond(cx)
	bx = bx + bp + C
	SCZO = cond(bx)
	ax = ax + bp + C
	SCZO = cond(ax)
	v42 = (bp & 1<16> << 0x10<8> - 1<8>) != 0<16>
	bp = __rcl<word16,byte>(bp, 1<8>, C)
	C = v42
	v43 = Mem0[ds:si + 8<i16>:word16] + bp
	Mem0[ds:si + 8<i16>:word16] = v43
	SCZO = cond(v43)
	v44 = (bp & 1<16> << 1<8>) != 0<16>
	bp = __ror<word16,byte>(bp, 1<8>)
	C = v44
	ax = ax | bp
	SZ = cond(ax)
	O = false
	C = false
	Mem0[ds:si:word16] = di
	Mem0[ds:si + 2<i16>:word16] = cx
	Mem0[ds:si + 4<i16>:word16] = bx
	Mem0[ds:si + 6<i16>:word16] = ax
	return
	// succ:  fn3CEE_2A62_exit
fn3CEE_2A62_exit:


// fn3CEE_2BC8
// Return size: 2
define fn3CEE_2BC8
fn3CEE_2BC8_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_2BC8
l3CEE_2BC8:
	bx = 0x2B14<16>
	di = di | di
	SZ = cond(di)
	O = false
	C = false
	branch Test(NS,S) l3CEE_2BD4
	// succ:  l3CEE_2BCF l3CEE_2BD4
l3CEE_2BCF:
	bx = 0x2B6E<16>
	C = di != 0<16>
	di = -di
	SZO = cond(di)
	// succ:  l3CEE_2BD4
l3CEE_2BD4:
	bx = bx - 0xA<16>
	SCZO = cond(bx)
	// succ:  l3CEE_2BD7
l3CEE_2BD7:
	bx = bx + 0xA<16>
	SCZO = cond(bx)
	di = di | di
	SZ = cond(di)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_2BEB
	// succ:  l3CEE_2BDE l3CEE_2BEB
l3CEE_2BDE:
	di = di >>u 1<16>
	SCZO = cond(di)
	branch Test(UGE,C) l3CEE_2BD7
	// succ:  l3CEE_2BE2 l3CEE_2BD7
l3CEE_2BE2:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	call fn3CEE_2A62 (retsize: 2;)
	di = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	goto l3CEE_2BD7
	// succ:  l3CEE_2BD7
l3CEE_2BEB:
	return
	// succ:  fn3CEE_2BC8_exit
fn3CEE_2BC8_exit:


// fn3CEE_2C38
// Return size: 2
define fn3CEE_2C38
fn3CEE_2C38_entry:
	sp = fp
	Top = 0<i8>
	goto l3CEE_2C38
	// succ:  l3CEE_2C38
l3CEE_2BEC:
	ax = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	// succ:  l3CEE_2BED
l3CEE_2BED:
	cl = cl | 0x30<8>
	SZ = cond(cl)
	O = false
	C = false
	cl = cl | 0x40<8>
	SZ = cond(cl)
	O = false
	C = false
	// succ:  l3CEE_2BF3
l3CEE_2BF3:
	dx = di
	di = di ^ di
	SZ = cond(di)
	O = false
	C = false
	bp = di
	call fn3CEE_2D77 (retsize: 2;)
	sp = sp + 2<16>
	bx = bx ^ bx
	SZ = cond(bx)
	O = false
	C = false
	goto l3CEE_2CAD
	// succ:  l3CEE_2CAD
l3CEE_2C01:
	Mem0[ds:0x3A0E<16>:word16] = bx
	bx = bx ^ bx
	SZ = cond(bx)
	O = false
	C = false
	call fn3CEE_2E0C (retsize: 2;)
	branch Test(ULT,C) l3CEE_2BED
	// succ:  l3CEE_2C0C l3CEE_2BED
l3CEE_2C0C:
	di = ax
	// succ:  l3CEE_2C0E
l3CEE_2C0E:
	call fn3CEE_2E0C (retsize: 2;)
	branch Test(ULT,C) l3CEE_2BF3
	// succ:  l3CEE_2C13 l3CEE_2BF3
l3CEE_2C13:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = di
	dx_ax = Mem0[ds:0x3A0E<16>:word16] *u32 ax
	SCZO = cond(dx_ax)
	di = ax
	bp = dx
	ax = bx
	dx_ax = Mem0[ds:0x3A0E<16>:word16] *s32 ax
	SCZO = cond(dx_ax)
	dx = dx | dx
	SZ = cond(dx)
	O = false
	C = false
	branch Test(NE,Z) l3CEE_2BEC
	// succ:  l3CEE_2C28 l3CEE_2BEC
l3CEE_2C28:
	ax = ax + bp
	SCZO = cond(ax)
	bx = ax
	branch Test(ULT,C) l3CEE_2BEC
	// succ:  l3CEE_2C2E l3CEE_2BEC
l3CEE_2C2E:
	ax = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	di = di + ax
	SCZO = cond(di)
	bx = bx + 0<16> + C
	SCZO = cond(bx)
	branch Test(UGE,C) l3CEE_2C0E
	// succ:  l3CEE_2C36 l3CEE_2C0E
l3CEE_2C36:
	goto l3CEE_2BED
	// succ:  l3CEE_2BED
l3CEE_2C38:
	D = false
	Mem0[ds:0x3A04<16>:word16] = di
	cx = cx + si
	SCZO = cond(cx)
	Mem0[ds:0x3A06<16>:word16] = cx
	Mem0[ds:0x3A10<16>:word16] = ax
	Mem0[ds:0x3A12<16>:word16] = dx
	ax = ax ^ ax
	SZ = cond(ax)
	O = false
	C = false
	Mem0[ds:0x3A0A<16>:word16] = ax
	Mem0[ds:0x3A08<16>:word16] = ax
	Mem0[ds:0x3A0C<16>:word16] = ax
	v15 = cx
	cx = ax
	ax = v15
	call fn3CEE_2DFC (retsize: 2;)
	branch Test(NE,Z) l3CEE_2C5E
	// succ:  l3CEE_2C5B l3CEE_2C5E
l3CEE_2C5B:
	ch = ch | 0x80<8>
	SZ = cond(ch)
	O = false
	C = false
	// succ:  l3CEE_2C5E
l3CEE_2C5E:
	bx = bx | bx
	SZ = cond(bx)
	O = false
	C = false
	branch Test(NE,Z) l3CEE_2C01
	// succ:  l3CEE_2C62 l3CEE_2C01
l3CEE_2C62:
	call fn3CEE_2D42 (retsize: 2;)
	bx = bx ^ bx
	SZ = cond(bx)
	O = false
	C = false
	call fn3CEE_2E5D (retsize: 2;)
	branch Test(EQ,Z) l3CEE_2CAD
	// succ:  l3CEE_2C6C l3CEE_2CAD
l3CEE_2C6C:
	si = si - 1<16>
	SZO = cond(si)
	SCZO = cond(al - 0x44<8>)
	branch Test(EQ,Z) l3CEE_2C8D
	// succ:  l3CEE_2C71 l3CEE_2C8D
l3CEE_2C71:
	SCZO = cond(al - 0x45<8>)
	branch Test(EQ,Z) l3CEE_2C87
	// succ:  l3CEE_2C75 l3CEE_2C87
l3CEE_2C75:
	SCZO = cond(Mem0[ds:0x3A01<16>:byte] - 0<8>)
	branch Test(EQ,Z) l3CEE_2CAD
	// succ:  l3CEE_2C7C l3CEE_2CAD
l3CEE_2C7C:
	SCZO = cond(al - 0x2B<8>)
	branch Test(EQ,Z) l3CEE_2C86
	// succ:  l3CEE_2C80 l3CEE_2C86
l3CEE_2C80:
	SCZO = cond(al - 0x2D<8>)
	branch Test(EQ,Z) l3CEE_2C86
	// succ:  l3CEE_2C84 l3CEE_2C86
l3CEE_2C84:
	branch Test(NE,Z) l3CEE_2CAD
	// succ:  l3CEE_2C86 l3CEE_2CAD
l3CEE_2C86:
	si = si - 1<16>
	SZO = cond(si)
	// succ:  l3CEE_2C87
l3CEE_2C87:
	cx = cx | 0x402<16>
	SZ = cond(cx)
	O = false
	C = false
	goto l3CEE_2C90
	// succ:  l3CEE_2C90
l3CEE_2C8D:
	cl = cl | 0xE<8>
	SZ = cond(cl)
	O = false
	C = false
	// succ:  l3CEE_2C90
l3CEE_2C90:
	Mem0[ds:0x3A10<16>:word16] = 0<16>
	si = si + 1<16>
	SZO = cond(si)
	call fn3CEE_2DFC (retsize: 2;)
	ah = SCZOP
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn3CEE_2D20 (retsize: 2;)
	SZP = cond(ch & 2<8>)
	O = false
	C = false
	branch Test(NE,Z) l3CEE_2CA7
	// succ:  l3CEE_2CA4 l3CEE_2CA7
l3CEE_2CA4:
	cl = cl | 0x40<8>
	SZ = cond(cl)
	O = false
	C = false
	// succ:  l3CEE_2CA7
l3CEE_2CA7:
	ax = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	SCZO = ah
	branch Test(NE,Z) l3CEE_2CAD
	// succ:  l3CEE_2CAB l3CEE_2CAD
l3CEE_2CAB:
	C = bx != 0<16>
	bx = -bx
	SZO = cond(bx)
	// succ:  l3CEE_2CAD
l3CEE_2CAD:
	di = Mem0[ds:0x3A10<16>:word16]
	di = di | di
	SZ = cond(di)
	O = false
	C = false
	branch Test(NE,Z) l3CEE_2CBB
	// succ:  l3CEE_2CB5 l3CEE_2CBB
l3CEE_2CB5:
	SZP = cond(cx & 0x1872<16>)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_2CBE
	// succ:  l3CEE_2CBB l3CEE_2CBE
l3CEE_2CBB:
	cl = cl | 0x30<8>
	SZ = cond(cl)
	O = false
	C = false
	// succ:  l3CEE_2CBE
l3CEE_2CBE:
	di = di + bx
	SCZO = cond(di)
	di = di + Mem0[ds:0x3A0C<16>:word16]
	SCZO = cond(di)
	SZP = cond(ch & 0x10<8>)
	O = false
	C = false
	branch Test(NE,Z) l3CEE_2CCD
	// succ:  l3CEE_2CC9 l3CEE_2CCD
l3CEE_2CC9:
	di = di - Mem0[ds:0x3A12<16>:word16]
	SCZO = cond(di)
	// succ:  l3CEE_2CCD
l3CEE_2CCD:
	SCZO = cond(di - 0x190<16>)
	branch Test(GT,SZO) l3CEE_2D19
	// succ:  l3CEE_2CD3 l3CEE_2D19
l3CEE_2CD3:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = cx
	si = 0x3A18<16>
	call fn3CEE_2BC8 (retsize: 2;)
	di = Mem0[ds:0x3A04<16>:word16]
	Mem0[ds:0x3A22<16>:byte] = 0<8>
	call fn3CEE_2E89 (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	branch Test(NE,Z) l3CEE_2D19
	// succ:  l3CEE_2CEB l3CEE_2D19
l3CEE_2CEB:
	ax = Mem0[ds:0x3A14<16>:word16]
	bx = Mem0[ds:0x3A16<16>:word16]
	SZP = cond(ch & 0x80<8>)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_2D0A
	// succ:  l3CEE_2CF7 l3CEE_2D0A
l3CEE_2CF7:
	bx = ~bx
	C = ax != 0<16>
	ax = -ax
	SZO = cond(ax)
	C = !C
	bx = bx + 0<16> + C
	SCZO = cond(bx)
	SZP = cond(Mem0[ds:di + 6<i16>:word16] & 0x7FF0<16>)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_2D0A
	// succ:  l3CEE_2D06 l3CEE_2D0A
l3CEE_2D06:
	v28 = Mem0[ds:di + 7<i16>:byte] | 0x80<8>
	Mem0[ds:di + 7<i16>:byte] = v28
	SZ = cond(Mem0[ds:di + 7<i16>:byte])
	O = false
	C = false
	// succ:  l3CEE_2D0A
l3CEE_2D0A:
	SCZO = cond(Mem0[ds:0x3A0A<16>:word16] - 7<16>)
	branch Test(ULE,CZ) l3CEE_2D14
	// succ:  l3CEE_2D11 l3CEE_2D14
l3CEE_2D11:
	cl = cl | 8<8>
	SZ = cond(cl)
	O = false
	C = false
	// succ:  l3CEE_2D14
l3CEE_2D14:
	ch = Mem0[ds:0x3A22<16>:byte]
	return
	// succ:  fn3CEE_2C38_exit
l3CEE_2D19:
	cl = cl | 1<8>
	SZ = cond(cl)
	O = false
	C = false
	return
	// succ:  fn3CEE_2C38_exit
fn3CEE_2C38_exit:


// fn3CEE_2D1D
// Return size: 2
define fn3CEE_2D1D
fn3CEE_2D1D_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_2D1D
l3CEE_2D1D:
	bx = 0x7FFF<16>
	goto l3CEE_2D1D_thunk_fn3CEE_2D20
	// succ:  l3CEE_2D1D_thunk_fn3CEE_2D20
l3CEE_2D1D:
l3CEE_2D1D_thunk_fn3CEE_2D20:
	call fn3CEE_2D20 (retsize: 0;)
	return
	// succ:  fn3CEE_2D1D_exit
fn3CEE_2D1D_exit:


// fn3CEE_2D20
// Return size: 2
define fn3CEE_2D20
fn3CEE_2D20_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_2D20
l3CEE_2D20:
	Mem0[ds:0x3A0E<16>:byte] = 0xA<8>
	call fn3CEE_2E0C (retsize: 2;)
	branch Test(ULT,C) l3CEE_2D41
	// succ:  l3CEE_2D2A l3CEE_2D41
l3CEE_2D2A:
	SCZO = cond(bx - 0xCCC<16>)
	branch Test(UGT,CZ) l3CEE_2D2E_thunk_fn3CEE_2D1D
	goto l3CEE_2D30
	// succ:  l3CEE_2D30 l3CEE_2D2E_thunk_fn3CEE_2D1D
l3CEE_2D2E_thunk_fn3CEE_2D1D:
	call fn3CEE_2D1D (retsize: 0;)
	return
	// succ:  fn3CEE_2D20_exit
l3CEE_2D30:
	ch = ch | 2<8>
	SZ = cond(ch)
	O = false
	C = false
	bx = bx << 1<16>
	SCZO = cond(bx)
	ax = ax + bx
	SCZO = cond(ax)
	bx = bx << 1<16>
	SCZO = cond(bx)
	bx = bx << 1<16>
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	branch Test(SG,S) l3CEE_2D1D
	goto l3CEE_2D3F
	// succ:  l3CEE_2D3F l3CEE_2D3D_thunk_fn3CEE_2D1D
l3CEE_2D3D_thunk_fn3CEE_2D1D:
	call fn3CEE_2D1D (retsize: 0;)
	return
	// succ:  fn3CEE_2D20_exit
l3CEE_2D3F:
	goto l3CEE_2D20
	// succ:  l3CEE_2D20
l3CEE_2D41:
	return
	// succ:  fn3CEE_2D20_exit
fn3CEE_2D20_exit:


// fn3CEE_2D42
// Return size: 2
define fn3CEE_2D42
fn3CEE_2D42_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_2D42
l3CEE_2D42:
	di = di ^ di
	SZ = cond(di)
	O = false
	C = false
	bp = di
	bx = di
	dx = di
	// succ:  l3CEE_2D4A
l3CEE_2D4A:
	call fn3CEE_2E23 (retsize: 2;)
	branch Test(ULT,C) l3CEE_2D77
	goto l3CEE_2D4F
	// succ:  l3CEE_2D4F l3CEE_2D4D_thunk_fn3CEE_2D77
l3CEE_2D4D_thunk_fn3CEE_2D77:
	call fn3CEE_2D77 (retsize: 0;)
	return
	// succ:  fn3CEE_2D42_exit
l3CEE_2D4F:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn3CEE_2DDD (retsize: 2;)
	ax = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	dx = dx + ax
	SCZO = cond(dx)
	bx = bx + 0<16> + C
	SCZO = cond(bx)
	bp = bp + 0<16> + C
	SCZO = cond(bp)
	di = di + 0<16> + C
	SCZO = cond(di)
	SCZO = cond(di - 0x1999<16>)
	branch Test(ULT,C) l3CEE_2D4A
	// succ:  l3CEE_2D65 l3CEE_2D4A
l3CEE_2D65:
	call fn3CEE_2E23 (retsize: 2;)
	branch Test(ULT,C) l3CEE_2D77
	goto l3CEE_2D6A
	// succ:  l3CEE_2D6A l3CEE_2D68_thunk_fn3CEE_2D77
l3CEE_2D68_thunk_fn3CEE_2D77:
	call fn3CEE_2D77 (retsize: 0;)
	return
	// succ:  fn3CEE_2D42_exit
l3CEE_2D6A:
	al = al | al
	SZ = cond(al)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_2D71
	// succ:  l3CEE_2D6E l3CEE_2D71
l3CEE_2D6E:
	dl = dl | 1<8>
	SZ = cond(dl)
	O = false
	C = false
	// succ:  l3CEE_2D71
l3CEE_2D71:
	v24 = Mem0[ds:0x3A0C<16>:word16] + 1<16>
	Mem0[ds:0x3A0C<16>:word16] = v24
	SZO = cond(v24)
	goto l3CEE_2D65
	// succ:  l3CEE_2D65
fn3CEE_2D42_exit:


// fn3CEE_2D77
// Return size: 0
define fn3CEE_2D77
fn3CEE_2D77_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_2D77
l3CEE_2D77:
	ax = di
	ax = ax | bp
	SZ = cond(ax)
	O = false
	C = false
	ax = ax | Mem0[ds:0x3A0C<16>:word16]
	SZ = cond(ax)
	O = false
	C = false
	branch Test(NE,Z) l3CEE_2D97
	// succ:  l3CEE_2D81 l3CEE_2D97
l3CEE_2D81:
	SZP = cond(bh & 0x80<8>)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_2D9D
	// succ:  l3CEE_2D86 l3CEE_2D9D
l3CEE_2D86:
	SZP = cond(ch & 0x80<8>)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_2D9A
	// succ:  l3CEE_2D8B l3CEE_2D9A
l3CEE_2D8B:
	SCZO = cond(bx - 0x8000<16>)
	branch Test(NE,Z) l3CEE_2D9A
	// succ:  l3CEE_2D91 l3CEE_2D9A
l3CEE_2D91:
	dx = dx | dx
	SZ = cond(dx)
	O = false
	C = false
	branch Test(NE,Z) l3CEE_2D9A
	// succ:  l3CEE_2D95 l3CEE_2D9A
l3CEE_2D95:
	goto l3CEE_2D9D
	// succ:  l3CEE_2D9D
l3CEE_2D97:
	cl = cl | 0x10<8>
	SZ = cond(cl)
	O = false
	C = false
	// succ:  l3CEE_2D9A
l3CEE_2D9A:
	cl = cl | 0x20<8>
	SZ = cond(cl)
	O = false
	C = false
	// succ:  l3CEE_2D9D
l3CEE_2D9D:
	Mem0[ds:0x3A14<16>:word16] = dx
	Mem0[ds:0x3A16<16>:word16] = bx
	ax = di
	ax = ax | bp
	SZ = cond(ax)
	O = false
	C = false
	ax = ax | bx
	SZ = cond(ax)
	O = false
	C = false
	ax = ax | dx
	SZ = cond(ax)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_2DCB
	// succ:  l3CEE_2DAF l3CEE_2DCB
l3CEE_2DAF:
	SCZO = cond(di - 0x1999<16>)
	branch Test(UGE,C) l3CEE_2DBE
	// succ:  l3CEE_2DB5 l3CEE_2DBE
l3CEE_2DB5:
	call fn3CEE_2DDD (retsize: 2;)
	v18 = Mem0[ds:0x3A0C<16>:word16] - 1<16>
	Mem0[ds:0x3A0C<16>:word16] = v18
	SZO = cond(v18)
	goto l3CEE_2DAF
	// succ:  l3CEE_2DAF
l3CEE_2DBE:
	ax = 0x40<16>
	// succ:  l3CEE_2DC1
l3CEE_2DC1:
	di = di | di
	SZ = cond(di)
	O = false
	C = false
	branch Test(SG,S) l3CEE_2DCB
	// succ:  l3CEE_2DC5 l3CEE_2DCB
l3CEE_2DC5:
	ax = ax - 1<16>
	SZO = cond(ax)
	call fn3CEE_2DF3 (retsize: 2;)
	goto l3CEE_2DC1
	// succ:  l3CEE_2DC1
l3CEE_2DCB:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	si = di
	di = 0x3A18<16>
	v23 = dx
	dx = ax
	ax = v23
	Mem0[es:di:word16] = ax
	di = di + 2<i16>
	v25 = bx
	bx = ax
	ax = v25
	Mem0[es:di:word16] = ax
	di = di + 2<i16>
	v26 = bp
	bp = ax
	ax = v26
	Mem0[es:di:word16] = ax
	di = di + 2<i16>
	v27 = si
	si = ax
	ax = v27
	Mem0[es:di:word16] = ax
	di = di + 2<i16>
	v28 = dx
	dx = ax
	ax = v28
	Mem0[es:di:word16] = ax
	di = di + 2<i16>
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn3CEE_2D77_exit
fn3CEE_2D77_exit:


// fn3CEE_2DDD
// Return size: 2
define fn3CEE_2DDD
fn3CEE_2DDD_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_2DDD
l3CEE_2DDD:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bx
	ax = dx
	call fn3CEE_2DF3 (retsize: 2;)
	call fn3CEE_2DF3 (retsize: 2;)
	dx = dx + ax
	SCZO = cond(dx)
	ax = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bx = bx + ax + C
	SCZO = cond(bx)
	ax = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bp = bp + ax + C
	SCZO = cond(bp)
	ax = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	di = di + ax + C
	SCZO = cond(di)
	// succ:  l3CEE_2DF1_thunk_fn3CEE_2DF3
l3CEE_2DF1_thunk_fn3CEE_2DF3:
	call fn3CEE_2DF3 (retsize: 0;)
	return
	// succ:  fn3CEE_2DDD_exit
fn3CEE_2DDD_exit:


// fn3CEE_2DF3
// Return size: 2
define fn3CEE_2DF3
fn3CEE_2DF3_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_2DF3
l3CEE_2DF3:
	dx = dx << 1<16>
	SCZO = cond(dx)
	v6 = (bx & 1<16> << 0x10<8> - 1<8>) != 0<16>
	bx = __rcl<word16,byte>(bx, 1<8>, C)
	C = v6
	v9 = (bp & 1<16> << 0x10<8> - 1<8>) != 0<16>
	bp = __rcl<word16,byte>(bp, 1<8>, C)
	C = v9
	v11 = (di & 1<16> << 0x10<8> - 1<8>) != 0<16>
	di = __rcl<word16,byte>(di, 1<8>, C)
	C = v11
	return
	// succ:  fn3CEE_2DF3_exit
fn3CEE_2DF3_exit:


// fn3CEE_2DFC
// Return size: 2
define fn3CEE_2DFC
fn3CEE_2DFC_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_2DFC
l3CEE_2DFC:
	call fn3CEE_2E5D (retsize: 2;)
	branch Test(EQ,Z) l3CEE_2E09
	// succ:  l3CEE_2E01 l3CEE_2E09
l3CEE_2E01:
	SCZO = cond(al - 0x2D<8>)
	branch Test(EQ,Z) l3CEE_2E0B
	// succ:  l3CEE_2E05 l3CEE_2E0B
l3CEE_2E05:
	SCZO = cond(al - 0x2B<8>)
	branch Test(NE,Z) l3CEE_2E0A
	// succ:  l3CEE_2E09 l3CEE_2E0A
l3CEE_2E09:
	si = si + 1<16>
	SZO = cond(si)
	// succ:  l3CEE_2E0A
l3CEE_2E0A:
	si = si - 1<16>
	SZO = cond(si)
	// succ:  l3CEE_2E0B
l3CEE_2E0B:
	return
	// succ:  fn3CEE_2DFC_exit
fn3CEE_2DFC_exit:


// fn3CEE_2E0C
// Return size: 0
define fn3CEE_2E0C
fn3CEE_2E0C_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_2E0C
l3CEE_2E0C:
	call fn3CEE_2E5D (retsize: 2;)
	branch Test(EQ,Z) l3CEE_2E5B_in_fn3CEE_2E0C
	// succ:  l3CEE_2E11 l3CEE_2E5B_in_fn3CEE_2E0C
l3CEE_2E11:
	al = al - 0x30<8>
	SCZO = cond(al)
	branch Test(ULT,C) l3CEE_2E13_thunk_fn3CEE_2E5A
	goto l3CEE_2E15
	// succ:  l3CEE_2E15 l3CEE_2E13_thunk_fn3CEE_2E5A
l3CEE_2E13_thunk_fn3CEE_2E5A:
	call fn3CEE_2E5A (retsize: 0;)
	return
	// succ:  fn3CEE_2E0C_exit
l3CEE_2E15:
	SCZO = cond(al - 9<8>)
	branch Test(LE,SZO) l3CEE_2E1B
	// succ:  l3CEE_2E19 l3CEE_2E1B
l3CEE_2E19:
	al = al - 7<8>
	SCZO = cond(al)
	// succ:  l3CEE_2E1B
l3CEE_2E1B:
	SCZO = cond(al - Mem0[ds:0x3A0E<16>:byte])
	branch Test(GE,SO) l3CEE_2E1F_thunk_fn3CEE_2E5A
	goto l3CEE_2E21
	// succ:  l3CEE_2E21 l3CEE_2E1F_thunk_fn3CEE_2E5A
l3CEE_2E1F_thunk_fn3CEE_2E5A:
	call fn3CEE_2E5A (retsize: 0;)
	return
	// succ:  fn3CEE_2E0C_exit
l3CEE_2E21:
	// succ:  l3CEE_2E40_in_fn3CEE_2E0C
l3CEE_2E40_in_fn3CEE_2E0C:
	v11 = Mem0[ds:0x3A0A<16>:word16] + 1<16>
	Mem0[ds:0x3A0A<16>:word16] = v11
	SZO = cond(v11)
	ah = ah ^ ah
	SZ = cond(ah)
	O = false
	C = false
	return
	// succ:  fn3CEE_2E0C_exit
l3CEE_2E5B_in_fn3CEE_2E0C:
	C = true
	return
	// succ:  fn3CEE_2E0C_exit
fn3CEE_2E0C_exit:


// fn3CEE_2E23
// Return size: 2
define fn3CEE_2E23
fn3CEE_2E23_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_2E23
l3CEE_2E23:
	call fn3CEE_2E5D (retsize: 2;)
	branch Test(EQ,Z) l3CEE_2E5B
	goto l3CEE_2E28
	// succ:  l3CEE_2E28 l3CEE_2E26_thunk_fn3CEE_2E5A
l3CEE_2E26_thunk_fn3CEE_2E5A:
	call fn3CEE_2E5A (retsize: 0;)
	return
	// succ:  fn3CEE_2E23_exit
l3CEE_2E28:
	SCZO = cond(al - 0x2E<8>)
	branch Test(EQ,Z) l3CEE_2E4C
	// succ:  l3CEE_2E2C l3CEE_2E4C
l3CEE_2E2C:
	al = al - 0x30<8>
	SCZO = cond(al)
	branch Test(ULT,C) l3CEE_2E5A
	goto l3CEE_2E30
	// succ:  l3CEE_2E30 l3CEE_2E2E_thunk_fn3CEE_2E5A
l3CEE_2E2E_thunk_fn3CEE_2E5A:
	call fn3CEE_2E5A (retsize: 0;)
	return
	// succ:  fn3CEE_2E23_exit
l3CEE_2E30:
	SCZO = cond(al - 9<8>)
	branch Test(UGT,CZ) l3CEE_2E5A
	goto l3CEE_2E34
	// succ:  l3CEE_2E34 l3CEE_2E32_thunk_fn3CEE_2E5A
l3CEE_2E32_thunk_fn3CEE_2E5A:
	call fn3CEE_2E5A (retsize: 0;)
	return
	// succ:  fn3CEE_2E23_exit
l3CEE_2E34:
	SZP = cond(ch & 0x10<8>)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_2E47
	// succ:  l3CEE_2E39 l3CEE_2E47
l3CEE_2E39:
	v13 = Mem0[ds:0x3A0C<16>:word16] - 1<16>
	Mem0[ds:0x3A0C<16>:word16] = v13
	SZO = cond(v13)
	ch = ch | 8<8>
	SZ = cond(ch)
	O = false
	C = false
	// succ:  l3CEE_2E40
l3CEE_2E40:
	v16 = Mem0[ds:0x3A0A<16>:word16] + 1<16>
	Mem0[ds:0x3A0A<16>:word16] = v16
	SZO = cond(v16)
	ah = ah ^ ah
	SZ = cond(ah)
	O = false
	C = false
	return
	// succ:  fn3CEE_2E23_exit
l3CEE_2E47:
	ch = ch | 0x20<8>
	SZ = cond(ch)
	O = false
	C = false
	goto l3CEE_2E40
	// succ:  l3CEE_2E40
l3CEE_2E4C:
	SZP = cond(ch & 0x10<8>)
	O = false
	C = false
	branch Test(NE,Z) l3CEE_2E5A
	goto l3CEE_2E51
	// succ:  l3CEE_2E51 l3CEE_2E4F_thunk_fn3CEE_2E5A
l3CEE_2E4F_thunk_fn3CEE_2E5A:
	call fn3CEE_2E5A (retsize: 0;)
	return
	// succ:  fn3CEE_2E23_exit
l3CEE_2E51:
	v19 = Mem0[ds:0x3A08<16>:word16] + 1<16>
	Mem0[ds:0x3A08<16>:word16] = v19
	SZO = cond(v19)
	ch = ch | 0x10<8>
	SZ = cond(ch)
	O = false
	C = false
	goto l3CEE_2E23
	// succ:  l3CEE_2E23
fn3CEE_2E23_exit:


// fn3CEE_2E5A
// Return size: 0
define fn3CEE_2E5A
fn3CEE_2E5A_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_2E5A
l3CEE_2E5A:
	si = si - 1<16>
	SZO = cond(si)
	// succ:  l3CEE_2E5B
l3CEE_2E5B:
	C = true
	return
	// succ:  fn3CEE_2E5A_exit
fn3CEE_2E5A_exit:


// fn3CEE_2E5D
// Return size: 2
define fn3CEE_2E5D
fn3CEE_2E5D_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_2E5D
l3CEE_2E5D:
	SCZO = cond(si - Mem0[ds:0x3A06<16>:word16])
	branch Test(GE,SO) l3CEE_2E86
	// succ:  l3CEE_2E63 l3CEE_2E86
l3CEE_2E63:
	al = Mem0[ds:si:byte]
	si = si + 1<i16>
	SCZO = cond(Mem0[ds:0x3A00<16>:byte] - 0<8>)
	branch Test(EQ,Z) l3CEE_2E7B
	// succ:  l3CEE_2E6B l3CEE_2E7B
l3CEE_2E6B:
	SCZO = cond(al - 0x20<8>)
	branch Test(EQ,Z) l3CEE_2E5D
	// succ:  l3CEE_2E6F l3CEE_2E5D
l3CEE_2E6F:
	SCZO = cond(al - 9<8>)
	branch Test(EQ,Z) l3CEE_2E5D
	// succ:  l3CEE_2E73 l3CEE_2E5D
l3CEE_2E73:
	SCZO = cond(al - 0xA<8>)
	branch Test(EQ,Z) l3CEE_2E5D
	// succ:  l3CEE_2E77 l3CEE_2E5D
l3CEE_2E77:
	SCZO = cond(al - 0xD<8>)
	branch Test(EQ,Z) l3CEE_2E5D
	// succ:  l3CEE_2E7B l3CEE_2E5D
l3CEE_2E7B:
	SCZO = cond(al - 0x61<8>)
	branch Test(ULT,C) l3CEE_2E85
	// succ:  l3CEE_2E7F l3CEE_2E85
l3CEE_2E7F:
	SCZO = cond(al - 0x7A<8>)
	branch Test(UGT,CZ) l3CEE_2E85
	// succ:  l3CEE_2E83 l3CEE_2E85
l3CEE_2E83:
	al = al & 0x5F<8>
	SZ = cond(al)
	O = false
	C = false
	// succ:  l3CEE_2E85
l3CEE_2E85:
	return
	// succ:  fn3CEE_2E5D_exit
l3CEE_2E86:
	al = al ^ al
	SZ = cond(al)
	O = false
	C = false
	return
	// succ:  fn3CEE_2E5D_exit
fn3CEE_2E5D_exit:


// fn3CEE_2E89
// Return size: 2
define fn3CEE_2E89
fn3CEE_2E89_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_2E89
l3CEE_2E89:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	ax = Mem0[ds:si:word16]
	si = si + 2<i16>
	v9 = dx
	dx = ax
	ax = v9
	ax = Mem0[ds:si:word16]
	si = si + 2<i16>
	v11 = cx
	cx = ax
	ax = v11
	ax = Mem0[ds:si:word16]
	si = si + 2<i16>
	v13 = bp
	bp = ax
	ax = v13
	ax = Mem0[ds:si:word16]
	si = si + 2<i16>
	di = ax
	ax = ax | bp
	SZ = cond(ax)
	O = false
	C = false
	ax = ax | cx
	SZ = cond(ax)
	O = false
	C = false
	ax = ax | dx
	SZ = cond(ax)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_2EE4
	// succ:  l3CEE_2E9B l3CEE_2EE4
l3CEE_2E9B:
	ax = Mem0[ds:si:word16]
	si = si + 2<i16>
	ax = ax + 0x3FE<16>
	SCZO = cond(ax)
	branch Test(SG,S) l3CEE_2EDF
	// succ:  l3CEE_2EA1 l3CEE_2EDF
l3CEE_2EA1:
	di = di << 1<16>
	SCZO = cond(di)
	ax = ax >>u 1<16>
	SCZO = cond(ax)
	v21 = (di & 1<16> << 1<8>) != 0<16>
	di = __rcr<word16,byte>(di, 1<8>, C)
	C = v21
	bx = 5<16>
	// succ:  l3CEE_2EAA
l3CEE_2EAA:
	dx = dx << 1<16>
	SCZO = cond(dx)
	v23 = (cx & 1<16> << 0x10<8> - 1<8>) != 0<16>
	cx = __rcl<word16,byte>(cx, 1<8>, C)
	C = v23
	v24 = (bp & 1<16> << 0x10<8> - 1<8>) != 0<16>
	bp = __rcl<word16,byte>(bp, 1<8>, C)
	C = v24
	v25 = (di & 1<16> << 0x10<8> - 1<8>) != 0<16>
	di = __rcl<word16,byte>(di, 1<8>, C)
	C = v25
	v26 = (ax & 1<16> << 0x10<8> - 1<8>) != 0<16>
	ax = __rcl<word16,byte>(ax, 1<8>, C)
	C = v26
	v27 = (bh & 1<8> << 8<8> - 1<8>) != 0<8>
	bh = __rcl<byte,byte>(bh, 1<8>, C)
	C = v27
	bl = bl - 1<8>
	SZO = cond(bl)
	branch Test(NE,Z) l3CEE_2EAA
	// succ:  l3CEE_2EBA l3CEE_2EAA
l3CEE_2EBA:
	bx = bx + 1<16>
	SZO = cond(bx)
	bl = bl & cl
	SZ = cond(bl)
	O = false
	C = false
	dl = dl | bl
	SZ = cond(dl)
	O = false
	C = false
	si = si ^ si
	SZ = cond(si)
	O = false
	C = false
	SCZO = cond(dx - 0x8001<16>)
	C = !C
	cx = cx + si + C
	SCZO = cond(cx)
	bp = bp + si + C
	SCZO = cond(bp)
	di = di + si + C
	SCZO = cond(di)
	ax = ax + si + C
	SCZO = cond(ax)
	bh = bh + 0<8> + C
	SCZO = cond(bh)
	SZP = cond(ax & 0xFFF0<16>)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_2EE4
	// succ:  l3CEE_2ED6 l3CEE_2EE4
l3CEE_2ED6:
	SCZO = cond(ax - 0x7FF0<16>)
	C = !C
	bh = bh + 0<8> + C
	SCZO = cond(bh)
	goto l3CEE_2EEE
	// succ:  l3CEE_2EEE
l3CEE_2EDF:
	v34 = Mem0[ds:0x3A22<16>:byte] | 1<8>
	Mem0[ds:0x3A22<16>:byte] = v34
	SZ = cond(Mem0[ds:0x3A22<16>:byte])
	O = false
	C = false
	// succ:  l3CEE_2EE4
l3CEE_2EE4:
	ax = ax ^ ax
	SZ = cond(ax)
	O = false
	C = false
	bx = ax
	cx = ax
	bp = ax
	di = ax
	// succ:  l3CEE_2EEE
l3CEE_2EEE:
	si = di
	di = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	Mem0[ds:di:word16] = cx
	Mem0[ds:di + 2<i16>:word16] = bp
	Mem0[ds:di + 4<i16>:word16] = si
	Mem0[ds:di + 6<i16>:word16] = ax
	bh = bh | bh
	SZ = cond(bh)
	O = false
	C = false
	return
	// succ:  fn3CEE_2E89_exit
fn3CEE_2E89_exit:


// fn3CEE_2EFF
// Return size: 2
define fn3CEE_2EFF
fn3CEE_2EFF_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_2EFF
l3CEE_2EFF:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	ah = Mem0[ds:si + 9<i16>:byte]
	al = Mem0[0x3CEE<16>:bx + 9<i16>:byte]
	ax = ax & 0x8080<16>
	SZ = cond(ax)
	O = false
	C = false
	SCZO = cond(al - ah)
	branch Test(NE,Z) l3CEE_2F25
	// succ:  l3CEE_2F0F l3CEE_2F25
l3CEE_2F0F:
	si = si + 0xA<16>
	SCZO = cond(si)
	bx = bx + 0xA<16>
	SCZO = cond(bx)
	cx = 5<16>
	// succ:  l3CEE_2F18
l3CEE_2F18:
	si = si - 2<16>
	SCZO = cond(si)
	bx = bx - 2<16>
	SCZO = cond(bx)
	ax = Mem0[ds:si:word16]
	SCZO = cond(ax - Mem0[0x3CEE<16>:bx:word16])
	cx = cx - 1<16>
	branch Test(EQ,Z) && cx != 0<16> l3CEE_2F18
	// succ:  l3CEE_2F25 l3CEE_2F18
l3CEE_2F25:
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn3CEE_2EFF_exit
fn3CEE_2EFF_exit:


// fn3CEE_2F28
// Return size: 2
define fn3CEE_2F28
fn3CEE_2F28_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_2F28
l3CEE_2F28:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	ax = Mem0[ds:si:word16]
	si = si + 2<i16>
	v8 = bp
	bp = ax
	ax = v8
	ax = Mem0[ds:si:word16]
	si = si + 2<i16>
	v10 = dx
	dx = ax
	ax = v10
	ax = Mem0[ds:si:word16]
	si = si + 2<i16>
	v12 = bx
	bx = ax
	ax = v12
	ax = Mem0[ds:si:word16]
	si = si + 2<i16>
	di = di ^ di
	SZ = cond(di)
	O = false
	C = false
	cx = 5<16>
	// succ:  l3CEE_2F35
l3CEE_2F35:
	ax = ax >>u 1<16>
	SCZO = cond(ax)
	v20 = (bx & 1<16> << 1<8>) != 0<16>
	bx = __rcr<word16,byte>(bx, 1<8>, C)
	C = v20
	v21 = (dx & 1<16> << 1<8>) != 0<16>
	dx = __rcr<word16,byte>(dx, 1<8>, C)
	C = v21
	v22 = (bp & 1<16> << 1<8>) != 0<16>
	bp = __rcr<word16,byte>(bp, 1<8>, C)
	C = v22
	v23 = (di & 1<16> << 1<8>) != 0<16>
	di = __rcr<word16,byte>(di, 1<8>, C)
	C = v23
	cx = cx - 1<16>
	branch cx != 0<16> l3CEE_2F35
	// succ:  l3CEE_2F41 l3CEE_2F35
l3CEE_2F41:
	bx = bx << 1<16>
	SCZO = cond(bx)
	v24 = (ax & 1<16> << 0x10<8> - 1<8>) != 0<16>
	ax = __rcl<word16,byte>(ax, 1<8>, C)
	C = v24
	SCZO = cond(ax - 1<16>)
	C = !C
	v25 = (bx & 1<16> << 1<8>) != 0<16>
	bx = __rcr<word16,byte>(bx, 1<8>, C)
	C = v25
	ax = ax - 0x3FE<16>
	SCZO = cond(ax)
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	Mem0[ds:si:word16] = di
	Mem0[ds:si + 2<i16>:word16] = bp
	Mem0[ds:si + 4<i16>:word16] = dx
	Mem0[ds:si + 6<i16>:word16] = bx
	Mem0[ds:si + 8<i16>:word16] = ax
	return
	// succ:  fn3CEE_2F28_exit
fn3CEE_2F28_exit:


// fn3CEE_2F84
// Return size: 2
define fn3CEE_2F84
fn3CEE_2F84_entry:
	sp = fp
	Top = 0<i8>
	goto l3CEE_2F84
	// succ:  l3CEE_2F84
l3CEE_2F72:
	si = 0x3A30<16>
	Mem0[ds:si:byte] = 1<8>
	Mem0[ds:si + 1<i16>:byte] = 0x30<8>
	ax = ax ^ ax
	SZ = cond(ax)
	O = false
	C = false
	dx = ax
	ax = ax + 1<16>
	SZO = cond(ax)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	es = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	return
	// succ:  fn3CEE_2F84_exit
l3CEE_2F84:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = es
	ax = ds
	es = ax
	D = false
	di = 0x3A24<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	cx = 4<16>
	size = cx *u32 2<16>
	memcpy(es:di, ds:si, size)
	cx = 0<16>
	si = si + SLICE(size, word16, 0)
	di = di + SLICE(size, word16, 0)
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	cx = Mem0[ds:si + 6<i16>:word16]
	v13 = Mem0[ds:si + 7<i16>:byte] & 0x7F<8>
	Mem0[ds:si + 7<i16>:byte] = v13
	SZ = cond(Mem0[ds:si + 7<i16>:byte])
	O = false
	C = false
	bl = 0x20<8>
	SZP = cond(cx & 0x7FF0<16>)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_2FA9
	// succ:  l3CEE_2FA3 l3CEE_2FA9
l3CEE_2FA3:
	cx = cx | cx
	SZ = cond(cx)
	O = false
	C = false
	branch Test(NS,S) l3CEE_2FA9
	// succ:  l3CEE_2FA7 l3CEE_2FA9
l3CEE_2FA7:
	bl = 0x2D<8>
	// succ:  l3CEE_2FA9
l3CEE_2FA9:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bx
	call fn3CEE_2F28 (retsize: 2;)
	di = di ^ di
	SZ = cond(di)
	O = false
	C = false
	si = 0x3A2B<16>
	al = Mem0[ds:si:byte]
	si = si + 1<i16>
	SZP = cond(al & 0x80<8>)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_2F72
	// succ:  l3CEE_2FB7 l3CEE_2F72
l3CEE_2FB7:
	bh = al
	ax = Mem0[ds:si:word16]
	si = si + 2<i16>
	ax = ax + 0x3FFE<16>
	SCZO = cond(ax)
	cx = ax
	dx = 0x4D10<16>
	dx_ax = dx *u32 ax
	SCZO = cond(dx_ax)
	v27 = cx
	cx = ax
	ax = v27
	al = 0x4D<8>
	ax = ah *u16 al
	SCZO = cond(ax)
	cx = cx + ax
	SCZO = cond(cx)
	dx = dx + di + C
	SCZO = cond(dx)
	al = 0x9A<8>
	ax = bh *u16 al
	SCZO = cond(ax)
	cx = cx + ax
	SCZO = cond(cx)
	di = di + dx + C
	SCZO = cond(di)
	cx = cx - 0x12F4<16>
	SCZO = cond(cx)
	di = di - 0x1343<16> - C
	SCZO = cond(di)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	C = di != 0<16>
	di = -di
	SZO = cond(di)
	si = 0x3A24<16>
	call fn3CEE_2BC8 (retsize: 2;)
	bx = 0x2F5E<16>
	call fn3CEE_2EFF (retsize: 2;)
	di = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	branch Test(ULT,C) l3CEE_2FF8
	// succ:  l3CEE_2FEF l3CEE_2FF8
l3CEE_2FEF:
	di = di + 1<16>
	SZO = cond(di)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	bx = 0x2F68<16>
	call fn3CEE_2A62 (retsize: 2;)
	di = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	// succ:  l3CEE_2FF8
l3CEE_2FF8:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	ax = Mem0[ds:si:word16]
	si = si + 2<i16>
	v30 = di
	di = ax
	ax = v30
	ax = Mem0[ds:si:word16]
	si = si + 2<i16>
	v31 = bp
	bp = ax
	ax = v31
	ax = Mem0[ds:si:word16]
	si = si + 2<i16>
	v33 = dx
	dx = ax
	ax = v33
	ax = Mem0[ds:si:word16]
	si = si + 2<i16>
	v34 = bx
	bx = ax
	ax = v34
	ax = Mem0[ds:si:word16]
	si = si + 2<i16>
	v35 = cx
	cx = ax
	ax = v35
	C = cx != 0<16>
	cx = -cx
	SZO = cond(cx)
	si = di
	ax = ax ^ ax
	SZ = cond(ax)
	O = false
	C = false
	branch cx == 0<16> l3CEE_3017
	// succ:  l3CEE_300B l3CEE_3017
l3CEE_300B:
	bx = bx >>u 1<16>
	SCZO = cond(bx)
	v36 = (dx & 1<16> << 1<8>) != 0<16>
	dx = __rcr<word16,byte>(dx, 1<8>, C)
	C = v36
	v37 = (bp & 1<16> << 1<8>) != 0<16>
	bp = __rcr<word16,byte>(bp, 1<8>, C)
	C = v37
	v38 = (si & 1<16> << 1<8>) != 0<16>
	si = __rcr<word16,byte>(si, 1<8>, C)
	C = v38
	v39 = (ah & 1<8> << 1<8>) != 0<8>
	ah = __rcr<byte,byte>(ah, 1<8>, C)
	C = v39
	cx = cx - 1<16>
	branch cx != 0<16> l3CEE_300B
	// succ:  l3CEE_3017 l3CEE_300B
l3CEE_3017:
	ah = ah + 0x56<8>
	SCZO = cond(ah)
	si = si + 0x39A<16> + C
	SCZO = cond(si)
	bp = bp + cx + C
	SCZO = cond(bp)
	dx = dx + cx + C
	SCZO = cond(dx)
	bx = bx + cx + C
	SCZO = cond(bx)
	di = 0x3A31<16>
	cx = 0x10<16>
	// succ:  l3CEE_302A
l3CEE_302A:
	al = al ^ al
	SZ = cond(al)
	O = false
	C = false
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = cx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ah = ah << 1<8>
	SCZO = cond(ah)
	v40 = (si & 1<16> << 0x10<8> - 1<8>) != 0<16>
	si = __rcl<word16,byte>(si, 1<8>, C)
	C = v40
	v41 = (bp & 1<16> << 0x10<8> - 1<8>) != 0<16>
	bp = __rcl<word16,byte>(bp, 1<8>, C)
	C = v41
	v42 = (dx & 1<16> << 0x10<8> - 1<8>) != 0<16>
	dx = __rcl<word16,byte>(dx, 1<8>, C)
	C = v42
	v43 = (bx & 1<16> << 0x10<8> - 1<8>) != 0<16>
	bx = __rcl<word16,byte>(bx, 1<8>, C)
	C = v43
	v44 = (al & 1<8> << 8<8> - 1<8>) != 0<8>
	al = __rcl<byte,byte>(al, 1<8>, C)
	C = v44
	ah = ah << 1<8>
	SCZO = cond(ah)
	v45 = (si & 1<16> << 0x10<8> - 1<8>) != 0<16>
	si = __rcl<word16,byte>(si, 1<8>, C)
	C = v45
	v46 = (bp & 1<16> << 0x10<8> - 1<8>) != 0<16>
	bp = __rcl<word16,byte>(bp, 1<8>, C)
	C = v46
	v47 = (dx & 1<16> << 0x10<8> - 1<8>) != 0<16>
	dx = __rcl<word16,byte>(dx, 1<8>, C)
	C = v47
	v48 = (bx & 1<16> << 0x10<8> - 1<8>) != 0<16>
	bx = __rcl<word16,byte>(bx, 1<8>, C)
	C = v48
	v49 = (al & 1<8> << 8<8> - 1<8>) != 0<8>
	al = __rcl<byte,byte>(al, 1<8>, C)
	C = v49
	cx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	ah = ah + ch
	SCZO = cond(ah)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	si = si + cx + C
	SCZO = cond(si)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bp = bp + cx + C
	SCZO = cond(bp)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	dx = dx + cx + C
	SCZO = cond(dx)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bx = bx + cx + C
	SCZO = cond(bx)
	al = al + 0<8> + C
	SCZO = cond(al)
	ah = ah << 1<8>
	SCZO = cond(ah)
	v51 = (si & 1<16> << 0x10<8> - 1<8>) != 0<16>
	si = __rcl<word16,byte>(si, 1<8>, C)
	C = v51
	v52 = (bp & 1<16> << 0x10<8> - 1<8>) != 0<16>
	bp = __rcl<word16,byte>(bp, 1<8>, C)
	C = v52
	v53 = (dx & 1<16> << 0x10<8> - 1<8>) != 0<16>
	dx = __rcl<word16,byte>(dx, 1<8>, C)
	C = v53
	v54 = (bx & 1<16> << 0x10<8> - 1<8>) != 0<16>
	bx = __rcl<word16,byte>(bx, 1<8>, C)
	C = v54
	v55 = (al & 1<8> << 8<8> - 1<8>) != 0<8>
	al = __rcl<byte,byte>(al, 1<8>, C)
	C = v55
	al = al + 0x30<8>
	SCZO = cond(al)
	Mem0[es:di:byte] = al
	di = di + 1<i16>
	cx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	cx = cx - 1<16>
	branch cx != 0<16> l3CEE_302A
	// succ:  l3CEE_306D l3CEE_302A
l3CEE_306D:
	di = di - 1<16>
	SZO = cond(di)
	cx = cx - 1<16>
	SZO = cond(cx)
	al = 0x30<8>
	D = true
	// succ:  l3CEE_3072
l3CEE_3072:
	branch cx == 0<16> l3CEE_3074
	// succ:  l3CEE_3072_1 l3CEE_3074
l3CEE_3072_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di - 1<i16>
	cx = cx - 1<16>
	branch Test(NE,Z) l3CEE_3072
	// succ:  l3CEE_3074 l3CEE_3072
l3CEE_3074:
	D = false
	cx = cx + 0x12<16>
	SCZO = cond(cx)
	si = 0x3A30<16>
	Mem0[ds:si:byte] = cl
	ax = 1<16>
	dx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	es = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	return
	// succ:  fn3CEE_2F84_exit
fn3CEE_2F84_exit:


// fn3CEE_3182
// Return size: 4
define fn3CEE_3182
fn3CEE_3182_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_3182
l3CEE_3182:
	cl = Mem0[ds:bx:byte]
	ch = ch - ch
	SCZO = cond(ch)
	bx = bx + 1<16>
	SZO = cond(bx)
	dx = bx
	bx = 2<16>
	ah = 0x40<8>
	C = msdos_write_file(bx, cx, ds_dx, out ax)
	return
	// succ:  fn3CEE_3182_exit
fn3CEE_3182_exit:


// fn3CEE_3191
// Return size: 4
define fn3CEE_3191
fn3CEE_3191_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_3191
l3CEE_3191:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	v6 = si
	si = ax
	ax = v6
	v8 = dx
	dx = ax
	ax = v8
	SZP = cond(ax & ax)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_319A
	// succ:  l3CEE_3198 l3CEE_319A
l3CEE_3198:
	dx_ax = bx *u32 ax
	SCZO = cond(dx_ax)
	// succ:  l3CEE_319A
l3CEE_319A:
	v17 = cx
	cx = ax
	ax = v17
	SZP = cond(ax & ax)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_31A3
	// succ:  l3CEE_319F l3CEE_31A3
l3CEE_319F:
	dx_ax = si *u32 ax
	SCZO = cond(dx_ax)
	cx = cx + ax
	SCZO = cond(cx)
	// succ:  l3CEE_31A3
l3CEE_31A3:
	v19 = si
	si = ax
	ax = v19
	dx_ax = bx *u32 ax
	SCZO = cond(dx_ax)
	dx = dx + cx
	SCZO = cond(dx)
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn3CEE_3191_exit
fn3CEE_3191_exit:


