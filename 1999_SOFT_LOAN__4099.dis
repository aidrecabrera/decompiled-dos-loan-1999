// fn3CEE_3ABC
// Return size: 4
define fn3CEE_3ABC
fn3CEE_3ABC_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_3ABC
l3CEE_3ABC:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 4<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	Mem0[ss:bp - 2<i16>:word16] = 0<16>
	goto l3CEE_3AD5
	// succ:  l3CEE_3AD5
l3CEE_3ACA:
	al = Mem0[ss:bp + 10<i16>:byte]
	SCZO = cond(Mem0[ss:bp - 4<i16>:byte] - al)
	branch Test(EQ,Z) l3CEE_3AE5
	// succ:  l3CEE_3AD2 l3CEE_3AE5
l3CEE_3AD2:
	v17 = Mem0[ss:bp - 2<i16>:word16] + 1<16>
	Mem0[ss:bp - 2<i16>:word16] = v17
	SZO = cond(v17)
	// succ:  l3CEE_3AD5
l3CEE_3AD5:
	bx = Mem0[ss:bp - 2<i16>:word16]
	es_si = Mem0[ss:bp + 6<i16>:segptr32]
	al = Mem0[es:bx + si:byte]
	Mem0[ss:bp - 4<i16>:byte] = al
	al = al | al
	SZ = cond(al)
	O = false
	C = false
	branch Test(NE,Z) l3CEE_3ACA
	// succ:  l3CEE_3AE5 l3CEE_3ACA
l3CEE_3AE5:
	ax = Mem0[ss:bp - 2<i16>:word16]
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn3CEE_3ABC_exit
fn3CEE_3ABC_exit:


// fn3CEE_3AEE
// Return size: 4
define fn3CEE_3AEE
fn3CEE_3AEE_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_3AEE
l3CEE_3AEE:
	es_bx = Mem0[ds:0x130A<16>:segptr32]
	ax = Mem0[es:bx:word16]
	ax = ax | Mem0[es:bx + 2<i16>:word16]
	SZ = cond(ax)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_3B08
	// succ:  l3CEE_3AFB l3CEE_3B08
l3CEE_3AFB:
	es_bx = Mem0[ds:bx + 0<16>:segptr32]
	ax = Mem0[es:bx + 40<i16>:word16]
	dx = Mem0[es:bx + 42<i16>:word16]
	return
	// succ:  fn3CEE_3AEE_exit
l3CEE_3B08:
	ax = ax - ax
	SCZO = cond(ax)
	dx_ax = CONVERT(ax, int16, int32)
	return
	// succ:  fn3CEE_3AEE_exit
fn3CEE_3AEE_exit:


// fn3CEE_3B0C
// Return size: 4
define fn3CEE_3B0C
fn3CEE_3B0C_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_3B0C
l3CEE_3B0C:
	es_bx = Mem0[ds:0x130A<16>:segptr32]
	ax = Mem0[es:bx:word16]
	ax = ax | Mem0[es:bx + 2<i16>:word16]
	SZ = cond(ax)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_3B26
	// succ:  l3CEE_3B19 l3CEE_3B26
l3CEE_3B19:
	es_bx = Mem0[ds:bx + 0<16>:segptr32]
	ax = Mem0[es:bx + 44<i16>:word16]
	dx = Mem0[es:bx + 46<i16>:word16]
	return
	// succ:  fn3CEE_3B0C_exit
l3CEE_3B26:
	ax = ax - ax
	SCZO = cond(ax)
	dx_ax = CONVERT(ax, int16, int32)
	return
	// succ:  fn3CEE_3B0C_exit
fn3CEE_3B0C_exit:


// fn3CEE_3B2A
// Return size: 4
define fn3CEE_3B2A
fn3CEE_3B2A_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_3B2A
l3CEE_3B2A:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = Mem0[es:bx + 38<i16>:word16]
	Mem0[ss:bp - 2<i16>:word16] = ax
	call fn3CEE_3CD2 (retsize: 4;)
	ax = ax | ax
	SZ = cond(ax)
	O = false
	C = false
	branch Test(NE,Z) l3CEE_3B7C
	// succ:  l3CEE_3B44 l3CEE_3B7C
l3CEE_3B44:
	goto l3CEE_3B6F
	// succ:  l3CEE_3B6F
l3CEE_3B46:
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = Mem0[es:bx + 60<i16>:word16]
	dx = Mem0[es:bx + 62<i16>:word16]
	bx = Mem0[ss:bp - 2<i16>:word16]
	bx = bx << 1<16>
	SCZO = cond(bx)
	bx = bx << 1<16>
	SCZO = cond(bx)
	si = Mem0[ds:0x3A86<16>:word16]
	es_si = Mem0[es:si + 82<i16>:segptr32]
	SCZO = cond(Mem0[es:bx + si:word16] - ax)
	branch Test(NE,Z) l3CEE_3B6C
	// succ:  l3CEE_3B66 l3CEE_3B6C
l3CEE_3B66:
	SCZO = cond(Mem0[es:bx + 2<i16> + si:word16] - dx)
	branch Test(EQ,Z) l3CEE_3B7C
	// succ:  l3CEE_3B6C l3CEE_3B7C
l3CEE_3B6C:
	v20 = Mem0[ss:bp - 2<i16>:word16] + 1<16>
	Mem0[ss:bp - 2<i16>:word16] = v20
	SZO = cond(v20)
	// succ:  l3CEE_3B6F
l3CEE_3B6F:
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = Mem0[ss:bp - 2<i16>:word16]
	SCZO = cond(Mem0[es:bx + 40<i16>:word16] - ax)
	branch Test(GE,SO) l3CEE_3B46
	// succ:  l3CEE_3B7C l3CEE_3B46
l3CEE_3B7C:
	ax = Mem0[ss:bp - 2<i16>:word16]
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn3CEE_3B2A_exit
fn3CEE_3B2A_exit:


// fn3CEE_3B84
// Return size: 4
define fn3CEE_3B84
fn3CEE_3B84_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_3B84
l3CEE_3B84:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	ax = Mem0[ss:bp + 6<i16>:word16]
	ax = ax + 1<16>
	SZO = cond(ax)
	Mem0[ss:bp - 2<i16>:word16] = ax
	goto l3CEE_3B97
	// succ:  l3CEE_3B97
l3CEE_3B94:
	v17 = Mem0[ss:bp - 2<i16>:word16] + 1<16>
	Mem0[ss:bp - 2<i16>:word16] = v17
	SZO = cond(v17)
	// succ:  l3CEE_3B97
l3CEE_3B97:
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = Mem0[es:bx + 4<i16>:word16]
	SCZO = cond(Mem0[ss:bp - 2<i16>:word16] - ax)
	branch Test(UGT,CZ) l3CEE_3BB7
	// succ:  l3CEE_3BA4 l3CEE_3BB7
l3CEE_3BA4:
	es_bx = Mem0[es:bx + 6<i16>:segptr32]
	ax = 0x42<16>
	dx_ax = Mem0[ss:bp - 2<i16>:word16] *s32 ax
	SCZO = cond(dx_ax)
	si = ax
	SCZO = cond(Mem0[es:bx - 8<i16> + si:word16] - 0<16>)
	branch Test(EQ,Z) l3CEE_3B94
	// succ:  l3CEE_3BB7 l3CEE_3B94
l3CEE_3BB7:
	ax = Mem0[ss:bp - 2<i16>:word16]
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn3CEE_3B84_exit
fn3CEE_3B84_exit:


// fn3CEE_3BC0
// Return size: 4
define fn3CEE_3BC0
fn3CEE_3BC0_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_3BC0
l3CEE_3BC0:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	ax = Mem0[ss:bp + 6<i16>:word16]
	ax = ax - 1<16>
	SZO = cond(ax)
	Mem0[ss:bp - 2<i16>:word16] = ax
	goto l3CEE_3BD3
	// succ:  l3CEE_3BD3
l3CEE_3BD0:
	v16 = Mem0[ss:bp - 2<i16>:word16] - 1<16>
	Mem0[ss:bp - 2<i16>:word16] = v16
	SZO = cond(v16)
	// succ:  l3CEE_3BD3
l3CEE_3BD3:
	SCZO = cond(Mem0[ss:bp - 2<i16>:word16] - 0<16>)
	branch Test(EQ,Z) l3CEE_3BF0
	// succ:  l3CEE_3BD9 l3CEE_3BF0
l3CEE_3BD9:
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	es_bx = Mem0[es:bx + 6<i16>:segptr32]
	ax = 0x42<16>
	dx_ax = Mem0[ss:bp - 2<i16>:word16] *s32 ax
	SCZO = cond(dx_ax)
	si = ax
	SCZO = cond(Mem0[es:bx - 8<i16> + si:word16] - 0<16>)
	branch Test(EQ,Z) l3CEE_3BD0
	// succ:  l3CEE_3BF0 l3CEE_3BD0
l3CEE_3BF0:
	ax = Mem0[ss:bp - 2<i16>:word16]
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn3CEE_3BC0_exit
fn3CEE_3BC0_exit:


// fn3CEE_3BF8
// Return size: 4
define fn3CEE_3BF8
fn3CEE_3BF8_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_3BF8
l3CEE_3BF8:
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	SCZO = cond(Mem0[es:bx + 86<i16>:word16] - 0<16>)
	branch Test(NE,Z) l3CEE_3C22
	// succ:  l3CEE_3C03 l3CEE_3C22
l3CEE_3C03:
	ax = 1<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 5<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn3431_06CC (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = ax | ax
	SZ = cond(ax)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_3C22
	// succ:  l3CEE_3C17 l3CEE_3C22
l3CEE_3C17:
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = Mem0[ds:0xF17<16>:word16]
	Mem0[es:bx + 86<i16>:word16] = ax
	// succ:  l3CEE_3C22
l3CEE_3C22:
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = Mem0[es:bx + 86<i16>:word16]
	return
	// succ:  fn3CEE_3BF8_exit
fn3CEE_3BF8_exit:


// fn3CEE_3C50
// Return size: 4
define fn3CEE_3C50
fn3CEE_3C50_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_3C50
l3CEE_3C50:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	Mem0[ds:0x12AA<16>:word16] = 2<16>
	Mem0[ds:0x12AC<16>:word16] = 0xA<16>
	ax = Mem0[ss:bp + 6<i16>:word16]
	dx_ax = CONVERT(ax, int16, int32)
	Mem0[ds:0x12B2<16>:word16] = ax
	Mem0[ds:0x12B4<16>:word16] = dx
	call fn2644_27D4 (retsize: 4;)
	Mem0[ds:0x12AA<16>:word16] = 0<16>
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn3CEE_3C50_exit
fn3CEE_3C50_exit:


// fn3CEE_3C78
// Return size: 4
define fn3CEE_3C78
fn3CEE_3C78_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_3C78
l3CEE_3C78:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	v6 = Mem0[ss:bp + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v6
	v7 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v7
	es_bx = Mem0[ds:0x130A<16>:segptr32]
	v12 = Mem0[es:bx + 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v12
	v13 = Mem0[es:bx:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v13
	call fn2644_2B40 (retsize: 4;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn3CEE_3C78_exit
fn3CEE_3C78_exit:


// fn3CEE_3C96
// Return size: 4
define fn3CEE_3C96
fn3CEE_3C96_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_3C96
l3CEE_3C96:
	call fn3CEE_3CD2 (retsize: 4;)
	ax = ax | ax
	SZ = cond(ax)
	O = false
	C = false
	branch Test(NE,Z) l3CEE_3CB4
	// succ:  l3CEE_3C9E l3CEE_3CB4
l3CEE_3C9E:
	es_bx = Mem0[ds:0x130A<16>:segptr32]
	ax = Mem0[es:bx:word16]
	ax = ax | Mem0[es:bx + 2<i16>:word16]
	SZ = cond(ax)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_3CB4
	// succ:  l3CEE_3CAB l3CEE_3CB4
l3CEE_3CAB:
	es_bx = Mem0[ds:bx + 0<16>:segptr32]
	ax = Mem0[es:bx + 72<i16>:word16]
	return
	// succ:  fn3CEE_3C96_exit
l3CEE_3CB4:
	ax = 1<16>
	return
	// succ:  fn3CEE_3C96_exit
fn3CEE_3C96_exit:


// fn3CEE_3CB8
// Return size: 4
define fn3CEE_3CB8
fn3CEE_3CB8_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_3CB8
l3CEE_3CB8:
	es_bx = Mem0[ds:0x130A<16>:segptr32]
	ax = Mem0[es:bx:word16]
	ax = ax | Mem0[es:bx + 2<i16>:word16]
	SZ = cond(ax)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_3CCE
	// succ:  l3CEE_3CC5 l3CEE_3CCE
l3CEE_3CC5:
	es_bx = Mem0[ds:bx + 0<16>:segptr32]
	ax = Mem0[es:bx + 74<i16>:word16]
	return
	// succ:  fn3CEE_3CB8_exit
l3CEE_3CCE:
	ax = 1<16>
	return
	// succ:  fn3CEE_3CB8_exit
fn3CEE_3CB8_exit:


// fn3CEE_3CD2
// Return size: 4
define fn3CEE_3CD2
fn3CEE_3CD2_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_3CD2
l3CEE_3CD2:
	call fn3CEE_3B0C (retsize: 4;)
	dx = dx | ax
	SZ = cond(dx)
	O = false
	C = false
	branch Test(NE,Z) l3CEE_3CDE
	// succ:  l3CEE_3CDA l3CEE_3CDE
l3CEE_3CDA:
	ax = 1<16>
	return
	// succ:  fn3CEE_3CD2_exit
l3CEE_3CDE:
	ax = ax - ax
	SCZO = cond(ax)
	return
	// succ:  fn3CEE_3CD2_exit
fn3CEE_3CD2_exit:


// fn3CEE_3CE2
// Return size: 4
define fn3CEE_3CE2
fn3CEE_3CE2_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_3CE2
l3CEE_3CE2:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0xC<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = Mem0[es:bx + 20<i16>:word16]
	ax = ax - Mem0[es:bx + 16<i16>:word16]
	SCZO = cond(ax)
	ax = ax + 1<16>
	SZO = cond(ax)
	Mem0[ss:bp - 4<i16>:word16] = ax
	SCZO = cond(Mem0[ss:bp + 6<i16>:word16] - 0<16>)
	branch Test(EQ,Z) l3CEE_3D02
	// succ:  l3CEE_3CFF l3CEE_3D02
l3CEE_3CFF:
	goto l3CEE_3D9C
	// succ:  l3CEE_3D9C
l3CEE_3D02:
	es_bx = Mem0[es:bx + 6<i16>:segptr32]
	ax = es
	es_si = Mem0[ds:0x3A86<16>:segptr32]
	cx = ax
	ax = 0x42<16>
	dx_ax = Mem0[es:si + 64<i16>:word16] *s32 ax
	SCZO = cond(dx_ax)
	si = ax
	es = cx
	ax = Mem0[es:bx - 8<i16> + si:word16]
	Mem0[ss:bp - 2<i16>:word16] = ax
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	v18 = Mem0[es:bx + 64<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v18
	// succ:  l3CEE_3D28
l3CEE_3D28:
	call fn3CEE_3B84 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 6<i16>:word16] = ax
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	SCZO = cond(Mem0[es:bx + 2<i16>:word16] - ax)
	branch Test(LT,SO) l3CEE_3D89
	// succ:  l3CEE_3D3C l3CEE_3D89
l3CEE_3D3C:
	ax = 0x42<16>
	dx_ax = Mem0[ss:bp - 6<i16>:word16] *s32 ax
	SCZO = cond(dx_ax)
	ax = ax + Mem0[es:bx + 6<i16>:word16]
	SCZO = cond(ax)
	dx = Mem0[es:bx + 8<i16>:word16]
	Mem0[ss:bp - 12<i16>:word16] = ax
	Mem0[ss:bp - 10<i16>:word16] = dx
	es_bx = Mem0[ss:bp - 12<i16>:segptr32]
	v21 = Mem0[es:bx - 22<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v21
	v22 = Mem0[es:bx - 24<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v22
	call fn2017_03F5 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	es_bx = Mem0[ss:bp - 12<i16>:segptr32]
	cx = Mem0[es:bx - 8<i16>:word16]
	cx = cx + ax
	SCZO = cond(cx)
	v23 = Mem0[ss:bp - 2<i16>:word16] + cx
	Mem0[ss:bp - 2<i16>:word16] = v23
	SCZO = cond(v23)
	ax = Mem0[ss:bp - 4<i16>:word16]
	SCZO = cond(Mem0[ss:bp - 2<i16>:word16] - ax)
	branch Test(UGT,CZ) l3CEE_3D7C
	// succ:  l3CEE_3D77 l3CEE_3D7C
l3CEE_3D77:
	v25 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v25
	goto l3CEE_3D28
	// succ:  l3CEE_3D28
l3CEE_3D7C:
	v33 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v33
	call fn3CEE_3BC0 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 6<i16>:word16] = ax
	// succ:  l3CEE_3D89
l3CEE_3D89:
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = Mem0[es:bx + 2<i16>:word16]
	SCZO = cond(ax - Mem0[ss:bp - 6<i16>:word16])
	branch Test(GT,SZO) l3CEE_3D99
	// succ:  l3CEE_3D96 l3CEE_3D99
l3CEE_3D96:
	goto l3CEE_3E48
	// succ:  l3CEE_3E48
l3CEE_3D99:
	goto l3CEE_3E45
	// succ:  l3CEE_3E45
l3CEE_3D9C:
	es_bx = Mem0[es:bx + 6<i16>:segptr32]
	ax = es
	es_si = Mem0[ds:0x3A86<16>:segptr32]
	cx = ax
	ax = 0x42<16>
	dx_ax = Mem0[es:si + 66<i16>:word16] *s32 ax
	SCZO = cond(dx_ax)
	si = ax
	es = cx
	ax = Mem0[es:bx - 8<i16> + si:word16]
	Mem0[ss:bp - 2<i16>:word16] = ax
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	v26 = Mem0[es:bx + 66<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v26
	// succ:  l3CEE_3DC2
l3CEE_3DC2:
	call fn3CEE_3BC0 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 6<i16>:word16] = ax
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = Mem0[es:bx:word16]
	SCZO = cond(Mem0[ss:bp - 6<i16>:word16] - ax)
	branch Test(LT,SO) l3CEE_3E39
	// succ:  l3CEE_3DD8 l3CEE_3E39
l3CEE_3DD8:
	v27 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v27
	call fn3CEE_3B84 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	ax = ax - 1<16>
	SZO = cond(ax)
	Mem0[ss:bp - 8<i16>:word16] = ax
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	es_bx = Mem0[es:bx + 6<i16>:segptr32]
	ax = 0x42<16>
	dx_ax = Mem0[ss:bp - 8<i16>:word16] *s32 ax
	SCZO = cond(dx_ax)
	si = ax
	v28 = Mem0[es:bx + 44<i16> + si:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v28
	v29 = Mem0[es:bx + 42<i16> + si:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v29
	call fn2017_03F5 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	es_bx = Mem0[es:bx + 6<i16>:segptr32]
	cx = ax
	ax = 0x42<16>
	dx_ax = Mem0[ss:bp - 6<i16>:word16] *s32 ax
	SCZO = cond(dx_ax)
	si = ax
	cx = cx + Mem0[es:(bx - 8<i16>) + si:word16]
	SCZO = cond(cx)
	v30 = Mem0[ss:bp - 2<i16>:word16] + cx
	Mem0[ss:bp - 2<i16>:word16] = v30
	SCZO = cond(v30)
	ax = Mem0[ss:bp - 4<i16>:word16]
	SCZO = cond(Mem0[ss:bp - 2<i16>:word16] - ax)
	branch Test(UGT,CZ) l3CEE_3E2C
	// succ:  l3CEE_3E27 l3CEE_3E2C
l3CEE_3E27:
	v31 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v31
	goto l3CEE_3DC2
	// succ:  l3CEE_3DC2
l3CEE_3E2C:
	v32 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v32
	call fn3CEE_3B84 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 6<i16>:word16] = ax
	// succ:  l3CEE_3E39
l3CEE_3E39:
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = Mem0[es:bx:word16]
	SCZO = cond(ax - Mem0[ss:bp - 6<i16>:word16])
	branch Test(GE,SO) l3CEE_3E48
	// succ:  l3CEE_3E45 l3CEE_3E48
l3CEE_3E45:
	ax = Mem0[ss:bp - 6<i16>:word16]
	// succ:  l3CEE_3E48
l3CEE_3E48:
	Mem0[ss:bp - 6<i16>:word16] = ax
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn3CEE_3CE2_exit
fn3CEE_3CE2_exit:


// fn3CEE_3E50
// Return size: 4
define fn3CEE_3E50
fn3CEE_3E50_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_3E50
l3CEE_3E50:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 6<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	v8 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v8
	call fn3CEE_3CE2 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 2<i16>:word16] = ax
	SCZO = cond(Mem0[ss:bp + 6<i16>:word16] - 0<16>)
	branch Test(NE,Z) l3CEE_3E88
	// succ:  l3CEE_3E6A l3CEE_3E88
l3CEE_3E6A:
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	Mem0[es:bx + 66<i16>:word16] = ax
	ax = 1<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn3CEE_3CE2 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	Mem0[es:bx + 64<i16>:word16] = ax
	// succ:  l3CEE_3E85_thunk_fn3CEE_3E8B
l3CEE_3E85_thunk_fn3CEE_3E8B:
	call fn3CEE_3E8B (retsize: 0;)
	return
	// succ:  fn3CEE_3E50_exit
l3CEE_3E88:
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	// succ:  l3CEE_3E88_thunk_fn3CEE_3E8B
l3CEE_3E88_thunk_fn3CEE_3E8B:
	call fn3CEE_3E8B (retsize: 0;)
	return
	// succ:  fn3CEE_3E50_exit
fn3CEE_3E50_exit:


// fn3CEE_3E8B
// Return size: 0
define fn3CEE_3E8B
fn3CEE_3E8B_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_3E8B
l3CEE_3E8B:
	SCZO = cond(cl - Mem0[ss:(bp - 0x1BA<16>) + di:byte])
	Mem0[es:bx + 64<i16>:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn3CEE_3CE2 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	Mem0[es:bx + 66<i16>:word16] = ax
	goto l3CEE_3EA5_in_fn3CEE_3E8B
	// succ:  l3CEE_3EA5_in_fn3CEE_3E8B
l3CEE_3E8B:
	ax = Mem0[ss:bp - 2<i16>:word16]
	Mem0[es:bx + 64<i16>:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn3CEE_3CE2 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	Mem0[es:bx + 66<i16>:word16] = ax
	// succ:  l3CEE_3EA5
l3CEE_3EA5:
	ax = 0x42<16>
	dx_ax = Mem0[es:bx + 66<i16>:word16] *s32 ax
	SCZO = cond(dx_ax)
	ax = ax + Mem0[es:bx + 6<i16>:word16]
	SCZO = cond(ax)
	dx = Mem0[es:bx + 8<i16>:word16]
	ax = ax - 0x42<16>
	SCZO = cond(ax)
	Mem0[ss:bp - 6<i16>:word16] = ax
	Mem0[ss:bp - 4<i16>:word16] = dx
	es_bx = Mem0[es:bx + 6<i16>:segptr32]
	ax = es
	es_si = Mem0[ds:0x3A86<16>:segptr32]
	cx = ax
	ax = 0x42<16>
	dx_ax = Mem0[es:si + 64<i16>:word16] *s32 ax
	SCZO = cond(dx_ax)
	si = ax
	es = cx
	ax = Mem0[es:bx - 6<i16> + si:word16]
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	Mem0[es:bx + 56<i16>:word16] = ax
	es_bx = Mem0[ss:bp - 6<i16>:segptr32]
	ax = Mem0[es:bx + 58<i16>:word16]
	ax = ax + Mem0[es:bx + 60<i16>:word16]
	SCZO = cond(ax)
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = ax - Mem0[es:bx + 56<i16>:word16]
	SCZO = cond(ax)
	Mem0[es:bx + 58<i16>:word16] = ax
	ax = Mem0[es:bx + 20<i16>:word16]
	ax = ax - Mem0[es:bx + 16<i16>:word16]
	SCZO = cond(ax)
	ax = ax - Mem0[es:bx + 58<i16>:word16]
	SCZO = cond(ax)
	ax = ax + 1<16>
	SZO = cond(ax)
	ax = ax >>u 1<16>
	SCZO = cond(ax)
	Mem0[es:bx + 54<i16>:word16] = ax
	ax = Mem0[es:bx + 42<i16>:word16]
	ax = ax << 1<16>
	SCZO = cond(ax)
	ax = ax + 2<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v27 = Mem0[es:bx + 80<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v27
	v28 = Mem0[es:bx + 78<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v28
	call fn2017_0228 (retsize: 4;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	v29 = Mem0[es:bx + 20<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v29
	v30 = Mem0[es:bx + 18<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v30
	v31 = Mem0[es:bx + 16<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v31
	v32 = Mem0[es:bx + 14<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v32
	call fn1F38_055E (retsize: 4;)
	sp = sp + 0xA<16>
	SCZO = cond(sp)
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn3CEE_3E8B_exit
l3CEE_3EA5_in_fn3CEE_3E8B:
	ax = 0x42<16>
	dx_ax = Mem0[es:bx + 66<i16>:word16] *s32 ax
	SCZO = cond(dx_ax)
	ax = ax + Mem0[es:bx + 6<i16>:word16]
	SCZO = cond(ax)
	dx = Mem0[es:bx + 8<i16>:word16]
	ax = ax - 0x42<16>
	SCZO = cond(ax)
	Mem0[ss:bp - 6<i16>:word16] = ax
	Mem0[ss:bp - 4<i16>:word16] = dx
	es_bx = Mem0[es:bx + 6<i16>:segptr32]
	ax = es
	es_si = Mem0[ds:0x3A86<16>:segptr32]
	cx = ax
	ax = 0x42<16>
	dx_ax = Mem0[es:si + 64<i16>:word16] *s32 ax
	SCZO = cond(dx_ax)
	si = ax
	es = cx
	ax = Mem0[es:bx - 6<i16> + si:word16]
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	Mem0[es:bx + 56<i16>:word16] = ax
	es_bx = Mem0[ss:bp - 6<i16>:segptr32]
	ax = Mem0[es:bx + 58<i16>:word16]
	ax = ax + Mem0[es:bx + 60<i16>:word16]
	SCZO = cond(ax)
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = ax - Mem0[es:bx + 56<i16>:word16]
	SCZO = cond(ax)
	Mem0[es:bx + 58<i16>:word16] = ax
	ax = Mem0[es:bx + 20<i16>:word16]
	ax = ax - Mem0[es:bx + 16<i16>:word16]
	SCZO = cond(ax)
	ax = ax - Mem0[es:bx + 58<i16>:word16]
	SCZO = cond(ax)
	ax = ax + 1<16>
	SZO = cond(ax)
	ax = ax >>u 1<16>
	SCZO = cond(ax)
	Mem0[es:bx + 54<i16>:word16] = ax
	ax = Mem0[es:bx + 42<i16>:word16]
	ax = ax << 1<16>
	SCZO = cond(ax)
	ax = ax + 2<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v20 = Mem0[es:bx + 80<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v20
	v21 = Mem0[es:bx + 78<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v21
	call fn2017_0228 (retsize: 4;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	v22 = Mem0[es:bx + 20<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v22
	v23 = Mem0[es:bx + 18<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v23
	v24 = Mem0[es:bx + 16<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v24
	v25 = Mem0[es:bx + 14<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v25
	call fn1F38_055E (retsize: 4;)
	sp = sp + 0xA<16>
	SCZO = cond(sp)
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn3CEE_3E8B_exit
fn3CEE_3E8B_exit:


// fn3CEE_3F4C
// Return size: 4
define fn3CEE_3F4C
fn3CEE_3F4C_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_3F4C
l3CEE_3F4C:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0xE<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	SCZO = cond(Mem0[ss:bp + 6<i16>:word16] - 0<16>)
	branch Test(GE,SO) l3CEE_3F62
	// succ:  l3CEE_3F5A l3CEE_3F62
l3CEE_3F5A:
	ax = Mem0[ss:bp + 6<i16>:word16]
	C = ax != 0<16>
	ax = -ax
	SZO = cond(ax)
	goto l3CEE_3F65
	// succ:  l3CEE_3F65
l3CEE_3F62:
	ax = Mem0[ss:bp + 6<i16>:word16]
	// succ:  l3CEE_3F65
l3CEE_3F65:
	Mem0[ss:bp - 12<i16>:word16] = ax
	ax = ax | ax
	SZ = cond(ax)
	O = false
	C = false
	branch Test(NE,Z) l3CEE_3F6F
	// succ:  l3CEE_3F6C l3CEE_3F6F
l3CEE_3F6C:
	goto l3CEE_40DC
	// succ:  l3CEE_40DC
l3CEE_3F6F:
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	SCZO = cond(Mem0[es:bx + 28<i16>:word16] - ax)
	branch Test(UGT,CZ) l3CEE_3F7C
	// succ:  l3CEE_3F79 l3CEE_3F7C
l3CEE_3F79:
	goto l3CEE_40DC
	// succ:  l3CEE_40DC
l3CEE_3F7C:
	SCZO = cond(Mem0[es:bx + 72<i16>:word16] - 0<16>)
	branch Test(EQ,Z) l3CEE_3FAA
	// succ:  l3CEE_3F83 l3CEE_3FAA
l3CEE_3F83:
	ax = Mem0[es:bx + 40<i16>:word16]
	SCZO = cond(Mem0[es:bx + 50<i16>:word16] - ax)
	branch Test(GT,SZO) l3CEE_3FAA
	// succ:  l3CEE_3F8D l3CEE_3FAA
l3CEE_3F8D:
	ax = Mem0[es:bx + 50<i16>:word16]
	ax = ax + Mem0[es:bx + 14<i16>:word16]
	SCZO = cond(ax)
	Mem0[ss:bp - 6<i16>:word16] = ax
	ax = Mem0[es:bx + 40<i16>:word16]
	ax = ax - Mem0[es:bx + 50<i16>:word16]
	SCZO = cond(ax)
	Mem0[ss:bp - 10<i16>:word16] = ax
	Mem0[ss:bp + 6<i16>:word16] = 0xFFFF<16>
	goto l3CEE_3FBF
	// succ:  l3CEE_3FBF
l3CEE_3FAA:
	ax = Mem0[es:bx + 38<i16>:word16]
	ax = ax + Mem0[es:bx + 14<i16>:word16]
	SCZO = cond(ax)
	Mem0[ss:bp - 6<i16>:word16] = ax
	ax = Mem0[es:bx + 28<i16>:word16]
	ax = ax - Mem0[ss:bp - 12<i16>:word16]
	SCZO = cond(ax)
	Mem0[ss:bp - 10<i16>:word16] = ax
	// succ:  l3CEE_3FBF
l3CEE_3FBF:
	SCZO = cond(Mem0[ss:bp + 6<i16>:word16] - 0<16>)
	branch Test(LE,SZO) l3CEE_3FDA
	// succ:  l3CEE_3FC5 l3CEE_3FDA
l3CEE_3FC5:
	ax = Mem0[es:bx + 38<i16>:word16]
	Mem0[ss:bp - 2<i16>:word16] = ax
	ax = ax + Mem0[ss:bp - 12<i16>:word16]
	SCZO = cond(ax)
	Mem0[ss:bp - 4<i16>:word16] = ax
	ax = Mem0[ss:bp - 2<i16>:word16]
	ax = ax + Mem0[ss:bp - 10<i16>:word16]
	SCZO = cond(ax)
	goto l3CEE_3FF1
	// succ:  l3CEE_3FF1
l3CEE_3FDA:
	ax = Mem0[ss:bp - 6<i16>:word16]
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = ax - Mem0[es:bx + 14<i16>:word16]
	SCZO = cond(ax)
	Mem0[ss:bp - 4<i16>:word16] = ax
	ax = ax + Mem0[ss:bp - 12<i16>:word16]
	SCZO = cond(ax)
	Mem0[ss:bp - 2<i16>:word16] = ax
	ax = Mem0[ss:bp - 4<i16>:word16]
	// succ:  l3CEE_3FF1
l3CEE_3FF1:
	Mem0[ss:bp - 8<i16>:word16] = ax
	SCZO = cond(Mem0[ss:bp - 10<i16>:word16] - 0<16>)
	branch Test(NE,Z) l3CEE_3FFD
	// succ:  l3CEE_3FFA l3CEE_3FFD
l3CEE_3FFA:
	goto l3CEE_4117
	// succ:  l3CEE_4117
l3CEE_3FFD:
	ax = Mem0[es:bx + 26<i16>:word16]
	dx_ax = Mem0[ss:bp - 10<i16>:word16] *u32 ax
	SCZO = cond(dx_ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = Mem0[es:bx + 26<i16>:word16]
	dx_ax = Mem0[ss:bp - 4<i16>:word16] *u32 ax
	SCZO = cond(dx_ax)
	ax = ax + Mem0[es:bx + 22<i16>:word16]
	SCZO = cond(ax)
	dx = Mem0[es:bx + 24<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = Mem0[es:bx + 26<i16>:word16]
	dx_ax = Mem0[ss:bp - 2<i16>:word16] *u32 ax
	SCZO = cond(dx_ax)
	ax = ax + Mem0[es:bx + 22<i16>:word16]
	SCZO = cond(ax)
	dx = Mem0[es:bx + 24<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn2017_0258 (retsize: 4;)
	sp = sp + 0xA<16>
	SCZO = cond(sp)
	si = Mem0[ss:bp - 2<i16>:word16]
	si = si << 1<16>
	SCZO = cond(si)
	di = Mem0[ss:bp - 4<i16>:word16]
	di = di << 1<16>
	SCZO = cond(di)
	ax = Mem0[ss:bp - 10<i16>:word16]
	ax = ax << 1<16>
	SCZO = cond(ax)
	Mem0[ss:bp - 14<i16>:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = Mem0[es:bx + 74<i16>:word16]
	dx = Mem0[es:bx + 76<i16>:word16]
	ax = ax + di
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = Mem0[es:bx + 74<i16>:word16]
	ax = ax + si
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn2017_0258 (retsize: 4;)
	sp = sp + 0xA<16>
	SCZO = cond(sp)
	v25 = Mem0[ss:bp - 14<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v25
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = Mem0[es:bx + 78<i16>:word16]
	dx = Mem0[es:bx + 80<i16>:word16]
	ax = ax + di
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = Mem0[es:bx + 78<i16>:word16]
	ax = ax + si
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn2017_0258 (retsize: 4;)
	sp = sp + 0xA<16>
	SCZO = cond(sp)
	ax = Mem0[ss:bp - 10<i16>:word16]
	ax = ax << 1<16>
	SCZO = cond(ax)
	ax = ax << 1<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 4<i16>:word16]
	ax = ax << 1<16>
	SCZO = cond(ax)
	ax = ax << 1<16>
	SCZO = cond(ax)
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = ax + Mem0[es:bx + 82<i16>:word16]
	SCZO = cond(ax)
	dx = Mem0[es:bx + 84<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 2<i16>:word16]
	ax = ax << 1<16>
	SCZO = cond(ax)
	ax = ax << 1<16>
	SCZO = cond(ax)
	ax = ax + Mem0[es:bx + 82<i16>:word16]
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn2017_0258 (retsize: 4;)
	sp = sp + 0xA<16>
	SCZO = cond(sp)
	v26 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v26
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	v27 = Mem0[es:bx + 20<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v27
	ax = Mem0[es:bx + 40<i16>:word16]
	ax = ax + Mem0[es:bx + 14<i16>:word16]
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v28 = Mem0[es:bx + 16<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v28
	v29 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v29
	call fn1F38_055E (retsize: 4;)
	sp = sp + 0xA<16>
	SCZO = cond(sp)
	goto l3CEE_4117
	// succ:  l3CEE_4117
l3CEE_40DC:
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	v21 = Mem0[es:bx + 20<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v21
	ax = Mem0[es:bx + 40<i16>:word16]
	ax = ax + Mem0[es:bx + 14<i16>:word16]
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v22 = Mem0[es:bx + 16<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v22
	ax = Mem0[es:bx + 38<i16>:word16]
	ax = ax + Mem0[es:bx + 14<i16>:word16]
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_055E (retsize: 4;)
	sp = sp + 0xA<16>
	SCZO = cond(sp)
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = Mem0[es:bx + 38<i16>:word16]
	Mem0[ss:bp - 8<i16>:word16] = ax
	ax = Mem0[es:bx + 28<i16>:word16]
	Mem0[ss:bp - 12<i16>:word16] = ax
	// succ:  l3CEE_4117
l3CEE_4117:
	si = Mem0[ss:bp - 8<i16>:word16]
	si = si << 1<16>
	SCZO = cond(si)
	di = Mem0[ss:bp - 12<i16>:word16]
	di = di << 1<16>
	SCZO = cond(di)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = Mem0[es:bx + 74<i16>:word16]
	dx = Mem0[es:bx + 76<i16>:word16]
	ax = ax + si
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn2017_0228 (retsize: 4;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = Mem0[es:bx + 78<i16>:word16]
	dx = Mem0[es:bx + 80<i16>:word16]
	ax = ax + si
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn2017_0228 (retsize: 4;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	ax = Mem0[ss:bp - 12<i16>:word16]
	ax = ax << 1<16>
	SCZO = cond(ax)
	ax = ax << 1<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 8<i16>:word16]
	ax = ax << 1<16>
	SCZO = cond(ax)
	ax = ax << 1<16>
	SCZO = cond(ax)
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = ax + Mem0[es:bx + 82<i16>:word16]
	SCZO = cond(ax)
	dx = Mem0[es:bx + 84<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn2017_0228 (retsize: 4;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	di = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn3CEE_3F4C_exit
fn3CEE_3F4C_exit:


// fn3CEE_4188
// Return size: 4
define fn3CEE_4188
fn3CEE_4188_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_4188
l3CEE_4188:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x16<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	ax = Mem0[ss:bp + 6<i16>:word16]
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	dx_ax = Mem0[es:bx + 26<i16>:word16] *u32 ax
	SCZO = cond(dx_ax)
	ax = ax + Mem0[es:bx + 22<i16>:word16]
	SCZO = cond(ax)
	dx = Mem0[es:bx + 24<i16>:word16]
	Mem0[ss:bp - 4<i16>:word16] = ax
	Mem0[ss:bp - 2<i16>:word16] = dx
	Mem0[ss:bp - 20<i16>:word16] = 0<16>
	goto l3CEE_441D
	// succ:  l3CEE_441D
l3CEE_41B0:
	es_bx = Mem0[ss:bp - 16<i16>:segptr32]
	ax = Mem0[es:bx + 38<i16>:word16]
	dx = Mem0[es:bx + 40<i16>:word16]
	// succ:  l3CEE_41BB
l3CEE_41BB:
	Mem0[ss:bp - 8<i16>:word16] = ax
	Mem0[ss:bp - 6<i16>:word16] = dx
	ax = Mem0[es:bx + 58<i16>:word16]
	Mem0[ss:bp - 12<i16>:word16] = ax
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = Mem0[ss:bp - 20<i16>:word16]
	SCZO = cond(Mem0[es:bx:word16] - ax)
	branch Test(UGT,CZ) l3CEE_41EA
	// succ:  l3CEE_41D4 l3CEE_41EA
l3CEE_41D4:
	es_bx = Mem0[ss:bp - 16<i16>:segptr32]
	v24 = Mem0[es:bx + 44<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v24
	v25 = Mem0[es:bx + 42<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v25
	call fn2017_03F5 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	v26 = Mem0[ss:bp - 12<i16>:word16] + ax
	Mem0[ss:bp - 12<i16>:word16] = v26
	SCZO = cond(v26)
	// succ:  l3CEE_41EA
l3CEE_41EA:
	es_bx = Mem0[ss:bp - 8<i16>:segptr32]
	SCZO = cond(Mem0[es:bx:byte] - 0<8>)
	branch Test(EQ,Z) l3CEE_424A
	// succ:  l3CEE_41F3 l3CEE_424A
l3CEE_41F3:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = es
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bx
	call fn2017_03F5 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 22<i16>:word16] = ax
	si = ax
	es_bx = Mem0[ss:bp - 8<i16>:segptr32]
	al = Mem0[es:bx - 1<i16> + si:byte]
	Mem0[ss:bp - 10<i16>:byte] = al
	ax = si
	ax = ax - Mem0[ss:bp - 12<i16>:word16]
	SCZO = cond(ax)
	cx = cx - cx - C
	SCZO = cond(cx)
	ax = ax & cx
	SZ = cond(ax)
	O = false
	C = false
	ax = ax + Mem0[ss:bp - 12<i16>:word16]
	SCZO = cond(ax)
	Mem0[ss:bp - 22<i16>:word16] = ax
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = Mem0[ss:bp - 20<i16>:word16]
	SCZO = cond(Mem0[es:bx:word16] - ax)
	branch Test(UGT,CZ) l3CEE_424E
	// succ:  l3CEE_4227 l3CEE_424E
l3CEE_4227:
	v33 = Mem0[ss:bp - 22<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v33
	v34 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v34
	v35 = Mem0[ss:bp - 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v35
	v36 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v36
	v37 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v37
	call fn2017_0258 (retsize: 4;)
	sp = sp + 0xA<16>
	SCZO = cond(sp)
	ax = Mem0[ss:bp - 22<i16>:word16]
	v38 = Mem0[ss:bp - 4<i16>:word16] + ax
	Mem0[ss:bp - 4<i16>:word16] = v38
	SCZO = cond(v38)
	v39 = Mem0[ss:bp - 12<i16>:word16] - ax
	Mem0[ss:bp - 12<i16>:word16] = v39
	SCZO = cond(v39)
	goto l3CEE_424E
	// succ:  l3CEE_424E
l3CEE_424A:
	Mem0[ss:bp - 10<i16>:byte] = 0x20<8>
	// succ:  l3CEE_424E
l3CEE_424E:
	v43 = Mem0[ss:bp - 12<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v43
	al = Mem0[ss:bp - 10<i16>:byte]
	ah = ah - ah
	SCZO = cond(ah)
	goto l3CEE_4405
	// succ:  l3CEE_4405
l3CEE_425A:
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = Mem0[ss:bp + 6<i16>:word16]
	SCZO = cond(Mem0[es:bx + 38<i16>:word16] - ax)
	branch Test(LE,SZO) l3CEE_4274
	// succ:  l3CEE_4267 l3CEE_4274
l3CEE_4267:
	ax = Mem0[es:bx + 30<i16>:word16]
	es_bx = Mem0[ss:bp - 16<i16>:segptr32]
	ax = ax - Mem0[es:bx + 30<i16>:word16]
	SCZO = cond(ax)
	goto l3CEE_4287
	// succ:  l3CEE_4287
l3CEE_4274:
	es_bx = Mem0[ss:bp - 16<i16>:segptr32]
	ax = Mem0[es:bx + 32<i16>:word16]
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = ax + Mem0[es:bx + 42<i16>:word16]
	SCZO = cond(ax)
	ax = ax - Mem0[es:bx + 32<i16>:word16]
	SCZO = cond(ax)
	// succ:  l3CEE_4287
l3CEE_4287:
	Mem0[ss:bp - 18<i16>:word16] = ax
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = Mem0[ss:bp - 20<i16>:word16]
	SCZO = cond(Mem0[es:bx:word16] - ax)
	branch Test(UGT,CZ) l3CEE_42C5
	// succ:  l3CEE_4296 l3CEE_42C5
l3CEE_4296:
	es_bx = Mem0[ss:bp - 16<i16>:segptr32]
	v19 = Mem0[es:bx + 44<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v19
	v20 = Mem0[es:bx + 42<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v20
	call fn2017_03F5 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 12<i16>:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x20<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v21 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v21
	v22 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v22
	call fn2017_0228 (retsize: 4;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	ax = Mem0[ss:bp - 12<i16>:word16]
	v23 = Mem0[ss:bp - 4<i16>:word16] + ax
	Mem0[ss:bp - 4<i16>:word16] = v23
	SCZO = cond(v23)
	// succ:  l3CEE_42C5
l3CEE_42C5:
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = Mem0[ss:bp + 6<i16>:word16]
	SCZO = cond(Mem0[es:bx + 38<i16>:word16] - ax)
	branch Test(LE,SZO) l3CEE_42DA
	// succ:  l3CEE_42D2 l3CEE_42DA
l3CEE_42D2:
	ax = Mem0[ss:bp - 18<i16>:word16]
	SCZO = cond(Mem0[ss:bp + 6<i16>:word16] - ax)
	branch Test(LT,SO) l3CEE_42EB
	// succ:  l3CEE_42DA l3CEE_42EB
l3CEE_42DA:
	ax = Mem0[ss:bp + 6<i16>:word16]
	SCZO = cond(Mem0[es:bx + 40<i16>:word16] - ax)
	branch Test(GE,SO) l3CEE_42F6
	// succ:  l3CEE_42E3 l3CEE_42F6
l3CEE_42E3:
	ax = Mem0[ss:bp - 18<i16>:word16]
	SCZO = cond(Mem0[ss:bp + 6<i16>:word16] - ax)
	branch Test(LE,SZO) l3CEE_42F6
	// succ:  l3CEE_42EB l3CEE_42F6
l3CEE_42EB:
	es_bx = Mem0[ss:bp - 16<i16>:segptr32]
	ax = Mem0[es:bx + 58<i16>:word16]
	goto l3CEE_43FE
	// succ:  l3CEE_43FE
l3CEE_42F6:
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = Mem0[ss:bp + 6<i16>:word16]
	SCZO = cond(Mem0[es:bx + 38<i16>:word16] - ax)
	branch Test(LE,SZO) l3CEE_4328
	// succ:  l3CEE_4303 l3CEE_4328
l3CEE_4303:
	es_bx = Mem0[ss:bp - 16<i16>:segptr32]
	SCZO = cond(Mem0[es:bx + 20<i16>:word16] - 0<16>)
	branch Test(EQ,Z) l3CEE_4312
	// succ:  l3CEE_430D l3CEE_4312
l3CEE_430D:
	al = 0x3B<8>
	goto l3CEE_4314
	// succ:  l3CEE_4314
l3CEE_4312:
	al = 0x3E<8>
	// succ:  l3CEE_4314
l3CEE_4314:
	Mem0[ss:bp - 10<i16>:byte] = al
	ax = Mem0[es:bx + 22<i16>:word16]
	dx = Mem0[es:bx + 24<i16>:word16]
	Mem0[ss:bp - 8<i16>:word16] = ax
	Mem0[ss:bp - 6<i16>:word16] = dx
	goto l3CEE_4382
	// succ:  l3CEE_4382
l3CEE_4328:
	Mem0[ss:bp - 10<i16>:byte] = 0x3B<8>
	es_bx = Mem0[ss:bp - 16<i16>:segptr32]
	ax = Mem0[es:bx + 26<i16>:word16]
	dx = Mem0[es:bx + 28<i16>:word16]
	Mem0[ss:bp - 8<i16>:word16] = ax
	Mem0[ss:bp - 6<i16>:word16] = dx
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	SCZO = cond(Mem0[es:bx + 36<i16>:word16] - 0<16>)
	branch Test(LE,SZO) l3CEE_434E
	// succ:  l3CEE_4348 l3CEE_434E
l3CEE_4348:
	ax = 2<16>
	goto l3CEE_4351
	// succ:  l3CEE_4351
l3CEE_434E:
	ax = 1<16>
	// succ:  l3CEE_4351
l3CEE_4351:
	ax = ax + Mem0[es:bx + 40<i16>:word16]
	SCZO = cond(ax)
	Mem0[ss:bp - 18<i16>:word16] = ax
	goto l3CEE_4382
	// succ:  l3CEE_4382
l3CEE_435A:
	al = Mem0[ss:bp - 10<i16>:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v53 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v53
	v54 = Mem0[ss:bp - 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v54
	call fn3CEE_3ABC (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 22<i16>:word16] = ax
	v55 = Mem0[ss:bp - 8<i16>:word16] + ax
	Mem0[ss:bp - 8<i16>:word16] = v55
	SCZO = cond(v55)
	es_bx = Mem0[ss:bp - 8<i16>:segptr32]
	SCZO = cond(Mem0[es:bx:byte] - 0<8>)
	branch Test(EQ,Z) l3CEE_437F
	// succ:  l3CEE_437C l3CEE_437F
l3CEE_437C:
	v56 = Mem0[ss:bp - 8<i16>:word16] + 1<16>
	Mem0[ss:bp - 8<i16>:word16] = v56
	SZO = cond(v56)
	// succ:  l3CEE_437F
l3CEE_437F:
	v58 = Mem0[ss:bp - 18<i16>:word16] + 1<16>
	Mem0[ss:bp - 18<i16>:word16] = v58
	SZO = cond(v58)
	// succ:  l3CEE_4382
l3CEE_4382:
	ax = Mem0[ss:bp + 6<i16>:word16]
	SCZO = cond(Mem0[ss:bp - 18<i16>:word16] - ax)
	branch Test(LT,SO) l3CEE_435A
	// succ:  l3CEE_438A l3CEE_435A
l3CEE_438A:
	al = Mem0[ss:bp - 10<i16>:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v45 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v45
	v46 = Mem0[ss:bp - 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v46
	call fn3CEE_3ABC (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 22<i16>:word16] = ax
	bx = ax
	es_si = Mem0[ss:bp - 8<i16>:segptr32]
	SCZO = cond(Mem0[es:bx + si:byte] - 0<8>)
	branch Test(EQ,Z) l3CEE_43C5
	// succ:  l3CEE_43AB l3CEE_43C5
l3CEE_43AB:
	es_bx = Mem0[ss:bp - 16<i16>:segptr32]
	SCZO = cond(Mem0[es:bx + 20<i16>:word16] - 0<16>)
	branch Test(NE,Z) l3CEE_43C5
	// succ:  l3CEE_43B5 l3CEE_43C5
l3CEE_43B5:
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = Mem0[ss:bp + 6<i16>:word16]
	SCZO = cond(Mem0[es:bx + 38<i16>:word16] - ax)
	branch Test(LE,SZO) l3CEE_43C5
	// succ:  l3CEE_43C2 l3CEE_43C5
l3CEE_43C2:
	v47 = Mem0[ss:bp - 22<i16>:word16] + 1<16>
	Mem0[ss:bp - 22<i16>:word16] = v47
	SZO = cond(v47)
	// succ:  l3CEE_43C5
l3CEE_43C5:
	es_bx = Mem0[ss:bp - 16<i16>:segptr32]
	ax = Mem0[es:bx + 58<i16>:word16]
	ax = ax - Mem0[ss:bp - 22<i16>:word16]
	SCZO = cond(ax)
	cx = cx - cx - C
	SCZO = cond(cx)
	ax = ax & cx
	SZ = cond(ax)
	O = false
	C = false
	ax = ax + Mem0[ss:bp - 22<i16>:word16]
	SCZO = cond(ax)
	Mem0[ss:bp - 22<i16>:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v48 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v48
	v49 = Mem0[ss:bp - 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v49
	v50 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v50
	v51 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v51
	call fn2017_0258 (retsize: 4;)
	sp = sp + 0xA<16>
	SCZO = cond(sp)
	ax = Mem0[ss:bp - 22<i16>:word16]
	v52 = Mem0[ss:bp - 4<i16>:word16] + ax
	Mem0[ss:bp - 4<i16>:word16] = v52
	SCZO = cond(v52)
	es_bx = Mem0[ss:bp - 16<i16>:segptr32]
	ax = Mem0[es:bx + 58<i16>:word16]
	ax = ax - Mem0[ss:bp - 22<i16>:word16]
	SCZO = cond(ax)
	// succ:  l3CEE_43FE
l3CEE_43FE:
	Mem0[ss:bp - 12<i16>:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x20<16>
	// succ:  l3CEE_4405
l3CEE_4405:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v40 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v40
	v41 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v41
	call fn2017_0228 (retsize: 4;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	ax = Mem0[ss:bp - 12<i16>:word16]
	v42 = Mem0[ss:bp - 4<i16>:word16] + ax
	Mem0[ss:bp - 4<i16>:word16] = v42
	SCZO = cond(v42)
	// succ:  l3CEE_441A
l3CEE_441A:
	v57 = Mem0[ss:bp - 20<i16>:word16] + 1<16>
	Mem0[ss:bp - 20<i16>:word16] = v57
	SZO = cond(v57)
	// succ:  l3CEE_441D
l3CEE_441D:
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = Mem0[ss:bp - 20<i16>:word16]
	SCZO = cond(Mem0[es:bx + 4<i16>:word16] - ax)
	branch Test(ULE,CZ) l3CEE_4478
	// succ:  l3CEE_442A l3CEE_4478
l3CEE_442A:
	ax = 0x42<16>
	dx_ax = Mem0[ss:bp - 20<i16>:word16] *u32 ax
	SCZO = cond(dx_ax)
	ax = ax + Mem0[es:bx + 6<i16>:word16]
	SCZO = cond(ax)
	dx = Mem0[es:bx + 8<i16>:word16]
	Mem0[ss:bp - 16<i16>:word16] = ax
	Mem0[ss:bp - 14<i16>:word16] = dx
	es_bx = Mem0[ss:bp - 16<i16>:segptr32]
	SCZO = cond(Mem0[es:bx + 58<i16>:word16] - 0<16>)
	branch Test(EQ,Z) l3CEE_441A
	// succ:  l3CEE_4448 l3CEE_441A
l3CEE_4448:
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = Mem0[ss:bp + 6<i16>:word16]
	SCZO = cond(Mem0[es:bx + 34<i16>:word16] - ax)
	branch Test(EQ,Z) l3CEE_445E
	// succ:  l3CEE_4455 l3CEE_445E
l3CEE_4455:
	SCZO = cond(Mem0[es:bx + 36<i16>:word16] - ax)
	branch Test(EQ,Z) l3CEE_445E
	// succ:  l3CEE_445B l3CEE_445E
l3CEE_445B:
	goto l3CEE_425A
	// succ:  l3CEE_425A
l3CEE_445E:
	ax = Mem0[ss:bp + 6<i16>:word16]
	SCZO = cond(Mem0[es:bx + 34<i16>:word16] - ax)
	branch Test(EQ,Z) l3CEE_446A
	// succ:  l3CEE_4467 l3CEE_446A
l3CEE_4467:
	goto l3CEE_41B0
	// succ:  l3CEE_41B0
l3CEE_446A:
	es_bx = Mem0[ss:bp - 16<i16>:segptr32]
	ax = Mem0[es:bx + 34<i16>:word16]
	dx = Mem0[es:bx + 36<i16>:word16]
	goto l3CEE_41BB
	// succ:  l3CEE_41BB
l3CEE_4478:
	bx = Mem0[ss:bp + 6<i16>:word16]
	bx = bx << 1<16>
	SCZO = cond(bx)
	es_si = Mem0[ds:0x3A86<16>:segptr32]
	es_si = Mem0[es:si + 74<i16>:segptr32]
	Mem0[es:bx + si:word16] = 1<16>
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn3CEE_4188_exit
fn3CEE_4188_exit:


// fn3CEE_4490
// Return size: 4
define fn3CEE_4490
fn3CEE_4490_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_4490
l3CEE_4490:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x14<16>
	SCZO = cond(sp)
	ax = Mem0[ss:bp + 6<i16>:word16]
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	dx_ax = Mem0[es:bx + 26<i16>:word16] *u32 ax
	SCZO = cond(dx_ax)
	ax = ax + Mem0[es:bx + 22<i16>:word16]
	SCZO = cond(ax)
	dx = Mem0[es:bx + 24<i16>:word16]
	Mem0[ss:bp - 4<i16>:word16] = ax
	Mem0[ss:bp - 2<i16>:word16] = dx
	Mem0[ss:bp - 18<i16>:word16] = 0<16>
	goto l3CEE_4672
	// succ:  l3CEE_4672
l3CEE_44B8:
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	es_bx = Mem0[ss:bp - 16<i16>:segptr32]
	v32 = Mem0[es:bx + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v32
	v33 = Mem0[es:bx + 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v33
	call fn2368_022E (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	call fn31FF_1D44 (retsize: 4;)
	// succ:  l3CEE_44D3
l3CEE_44D3:
	es_bx = Mem0[ss:bp - 16<i16>:segptr32]
	es_bx = Mem0[es:bx + 8<i16>:segptr32]
	SCZO = cond(Mem0[es:bx:byte] - 0<8>)
	branch Test(EQ,Z) l3CEE_44E8
	// succ:  l3CEE_44E0 l3CEE_44E8
l3CEE_44E0:
	Mem0[ss:bp - 6<i16>:word16] = 0x100<16>
	goto l3CEE_44F2
	// succ:  l3CEE_44F2
l3CEE_44E8:
	es_bx = Mem0[ds:0x1296<16>:segptr32]
	ax = Mem0[es:bx:word16]
	Mem0[ss:bp - 6<i16>:word16] = ax
	// succ:  l3CEE_44F2
l3CEE_44F2:
	es_bx = Mem0[ss:bp - 16<i16>:segptr32]
	es_bx = Mem0[es:bx + 8<i16>:segptr32]
	SCZO = cond(Mem0[es:bx:byte] - 0<8>)
	branch Test(NE,Z) l3CEE_4506
	// succ:  l3CEE_44FF l3CEE_4506
l3CEE_44FF:
	SZP = cond(Mem0[ss:bp - 6<i16>:word16] & 0x100<16>)
	O = false
	C = false
	branch Test(NE,Z) l3CEE_4519
	// succ:  l3CEE_4506 l3CEE_4519
l3CEE_4506:
	es_bx = Mem0[ss:bp - 16<i16>:segptr32]
	v35 = Mem0[es:bx + 10<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v35
	v36 = Mem0[es:bx + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v36
	call fn3431_3E9E (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	// succ:  l3CEE_4519
l3CEE_4519:
	SCZO = cond(Mem0[ss:bp - 6<i16>:word16] - 0x300<16>)
	branch Test(NE,Z) l3CEE_452C
	// succ:  l3CEE_4520 l3CEE_452C
l3CEE_4520:
	ax = 0x6050<16>
	Mem0[ss:bp - 10<i16>:word16] = ax
	Mem0[ss:bp - 8<i16>:word16] = ds
	goto l3CEE_453E
	// succ:  l3CEE_453E
l3CEE_452C:
	es_bx = Mem0[ds:0x1296<16>:segptr32]
	ax = Mem0[es:bx + 8<i16>:word16]
	dx = Mem0[es:bx + 10<i16>:word16]
	Mem0[ss:bp - 10<i16>:word16] = ax
	Mem0[ss:bp - 8<i16>:word16] = dx
	// succ:  l3CEE_453E
l3CEE_453E:
	es_bx = Mem0[ss:bp - 16<i16>:segptr32]
	SCZO = cond(Mem0[es:bx + 58<i16>:word16] - 0<16>)
	branch Test(EQ,Z) l3CEE_45B6
	// succ:  l3CEE_4548 l3CEE_45B6
l3CEE_4548:
	ax = Mem0[es:bx + 64<i16>:word16]
	Mem0[ss:bp - 20<i16>:word16] = ax
	ax = Mem0[ss:bp - 6<i16>:word16]
	SCZO = cond(ax - 2<16>)
	branch Test(EQ,Z) l3CEE_45BE
	// succ:  l3CEE_4557 l3CEE_45BE
l3CEE_4557:
	SCZO = cond(ax - 8<16>)
	branch Test(EQ,Z) l3CEE_45BE
	// succ:  l3CEE_455C l3CEE_45BE
l3CEE_455C:
	SCZO = cond(ax - 0x20<16>)
	branch Test(EQ,Z) l3CEE_4573
	// succ:  l3CEE_4561 l3CEE_4573
l3CEE_4561:
	SCZO = cond(ax - 0x80<16>)
	branch Test(NE,Z) l3CEE_4569
	// succ:  l3CEE_4566 l3CEE_4569
l3CEE_4566:
	goto l3CEE_45FE
	// succ:  l3CEE_45FE
l3CEE_4569:
	SCZO = cond(ax - 0x100<16>)
	branch Test(EQ,Z) l3CEE_4573
	// succ:  l3CEE_456E l3CEE_4573
l3CEE_456E:
	SCZO = cond(ax - 0x300<16>)
	branch Test(NE,Z) l3CEE_45B6
	// succ:  l3CEE_4573 l3CEE_45B6
l3CEE_4573:
	v55 = Mem0[ss:bp - 20<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v55
	v56 = Mem0[ss:bp - 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v56
	v57 = Mem0[ss:bp - 10<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v57
	v58 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v58
	v59 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v59
	call fn2017_0258 (retsize: 4;)
	sp = sp + 0xA<16>
	SCZO = cond(sp)
	ax = Mem0[ss:bp - 20<i16>:word16]
	v60 = Mem0[ss:bp - 4<i16>:word16] + ax
	Mem0[ss:bp - 4<i16>:word16] = v60
	SCZO = cond(v60)
	es_bx = Mem0[ss:bp - 16<i16>:segptr32]
	ax = Mem0[es:bx + 58<i16>:word16]
	// succ:  l3CEE_4597
l3CEE_4597:
	ax = ax - Mem0[ss:bp - 20<i16>:word16]
	SCZO = cond(ax)
	Mem0[ss:bp - 12<i16>:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x20<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v61 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v61
	v62 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v62
	call fn2017_0228 (retsize: 4;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	ax = Mem0[ss:bp - 12<i16>:word16]
	// succ:  l3CEE_45B3
l3CEE_45B3:
	v54 = Mem0[ss:bp - 4<i16>:word16] + ax
	Mem0[ss:bp - 4<i16>:word16] = v54
	SCZO = cond(v54)
	// succ:  l3CEE_45B6
l3CEE_45B6:
	call fn2368_033C (retsize: 4;)
	goto l3CEE_466F
	// succ:  l3CEE_466F
l3CEE_45BE:
	es_bx = Mem0[ss:bp - 16<i16>:segptr32]
	ax = Mem0[es:bx + 62<i16>:word16]
	Mem0[ss:bp - 12<i16>:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x20<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v37 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v37
	v38 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v38
	call fn2017_0228 (retsize: 4;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	ax = Mem0[ss:bp - 12<i16>:word16]
	v39 = Mem0[ss:bp - 4<i16>:word16] + ax
	Mem0[ss:bp - 4<i16>:word16] = v39
	SCZO = cond(v39)
	v40 = Mem0[ss:bp - 20<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v40
	v41 = Mem0[ss:bp - 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v41
	v42 = Mem0[ss:bp - 10<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v42
	v43 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v43
	v44 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v44
	call fn2017_0258 (retsize: 4;)
	sp = sp + 0xA<16>
	SCZO = cond(sp)
	ax = Mem0[ss:bp - 20<i16>:word16]
	goto l3CEE_45B3
	// succ:  l3CEE_45B3
l3CEE_45FE:
	es_bx = Mem0[ss:bp - 16<i16>:segptr32]
	ax = Mem0[es:bx + 62<i16>:word16]
	Mem0[ss:bp - 12<i16>:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x20<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v45 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v45
	v46 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v46
	call fn2017_0228 (retsize: 4;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	ax = Mem0[ss:bp - 12<i16>:word16]
	v47 = Mem0[ss:bp - 4<i16>:word16] + ax
	Mem0[ss:bp - 4<i16>:word16] = v47
	SCZO = cond(v47)
	v48 = Mem0[ss:bp - 20<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v48
	v49 = Mem0[ss:bp - 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v49
	v50 = Mem0[ss:bp - 10<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v50
	v51 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v51
	v52 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v52
	call fn2017_0258 (retsize: 4;)
	sp = sp + 0xA<16>
	SCZO = cond(sp)
	ax = Mem0[ss:bp - 20<i16>:word16]
	v53 = Mem0[ss:bp - 4<i16>:word16] + ax
	Mem0[ss:bp - 4<i16>:word16] = v53
	SCZO = cond(v53)
	es_bx = Mem0[ss:bp - 16<i16>:segptr32]
	ax = Mem0[es:bx + 58<i16>:word16]
	ax = ax - Mem0[es:bx + 62<i16>:word16]
	SCZO = cond(ax)
	goto l3CEE_4597
	// succ:  l3CEE_4597
l3CEE_464C:
	es_bx = Mem0[ss:bp - 16<i16>:segptr32]
	v25 = Mem0[es:bx + 58<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v25
	ax = 0x20<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v26 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v26
	v27 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v27
	call fn2017_0228 (retsize: 4;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	es_bx = Mem0[ss:bp - 16<i16>:segptr32]
	ax = Mem0[es:bx + 58<i16>:word16]
	v28 = Mem0[ss:bp - 4<i16>:word16] + ax
	Mem0[ss:bp - 4<i16>:word16] = v28
	SCZO = cond(v28)
	// succ:  l3CEE_466F
l3CEE_466F:
	v29 = Mem0[ss:bp - 18<i16>:word16] + 1<16>
	Mem0[ss:bp - 18<i16>:word16] = v29
	SZO = cond(v29)
	// succ:  l3CEE_4672
l3CEE_4672:
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = Mem0[ss:bp - 18<i16>:word16]
	SCZO = cond(Mem0[es:bx + 4<i16>:word16] - ax)
	branch Test(UGT,CZ) l3CEE_4682
	// succ:  l3CEE_467F l3CEE_4682
l3CEE_467F:
	goto l3CEE_4716
	// succ:  l3CEE_4716
l3CEE_4682:
	ax = 0x42<16>
	dx_ax = Mem0[ss:bp - 18<i16>:word16] *u32 ax
	SCZO = cond(dx_ax)
	ax = ax + Mem0[es:bx + 6<i16>:word16]
	SCZO = cond(ax)
	dx = Mem0[es:bx + 8<i16>:word16]
	Mem0[ss:bp - 16<i16>:word16] = ax
	Mem0[ss:bp - 14<i16>:word16] = dx
	ax = Mem0[ss:bp - 18<i16>:word16]
	SCZO = cond(Mem0[es:bx:word16] - ax)
	branch Test(UGT,CZ) l3CEE_46DE
	// succ:  l3CEE_469E l3CEE_46DE
l3CEE_469E:
	es_bx = Mem0[ss:bp - 16<i16>:segptr32]
	SCZO = cond(Mem0[es:bx + 58<i16>:word16] - 0<16>)
	branch Test(EQ,Z) l3CEE_46DE
	// succ:  l3CEE_46A8 l3CEE_46DE
l3CEE_46A8:
	ax = Mem0[es:bx + 42<i16>:word16]
	dx = Mem0[es:bx + 44<i16>:word16]
	Mem0[ss:bp - 10<i16>:word16] = ax
	Mem0[ss:bp - 8<i16>:word16] = dx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn2017_03F5 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 20<i16>:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v16 = Mem0[ss:bp - 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v16
	v17 = Mem0[ss:bp - 10<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v17
	v18 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v18
	v19 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v19
	call fn2017_0258 (retsize: 4;)
	sp = sp + 0xA<16>
	SCZO = cond(sp)
	ax = Mem0[ss:bp - 20<i16>:word16]
	v20 = Mem0[ss:bp - 4<i16>:word16] + ax
	Mem0[ss:bp - 4<i16>:word16] = v20
	SCZO = cond(v20)
	// succ:  l3CEE_46DE
l3CEE_46DE:
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = Mem0[ss:bp + 6<i16>:word16]
	SCZO = cond(Mem0[es:bx + 50<i16>:word16] - ax)
	branch Test(GT,SZO) l3CEE_46F5
	// succ:  l3CEE_46EB l3CEE_46F5
l3CEE_46EB:
	SCZO = cond(Mem0[es:bx + 72<i16>:word16] - 0<16>)
	branch Test(NE,Z) l3CEE_46F5
	// succ:  l3CEE_46F2 l3CEE_46F5
l3CEE_46F2:
	goto l3CEE_464C
	// succ:  l3CEE_464C
l3CEE_46F5:
	es_bx = Mem0[ss:bp - 16<i16>:segptr32]
	ax = Mem0[es:bx:word16]
	ax = ax | Mem0[es:bx + 2<i16>:word16]
	SZ = cond(ax)
	O = false
	C = false
	branch Test(NE,Z) l3CEE_4704
	// succ:  l3CEE_4701 l3CEE_4704
l3CEE_4701:
	goto l3CEE_44B8
	// succ:  l3CEE_44B8
l3CEE_4704:
	v30 = Mem0[es:bx + 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v30
	v31 = Mem0[es:bx:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v31
	call fn2644_17C8 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	goto l3CEE_44D3
	// succ:  l3CEE_44D3
l3CEE_4716:
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn3CEE_4490_exit
fn3CEE_4490_exit:


// fn3CEE_471A
// Return size: 4
define fn3CEE_471A
fn3CEE_471A_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_471A
l3CEE_471A:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 4<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = Mem0[ss:bp + 6<i16>:word16]
	SCZO = cond(Mem0[es:bx + 50<i16>:word16] - ax)
	branch Test(LE,SZO) l3CEE_47AA
	// succ:  l3CEE_472E l3CEE_47AA
l3CEE_472E:
	bx = ax
	bx = bx << 1<16>
	SCZO = cond(bx)
	bx = bx << 1<16>
	SCZO = cond(bx)
	si = Mem0[ds:0x3A86<16>:word16]
	es_si = Mem0[es:si + 82<i16>:segptr32]
	ax = Mem0[es:bx + si:word16]
	dx = Mem0[es:bx + 2<i16> + si:word16]
	Mem0[ss:bp - 4<i16>:word16] = ax
	Mem0[ss:bp - 2<i16>:word16] = dx
	ax = ax | dx
	SZ = cond(ax)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_475C
	// succ:  l3CEE_474D l3CEE_475C
l3CEE_474D:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	v20 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v20
	call fn3CEE_3C78 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	goto l3CEE_476F
	// succ:  l3CEE_476F
l3CEE_475C:
	ax = Mem0[ss:bp + 6<i16>:word16]
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = ax - Mem0[es:bx + 48<i16>:word16]
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn3CEE_3C50 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	// succ:  l3CEE_476F
l3CEE_476F:
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = Mem0[ss:bp + 6<i16>:word16]
	Mem0[es:bx + 48<i16>:word16] = ax
	call fn3CEE_3C96 (retsize: 4;)
	ax = ax | ax
	SZ = cond(ax)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_4790
	// succ:  l3CEE_4782 l3CEE_4790
l3CEE_4782:
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = Mem0[ss:bp + 6<i16>:word16]
	Mem0[es:bx + 50<i16>:word16] = ax
	goto l3CEE_47AA
	// succ:  l3CEE_47AA
l3CEE_4790:
	call fn3CEE_3AEE (retsize: 4;)
	bx = Mem0[ss:bp + 6<i16>:word16]
	bx = bx << 1<16>
	SCZO = cond(bx)
	bx = bx << 1<16>
	SCZO = cond(bx)
	es_si = Mem0[ds:0x3A86<16>:segptr32]
	es_si = Mem0[es:si + 82<i16>:segptr32]
	Mem0[es:bx + si:word16] = ax
	Mem0[es:bx + 2<i16> + si:word16] = dx
	// succ:  l3CEE_47AA
l3CEE_47AA:
	v21 = Mem0[ss:bp + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v21
	call fn3CEE_4490 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	bx = Mem0[ss:bp + 6<i16>:word16]
	bx = bx << 1<16>
	SCZO = cond(bx)
	es_si = Mem0[ds:0x3A86<16>:segptr32]
	es_si = Mem0[es:si + 74<i16>:segptr32]
	Mem0[es:bx + si:word16] = 1<16>
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn3CEE_471A_exit
fn3CEE_471A_exit:


// fn3CEE_47CC
// Return size: 4
define fn3CEE_47CC
fn3CEE_47CC_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_47CC
l3CEE_47CC:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0xA<16>
	SCZO = cond(sp)
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = 0x42<16>
	dx_ax = Mem0[es:bx + 44<i16>:word16] *s32 ax
	SCZO = cond(dx_ax)
	ax = ax + Mem0[es:bx + 6<i16>:word16]
	SCZO = cond(ax)
	dx = Mem0[es:bx + 8<i16>:word16]
	ax = ax - 0x42<16>
	SCZO = cond(ax)
	Mem0[ss:bp - 8<i16>:word16] = ax
	Mem0[ss:bp - 6<i16>:word16] = dx
	ax = Mem0[es:bx + 46<i16>:word16]
	dx_ax = Mem0[es:bx + 26<i16>:word16] *u32 ax
	SCZO = cond(dx_ax)
	es_bx = Mem0[ss:bp - 8<i16>:segptr32]
	ax = ax + Mem0[es:bx + 60<i16>:word16]
	SCZO = cond(ax)
	ax = ax + Mem0[es:bx + 62<i16>:word16]
	SCZO = cond(ax)
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = ax + Mem0[es:bx + 22<i16>:word16]
	SCZO = cond(ax)
	dx = Mem0[es:bx + 24<i16>:word16]
	Mem0[ss:bp - 4<i16>:word16] = ax
	Mem0[ss:bp - 2<i16>:word16] = dx
	es_bx = Mem0[ss:bp - 8<i16>:segptr32]
	ax = Mem0[es:bx + 60<i16>:word16]
	ax = ax + Mem0[es:bx + 62<i16>:word16]
	SCZO = cond(ax)
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = ax + Mem0[es:bx + 16<i16>:word16]
	SCZO = cond(ax)
	ax = ax + Mem0[es:bx + 54<i16>:word16]
	SCZO = cond(ax)
	ax = ax - Mem0[es:bx + 56<i16>:word16]
	SCZO = cond(ax)
	Mem0[ss:bp - 10<i16>:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = Mem0[es:bx + 46<i16>:word16]
	ax = ax + Mem0[es:bx + 14<i16>:word16]
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	es_bx = Mem0[ss:bp - 8<i16>:segptr32]
	v14 = Mem0[es:bx + 64<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v14
	v15 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v15
	v16 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v16
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	v17 = Mem0[ss:bp - 10<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v17
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = Mem0[es:bx + 46<i16>:word16]
	ax = ax + Mem0[es:bx + 14<i16>:word16]
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_04E7 (retsize: 4;)
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn3CEE_47CC_exit
fn3CEE_47CC_exit:


// fn3CEE_4882
// Return size: 4
define fn3CEE_4882
fn3CEE_4882_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_4882
l3CEE_4882:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 8<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	ax = Mem0[ss:bp + 6<i16>:word16]
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	dx_ax = Mem0[es:bx + 26<i16>:word16] *u32 ax
	SCZO = cond(dx_ax)
	ax = ax + Mem0[es:bx + 56<i16>:word16]
	SCZO = cond(ax)
	ax = ax + Mem0[es:bx + 22<i16>:word16]
	SCZO = cond(ax)
	dx = Mem0[es:bx + 24<i16>:word16]
	Mem0[ss:bp - 4<i16>:word16] = ax
	Mem0[ss:bp - 2<i16>:word16] = dx
	ax = Mem0[ss:bp + 6<i16>:word16]
	SCZO = cond(Mem0[es:bx + 34<i16>:word16] - ax)
	branch Test(EQ,Z) l3CEE_48B5
	// succ:  l3CEE_48AF l3CEE_48B5
l3CEE_48AF:
	SCZO = cond(Mem0[es:bx + 36<i16>:word16] - ax)
	branch Test(NE,Z) l3CEE_48FE
	// succ:  l3CEE_48B5 l3CEE_48FE
l3CEE_48B5:
	es_bx = Mem0[ss:bp - 4<i16>:segptr32]
	al = Mem0[es:bx:byte]
	Mem0[ss:bp - 6<i16>:byte] = al
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	v17 = Mem0[es:bx + 16<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v17
	ax = Mem0[ss:bp + 6<i16>:word16]
	ax = ax + Mem0[es:bx + 14<i16>:word16]
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = Mem0[es:bx + 54<i16>:word16]
	Mem0[ss:bp - 8<i16>:word16] = ax
	// succ:  l3CEE_48E1
l3CEE_48E1:
	ax = Mem0[ss:bp - 8<i16>:word16]
	v18 = Mem0[ss:bp - 8<i16>:word16] - 1<16>
	Mem0[ss:bp - 8<i16>:word16] = v18
	SZO = cond(v18)
	ax = ax | ax
	SZ = cond(ax)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_491B
	// succ:  l3CEE_48EB l3CEE_491B
l3CEE_48EB:
	ax = 1<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = bp - 6<i16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ss
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	goto l3CEE_48E1
	// succ:  l3CEE_48E1
l3CEE_48FE:
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = Mem0[es:bx + 16<i16>:word16]
	ax = ax + Mem0[es:bx + 54<i16>:word16]
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp + 6<i16>:word16]
	ax = ax + Mem0[es:bx + 14<i16>:word16]
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_04E7 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	// succ:  l3CEE_491B
l3CEE_491B:
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	v23 = Mem0[es:bx + 58<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v23
	v24 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v24
	v25 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v25
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = Mem0[ss:bp + 6<i16>:word16]
	SCZO = cond(Mem0[es:bx + 34<i16>:word16] - ax)
	branch Test(EQ,Z) l3CEE_4944
	// succ:  l3CEE_493E l3CEE_4944
l3CEE_493E:
	SCZO = cond(Mem0[es:bx + 36<i16>:word16] - ax)
	branch Test(NE,Z) l3CEE_4987
	// succ:  l3CEE_4944 l3CEE_4987
l3CEE_4944:
	si = Mem0[es:bx + 58<i16>:word16]
	es_bx = Mem0[ss:bp - 4<i16>:segptr32]
	al = Mem0[es:bx - 1<i16> + si:byte]
	Mem0[ss:bp - 6<i16>:byte] = al
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = Mem0[es:bx + 20<i16>:word16]
	ax = ax - Mem0[es:bx + 16<i16>:word16]
	SCZO = cond(ax)
	ax = ax - Mem0[es:bx + 58<i16>:word16]
	SCZO = cond(ax)
	ax = ax - Mem0[es:bx + 54<i16>:word16]
	SCZO = cond(ax)
	ax = ax + 1<16>
	SZO = cond(ax)
	Mem0[ss:bp - 8<i16>:word16] = ax
	goto l3CEE_497D
	// succ:  l3CEE_497D
l3CEE_496C:
	ax = 1<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = bp - 6<i16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ss
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_049F (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	// succ:  l3CEE_497D
l3CEE_497D:
	ax = Mem0[ss:bp - 8<i16>:word16]
	v26 = Mem0[ss:bp - 8<i16>:word16] - 1<16>
	Mem0[ss:bp - 8<i16>:word16] = v26
	SZO = cond(v26)
	ax = ax | ax
	SZ = cond(ax)
	O = false
	C = false
	branch Test(NE,Z) l3CEE_496C
	// succ:  l3CEE_4987 l3CEE_496C
l3CEE_4987:
	bx = Mem0[ss:bp + 6<i16>:word16]
	bx = bx << 1<16>
	SCZO = cond(bx)
	es_si = Mem0[ds:0x3A86<16>:segptr32]
	es_si = Mem0[es:si + 78<i16>:segptr32]
	Mem0[es:bx + si:word16] = 1<16>
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn3CEE_4882_exit
fn3CEE_4882_exit:


// fn3CEE_499E
// Return size: 0
define fn3CEE_499E
fn3CEE_499E_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_499E
l3CEE_499E:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0xA<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = Mem0[es:bx + 64<i16>:word16]
	SCZO = cond(Mem0[es:bx + 44<i16>:word16] - ax)
	branch Test(GE,SO) l3CEE_49D2
	// succ:  l3CEE_49B4 l3CEE_49D2
l3CEE_49B4:
	si = Mem0[es:bx:word16]
	SCZO = cond(ax - si)
	branch Test(LE,SZO) l3CEE_49D2
	// succ:  l3CEE_49BB l3CEE_49D2
l3CEE_49BB:
	ax = Mem0[es:bx + 44<i16>:word16]
	SCZO = cond(ax - si)
	branch Test(GE,SO) l3CEE_49C5
	// succ:  l3CEE_49C3 l3CEE_49C5
l3CEE_49C3:
	ax = si
	// succ:  l3CEE_49C5
l3CEE_49C5:
	Mem0[es:bx + 64<i16>:word16] = ax
	Mem0[es:bx + 66<i16>:word16] = 0<16>
	goto l3CEE_4A02
	// succ:  l3CEE_4A02
l3CEE_49D2:
	ax = Mem0[es:bx + 66<i16>:word16]
	SCZO = cond(Mem0[es:bx + 44<i16>:word16] - ax)
	branch Test(LE,SZO) l3CEE_4A02
	// succ:  l3CEE_49DC l3CEE_4A02
l3CEE_49DC:
	ax = ax | ax
	SZ = cond(ax)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_4A02
	// succ:  l3CEE_49E0 l3CEE_4A02
l3CEE_49E0:
	ax = Mem0[es:bx + 2<i16>:word16]
	SCZO = cond(Mem0[es:bx + 66<i16>:word16] - ax)
	branch Test(GE,SO) l3CEE_4A02
	// succ:  l3CEE_49EA l3CEE_4A02
l3CEE_49EA:
	ax = Mem0[es:bx + 44<i16>:word16]
	SCZO = cond(ax - Mem0[es:bx + 2<i16>:word16])
	branch Test(LE,SZO) l3CEE_49F8
	// succ:  l3CEE_49F4 l3CEE_49F8
l3CEE_49F4:
	ax = Mem0[es:bx + 2<i16>:word16]
	// succ:  l3CEE_49F8
l3CEE_49F8:
	Mem0[es:bx + 66<i16>:word16] = ax
	Mem0[es:bx + 64<i16>:word16] = 0<16>
	// succ:  l3CEE_4A02
l3CEE_4A02:
	SCZO = cond(Mem0[es:bx + 66<i16>:word16] - 0<16>)
	branch Test(NE,Z) l3CEE_4A0E
	// succ:  l3CEE_4A09 l3CEE_4A0E
l3CEE_4A09:
	ax = ax - ax
	SCZO = cond(ax)
	goto l3CEE_4A18
	// succ:  l3CEE_4A18
l3CEE_4A0E:
	SCZO = cond(Mem0[es:bx + 64<i16>:word16] - 0<16>)
	branch Test(NE,Z) l3CEE_4A13_thunk_fn3CEE_4A20
	goto l3CEE_4A15
	// succ:  l3CEE_4A15 l3CEE_4A13_thunk_fn3CEE_4A20
l3CEE_4A13_thunk_fn3CEE_4A20:
	call fn3CEE_4A20 (retsize: 0;)
	return
	// succ:  fn3CEE_499E_exit
l3CEE_4A15:
	ax = 1<16>
	// succ:  l3CEE_4A18
l3CEE_4A18:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn3CEE_3E50 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	// succ:  l3CEE_4A1D_thunk_fn3CEE_4A20
l3CEE_4A1D_thunk_fn3CEE_4A20:
	call fn3CEE_4A20 (retsize: 0;)
	return
	// succ:  fn3CEE_499E_exit
fn3CEE_499E_exit:


// fn3CEE_4A1E
// Return size: 4
define fn3CEE_4A1E
fn3CEE_4A1E_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_4A1E
l3CEE_4A1E:
	es_ax = Mem0[ss:bp + 0<16> + si:segptr32]
	// succ:  l3CEE_4A1E_thunk_fn3CEE_4A20
l3CEE_4A1E_thunk_fn3CEE_4A20:
	call fn3CEE_4A20 (retsize: 0;)
	return
	// succ:  fn3CEE_4A1E_exit
fn3CEE_4A1E_exit:


// fn3CEE_4A20
// Return size: 0
define fn3CEE_4A20
fn3CEE_4A20_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_4A20
l3CEE_4A20:
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = Mem0[es:bx + 64<i16>:word16]
	SCZO = cond(Mem0[es:bx + 44<i16>:word16] - ax)
	branch Test(LT,SO) l3CEE_4A2C_thunk_fn3CEE_4A3C
	goto l3CEE_4A2C_thunk_fn3CEE_4A2E
	// succ:  l3CEE_4A2C_thunk_fn3CEE_4A2E l3CEE_4A2C_thunk_fn3CEE_4A3C
l3CEE_4A20:
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = Mem0[es:bx + 64<i16>:word16]
	SCZO = cond(Mem0[es:bx + 44<i16>:word16] - ax)
	branch Test(LT,SO) l3CEE_4A3C
	goto l3CEE_4A2C_thunk_fn3CEE_4A2E
	// succ:  l3CEE_4A2C_thunk_fn3CEE_4A2E l3CEE_4A2C_thunk_fn3CEE_4A3C
l3CEE_4A2C_thunk_fn3CEE_4A2E:
	call fn3CEE_4A2E (retsize: 0;)
	return
	// succ:  fn3CEE_4A20_exit
l3CEE_4A2C_thunk_fn3CEE_4A2E:
	call fn3CEE_4A2E (retsize: 0;)
	return
	// succ:  fn3CEE_4A20_exit
l3CEE_4A2C_thunk_fn3CEE_4A3C:
	call fn3CEE_4A3C (retsize: 0;)
	return
	// succ:  fn3CEE_4A20_exit
l3CEE_4A2C_thunk_fn3CEE_4A3C:
	call fn3CEE_4A3C (retsize: 0;)
	return
	// succ:  fn3CEE_4A20_exit
fn3CEE_4A20_exit:


// fn3CEE_4A2E
// Return size: 0
define fn3CEE_4A2E
fn3CEE_4A2E_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_4A2E
l3CEE_4A2E:
	ax = Mem0[es:bx + 44<i16>:word16]
	SCZO = cond(ax - Mem0[es:bx + 66<i16>:word16])
	branch Test(LE,SZO) l3CEE_4A3C
	goto l3CEE_4A38
	// succ:  l3CEE_4A38 l3CEE_4A36_thunk_fn3CEE_4A3C
l3CEE_4A36_thunk_fn3CEE_4A3C:
	call fn3CEE_4A3C (retsize: 0;)
	return
	// succ:  fn3CEE_4A2E_exit
l3CEE_4A38:
	ax = Mem0[es:bx + 66<i16>:word16]
	// succ:  l3CEE_4A38_thunk_fn3CEE_4A3C
l3CEE_4A38_thunk_fn3CEE_4A3C:
	call fn3CEE_4A3C (retsize: 0;)
	return
	// succ:  fn3CEE_4A2E_exit
fn3CEE_4A2E_exit:


// fn3CEE_4A3C
// Return size: 0
define fn3CEE_4A3C
fn3CEE_4A3C_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_4A3C
l3CEE_4A3C:
	Mem0[es:bx + 44<i16>:word16] = ax
	SCZO = cond(Mem0[es:bx + 72<i16>:word16] - 0<16>)
	branch Test(EQ,Z) l3CEE_4A6C
	// succ:  l3CEE_4A47 l3CEE_4A6C
l3CEE_4A47:
	SCZO = cond(Mem0[es:bx + 52<i16>:word16] - 0<16>)
	branch Test(LE,SZO) l3CEE_4A56
	// succ:  l3CEE_4A4E l3CEE_4A56
l3CEE_4A4E:
	Mem0[es:bx + 70<i16>:word16] = 1<16>
	goto l3CEE_4A63
	// succ:  l3CEE_4A63
l3CEE_4A56:
	SCZO = cond(Mem0[es:bx + 52<i16>:word16] - 0<16>)
	branch Test(GE,SO) l3CEE_4A63
	// succ:  l3CEE_4A5D l3CEE_4A63
l3CEE_4A5D:
	Mem0[es:bx + 68<i16>:word16] = 1<16>
	// succ:  l3CEE_4A63
l3CEE_4A63:
	Mem0[es:bx + 52<i16>:word16] = 0<16>
	goto l3CEE_4A91
	// succ:  l3CEE_4A91
l3CEE_4A6C:
	ax = Mem0[es:bx + 38<i16>:word16]
	SCZO = cond(Mem0[es:bx + 50<i16>:word16] - ax)
	branch Test(NE,Z) l3CEE_4A91
	// succ:  l3CEE_4A76 l3CEE_4A91
l3CEE_4A76:
	Mem0[es:bx + 52<i16>:word16] = 0<16>
	call fn3CEE_3CD2 (retsize: 4;)
	ax = ax | ax
	SZ = cond(ax)
	O = false
	C = false
	branch Test(NE,Z) l3CEE_4A91
	// succ:  l3CEE_4A84 l3CEE_4A91
l3CEE_4A84:
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = Mem0[es:bx + 40<i16>:word16]
	ax = ax + 1<16>
	SZO = cond(ax)
	Mem0[es:bx + 50<i16>:word16] = ax
	// succ:  l3CEE_4A91
l3CEE_4A91:
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	SCZO = cond(Mem0[es:bx + 52<i16>:word16] - 0<16>)
	branch Test(NE,Z) l3CEE_4A9F
	// succ:  l3CEE_4A9C l3CEE_4A9F
l3CEE_4A9C:
	goto l3CEE_4C9F
	// succ:  l3CEE_4C9F
l3CEE_4A9F:
	ax = Mem0[es:bx + 52<i16>:word16]
	Mem0[ss:bp - 6<i16>:word16] = ax
	ax = Mem0[es:bx + 46<i16>:word16]
	ax = ax + Mem0[ss:bp - 6<i16>:word16]
	SCZO = cond(ax)
	Mem0[ss:bp - 2<i16>:word16] = ax
	SCZO = cond(Mem0[es:bx + 38<i16>:word16] - ax)
	branch Test(GT,SZO) l3CEE_4AB9
	// succ:  l3CEE_4AB6 l3CEE_4AB9
l3CEE_4AB6:
	goto l3CEE_4B66
	// succ:  l3CEE_4B66
l3CEE_4AB9:
	bx = Mem0[es:bx + 38<i16>:word16]
	bx = bx << 1<16>
	SCZO = cond(bx)
	bx = bx << 1<16>
	SCZO = cond(bx)
	si = Mem0[ds:0x3A86<16>:word16]
	es_si = Mem0[es:si + 82<i16>:segptr32]
	ax = Mem0[es:bx + si:word16]
	dx = Mem0[es:bx + 2<i16> + si:word16]
	Mem0[ss:bp - 10<i16>:word16] = ax
	Mem0[ss:bp - 8<i16>:word16] = dx
	ax = ax | dx
	SZ = cond(ax)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_4AE8
	// succ:  l3CEE_4ADA l3CEE_4AE8
l3CEE_4ADA:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	v38 = Mem0[ss:bp - 10<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v38
	call fn3CEE_3C78 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	goto l3CEE_4AFC
	// succ:  l3CEE_4AFC
l3CEE_4AE8:
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = Mem0[es:bx + 38<i16>:word16]
	ax = ax - Mem0[es:bx + 48<i16>:word16]
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn3CEE_3C50 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	// succ:  l3CEE_4AFC
l3CEE_4AFC:
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = Mem0[es:bx + 38<i16>:word16]
	Mem0[es:bx + 48<i16>:word16] = ax
	Mem0[es:bx + 52<i16>:word16] = 0<16>
	// succ:  l3CEE_4B0E
l3CEE_4B0E:
	SCZO = cond(Mem0[ss:bp - 6<i16>:word16] - 0<16>)
	branch Test(NE,Z) l3CEE_4B17
	// succ:  l3CEE_4B14 l3CEE_4B17
l3CEE_4B14:
	goto l3CEE_4C9F
	// succ:  l3CEE_4C9F
l3CEE_4B17:
	ax = 0xFFFF<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn3CEE_3C50 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	call fn3CEE_3CB8 (retsize: 4;)
	ax = ax | ax
	SZ = cond(ax)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_4B58
	// succ:  l3CEE_4B2A l3CEE_4B58
l3CEE_4B2A:
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	SCZO = cond(Mem0[es:bx + 52<i16>:word16] - 0<16>)
	branch Test(EQ,Z) l3CEE_4B38
	// succ:  l3CEE_4B35 l3CEE_4B38
l3CEE_4B35:
	goto l3CEE_4C9F
	// succ:  l3CEE_4C9F
l3CEE_4B38:
	ax = Mem0[es:bx + 38<i16>:word16]
	SCZO = cond(Mem0[es:bx + 46<i16>:word16] - ax)
	branch Test(NE,Z) l3CEE_4B4C
	// succ:  l3CEE_4B42 l3CEE_4B4C
l3CEE_4B42:
	Mem0[es:bx + 68<i16>:word16] = 1<16>
	goto l3CEE_4C9F
	// succ:  l3CEE_4C9F
l3CEE_4B4C:
	ax = Mem0[es:bx + 38<i16>:word16]
	// succ:  l3CEE_4B50
l3CEE_4B50:
	Mem0[es:bx + 46<i16>:word16] = ax
	goto l3CEE_4C9F
	// succ:  l3CEE_4C9F
l3CEE_4B58:
	v39 = Mem0[ss:bp - 6<i16>:word16] + 1<16>
	Mem0[ss:bp - 6<i16>:word16] = v39
	SZO = cond(v39)
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	v40 = Mem0[es:bx + 52<i16>:word16] - 1<16>
	Mem0[es:bx + 52<i16>:word16] = v40
	SZO = cond(v40)
	goto l3CEE_4B0E
	// succ:  l3CEE_4B0E
l3CEE_4B66:
	ax = Mem0[es:bx + 50<i16>:word16]
	ax = ax - 1<16>
	SZO = cond(ax)
	SCZO = cond(ax - Mem0[ss:bp - 2<i16>:word16])
	branch Test(LT,SO) l3CEE_4B73
	// succ:  l3CEE_4B70 l3CEE_4B73
l3CEE_4B70:
	goto l3CEE_4C92
	// succ:  l3CEE_4C92
l3CEE_4B73:
	es_bx = Mem0[es:bx + 82<i16>:segptr32]
	ax = es
	es_si = Mem0[ds:0x3A86<16>:segptr32]
	si = Mem0[es:si + 50<i16>:word16]
	si = si << 1<16>
	SCZO = cond(si)
	si = si << 1<16>
	SCZO = cond(si)
	es = ax
	ax = Mem0[es:bx - 4<i16> + si:word16]
	dx = Mem0[es:bx - 2<i16> + si:word16]
	Mem0[ss:bp - 10<i16>:word16] = ax
	Mem0[ss:bp - 8<i16>:word16] = dx
	ax = ax | dx
	SZ = cond(ax)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_4BA6
	// succ:  l3CEE_4B99 l3CEE_4BA6
l3CEE_4B99:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	v33 = Mem0[ss:bp - 10<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v33
	call fn3CEE_3C78 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	goto l3CEE_4BBB
	// succ:  l3CEE_4BBB
l3CEE_4BA6:
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = Mem0[es:bx + 50<i16>:word16]
	ax = ax - Mem0[es:bx + 48<i16>:word16]
	SCZO = cond(ax)
	ax = ax - 1<16>
	SZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn3CEE_3C50 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	// succ:  l3CEE_4BBB
l3CEE_4BBB:
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = Mem0[es:bx + 50<i16>:word16]
	ax = ax - 1<16>
	SZO = cond(ax)
	Mem0[es:bx + 48<i16>:word16] = ax
	Mem0[es:bx + 52<i16>:word16] = 0<16>
	// succ:  l3CEE_4BCE
l3CEE_4BCE:
	SCZO = cond(Mem0[ss:bp - 6<i16>:word16] - 0<16>)
	branch Test(NE,Z) l3CEE_4BD7
	// succ:  l3CEE_4BD4 l3CEE_4BD7
l3CEE_4BD4:
	goto l3CEE_4C9F
	// succ:  l3CEE_4C9F
l3CEE_4BD7:
	ax = 1<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn3CEE_3C50 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	call fn3CEE_3C96 (retsize: 4;)
	ax = ax | ax
	SZ = cond(ax)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_4C20
	// succ:  l3CEE_4BEA l3CEE_4C20
l3CEE_4BEA:
	ax = 0xFFFF<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn3CEE_3C50 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	SCZO = cond(Mem0[es:bx + 52<i16>:word16] - 0<16>)
	branch Test(EQ,Z) l3CEE_4C03
	// succ:  l3CEE_4C00 l3CEE_4C03
l3CEE_4C00:
	goto l3CEE_4C9F
	// succ:  l3CEE_4C9F
l3CEE_4C03:
	ax = Mem0[es:bx + 50<i16>:word16]
	ax = ax - 1<16>
	SZO = cond(ax)
	SCZO = cond(ax - Mem0[es:bx + 46<i16>:word16])
	branch Test(NE,Z) l3CEE_4C18
	// succ:  l3CEE_4C0E l3CEE_4C18
l3CEE_4C0E:
	Mem0[es:bx + 70<i16>:word16] = 1<16>
	goto l3CEE_4C9F
	// succ:  l3CEE_4C9F
l3CEE_4C18:
	ax = Mem0[es:bx + 50<i16>:word16]
	ax = ax - 1<16>
	SZO = cond(ax)
	goto l3CEE_4B50
	// succ:  l3CEE_4B50
l3CEE_4C20:
	v34 = Mem0[ss:bp - 6<i16>:word16] - 1<16>
	Mem0[ss:bp - 6<i16>:word16] = v34
	SZO = cond(v34)
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = Mem0[es:bx + 40<i16>:word16]
	SCZO = cond(Mem0[es:bx + 50<i16>:word16] - ax)
	branch Test(GT,SZO) l3CEE_4C86
	// succ:  l3CEE_4C31 l3CEE_4C86
l3CEE_4C31:
	v35 = Mem0[es:bx + 50<i16>:word16] + 1<16>
	Mem0[es:bx + 50<i16>:word16] = v35
	SZO = cond(v35)
	v36 = Mem0[es:bx + 48<i16>:word16] + 1<16>
	Mem0[es:bx + 48<i16>:word16] = v36
	SZO = cond(v36)
	bx = Mem0[es:bx + 48<i16>:word16]
	bx = bx << 1<16>
	SCZO = cond(bx)
	si = Mem0[ds:0x3A86<16>:word16]
	es_si = Mem0[es:si + 74<i16>:segptr32]
	Mem0[es:bx + si:word16] = 0<16>
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	bx = Mem0[es:bx + 48<i16>:word16]
	bx = bx << 1<16>
	SCZO = cond(bx)
	si = Mem0[ds:0x3A86<16>:word16]
	es_si = Mem0[es:si + 78<i16>:segptr32]
	Mem0[es:bx + si:word16] = 0<16>
	call fn3CEE_3AEE (retsize: 4;)
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	bx = Mem0[es:bx + 48<i16>:word16]
	bx = bx << 1<16>
	SCZO = cond(bx)
	bx = bx << 1<16>
	SCZO = cond(bx)
	si = Mem0[ds:0x3A86<16>:word16]
	es_si = Mem0[es:si + 82<i16>:segptr32]
	Mem0[es:bx + si:word16] = ax
	Mem0[es:bx + 2<i16> + si:word16] = dx
	goto l3CEE_4BCE
	// succ:  l3CEE_4BCE
l3CEE_4C86:
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	v37 = Mem0[es:bx + 52<i16>:word16] + 1<16>
	Mem0[es:bx + 52<i16>:word16] = v37
	SZO = cond(v37)
	goto l3CEE_4BCE
	// succ:  l3CEE_4BCE
l3CEE_4C92:
	ax = Mem0[ss:bp - 2<i16>:word16]
	Mem0[es:bx + 46<i16>:word16] = ax
	Mem0[es:bx + 52<i16>:word16] = 0<16>
	// succ:  l3CEE_4C9F
l3CEE_4C9F:
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	SCZO = cond(Mem0[es:bx + 52<i16>:word16] - 0<16>)
	branch Test(EQ,Z) l3CEE_4CE7
	// succ:  l3CEE_4CAA l3CEE_4CE7
l3CEE_4CAA:
	v13 = Mem0[es:bx + 52<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v13
	call fn3CEE_3F4C (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	SCZO = cond(Mem0[es:bx + 52<i16>:word16] - 0<16>)
	branch Test(GE,SO) l3CEE_4CE1
	// succ:  l3CEE_4CC0 l3CEE_4CE1
l3CEE_4CC0:
	ax = Mem0[es:bx + 40<i16>:word16]
	SCZO = cond(Mem0[es:bx + 50<i16>:word16] - ax)
	branch Test(GT,SZO) l3CEE_4CE1
	// succ:  l3CEE_4CCA l3CEE_4CE1
l3CEE_4CCA:
	ax = Mem0[es:bx + 50<i16>:word16]
	ax = ax - Mem0[es:bx + 52<i16>:word16]
	SCZO = cond(ax)
	cx = Mem0[es:bx + 40<i16>:word16]
	cx = cx + 1<16>
	SZO = cond(cx)
	SCZO = cond(ax - cx)
	branch Test(LE,SZO) l3CEE_4CDD
	// succ:  l3CEE_4CDB l3CEE_4CDD
l3CEE_4CDB:
	ax = cx
	// succ:  l3CEE_4CDD
l3CEE_4CDD:
	Mem0[es:bx + 50<i16>:word16] = ax
	// succ:  l3CEE_4CE1
l3CEE_4CE1:
	Mem0[es:bx + 52<i16>:word16] = 0<16>
	// succ:  l3CEE_4CE7
l3CEE_4CE7:
	Mem0[ss:bp - 4<i16>:word16] = 0<16>
	goto l3CEE_4D0E
	// succ:  l3CEE_4D0E
l3CEE_4CEE:
	bx = Mem0[ss:bp - 4<i16>:word16]
	bx = bx << 1<16>
	SCZO = cond(bx)
	si = Mem0[ds:0x3A86<16>:word16]
	es_si = Mem0[es:si + 78<i16>:segptr32]
	SCZO = cond(Mem0[es:bx + si:word16] - 0<16>)
	branch Test(NE,Z) l3CEE_4D0B
	// succ:  l3CEE_4D01 l3CEE_4D0B
l3CEE_4D01:
	v31 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v31
	call fn3CEE_4882 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	// succ:  l3CEE_4D0B
l3CEE_4D0B:
	v32 = Mem0[ss:bp - 4<i16>:word16] + 1<16>
	Mem0[ss:bp - 4<i16>:word16] = v32
	SZO = cond(v32)
	// succ:  l3CEE_4D0E
l3CEE_4D0E:
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = Mem0[ss:bp - 4<i16>:word16]
	SCZO = cond(Mem0[es:bx + 38<i16>:word16] - ax)
	branch Test(GT,SZO) l3CEE_4CEE
	// succ:  l3CEE_4D1B l3CEE_4CEE
l3CEE_4D1B:
	ax = Mem0[es:bx + 40<i16>:word16]
	ax = ax + 1<16>
	SZO = cond(ax)
	Mem0[ss:bp - 4<i16>:word16] = ax
	goto l3CEE_4D46
	// succ:  l3CEE_4D46
l3CEE_4D26:
	bx = Mem0[ss:bp - 4<i16>:word16]
	bx = bx << 1<16>
	SCZO = cond(bx)
	si = Mem0[ds:0x3A86<16>:word16]
	es_si = Mem0[es:si + 78<i16>:segptr32]
	SCZO = cond(Mem0[es:bx + si:word16] - 0<16>)
	branch Test(NE,Z) l3CEE_4D43
	// succ:  l3CEE_4D39 l3CEE_4D43
l3CEE_4D39:
	v29 = Mem0[ss:bp - 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v29
	call fn3CEE_4882 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	// succ:  l3CEE_4D43
l3CEE_4D43:
	v30 = Mem0[ss:bp - 4<i16>:word16] + 1<16>
	Mem0[ss:bp - 4<i16>:word16] = v30
	SZO = cond(v30)
	// succ:  l3CEE_4D46
l3CEE_4D46:
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = Mem0[ss:bp - 4<i16>:word16]
	SCZO = cond(Mem0[es:bx + 42<i16>:word16] - ax)
	branch Test(GE,SO) l3CEE_4D26
	// succ:  l3CEE_4D53 l3CEE_4D26
l3CEE_4D53:
	Mem0[ss:bp - 4<i16>:word16] = 1<16>
	Mem0[ss:bp - 2<i16>:word16] = 0<16>
	Mem0[ss:bp - 6<i16>:word16] = 0<16>
	goto l3CEE_4D8E
	// succ:  l3CEE_4D8E
l3CEE_4D64:
	v22 = Mem0[ss:bp - 2<i16>:word16] + 1<16>
	Mem0[ss:bp - 2<i16>:word16] = v22
	SZO = cond(v22)
	SCZO = cond(Mem0[ss:bp - 4<i16>:word16] - 0<16>)
	branch Test(LE,SZO) l3CEE_4D8B
	// succ:  l3CEE_4D6D l3CEE_4D8B
l3CEE_4D6D:
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = Mem0[es:bx + 46<i16>:word16]
	ax = ax + Mem0[ss:bp - 2<i16>:word16]
	SCZO = cond(ax)
	SCZO = cond(ax - Mem0[es:bx + 40<i16>:word16])
	branch Test(LE,SZO) l3CEE_4D8B
	// succ:  l3CEE_4D7E l3CEE_4D8B
l3CEE_4D7E:
	ax = Mem0[ss:bp - 4<i16>:word16]
	C = ax != 0<16>
	ax = -ax
	SZO = cond(ax)
	Mem0[ss:bp - 4<i16>:word16] = ax
	Mem0[ss:bp - 2<i16>:word16] = 1<16>
	// succ:  l3CEE_4D8B
l3CEE_4D8B:
	v24 = Mem0[ss:bp - 6<i16>:word16] + 1<16>
	Mem0[ss:bp - 6<i16>:word16] = v24
	SZO = cond(v24)
	// succ:  l3CEE_4D8E
l3CEE_4D8E:
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = Mem0[es:bx + 28<i16>:word16]
	SCZO = cond(Mem0[ss:bp - 6<i16>:word16] - ax)
	branch Test(UGT,CZ) l3CEE_4DF7
	// succ:  l3CEE_4D9B l3CEE_4DF7
l3CEE_4D9B:
	ax = Mem0[ss:bp - 2<i16>:word16]
	dx_ax = Mem0[ss:bp - 4<i16>:word16] *s32 ax
	SCZO = cond(dx_ax)
	si = ax
	si = si + Mem0[es:bx + 46<i16>:word16]
	SCZO = cond(si)
	di = si
	di = di << 1<16>
	SCZO = cond(di)
	es_bx = Mem0[es:bx + 74<i16>:segptr32]
	SCZO = cond(Mem0[es:bx + di:word16] - 0<16>)
	branch Test(NE,Z) l3CEE_4DBD
	// succ:  l3CEE_4DB5 l3CEE_4DBD
l3CEE_4DB5:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	call fn3CEE_471A (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	// succ:  l3CEE_4DBD
l3CEE_4DBD:
	ax = Mem0[ss:bp - 2<i16>:word16]
	dx_ax = Mem0[ss:bp - 4<i16>:word16] *s32 ax
	SCZO = cond(dx_ax)
	si = ax
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	si = si + Mem0[es:bx + 46<i16>:word16]
	SCZO = cond(si)
	di = si
	di = di << 1<16>
	SCZO = cond(di)
	es_bx = Mem0[es:bx + 78<i16>:segptr32]
	SCZO = cond(Mem0[es:bx + di:word16] - 0<16>)
	branch Test(NE,Z) l3CEE_4DE3
	// succ:  l3CEE_4DDB l3CEE_4DE3
l3CEE_4DDB:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	call fn3CEE_4882 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	// succ:  l3CEE_4DE3
l3CEE_4DE3:
	SCZO = cond(Mem0[ss:bp + 6<i16>:word16] - 0<16>)
	branch Test(EQ,Z) l3CEE_4DEC
	// succ:  l3CEE_4DE9 l3CEE_4DEC
l3CEE_4DE9:
	goto l3CEE_4D64
	// succ:  l3CEE_4D64
l3CEE_4DEC:
	call fn3CEE_3BF8 (retsize: 4;)
	ax = ax | ax
	SZ = cond(ax)
	O = false
	C = false
	branch Test(NE,Z) l3CEE_4DF7
	// succ:  l3CEE_4DF4 l3CEE_4DF7
l3CEE_4DF4:
	goto l3CEE_4D64
	// succ:  l3CEE_4D64
l3CEE_4DF7:
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = Mem0[es:bx + 28<i16>:word16]
	SCZO = cond(Mem0[ss:bp - 6<i16>:word16] - ax)
	branch Test(UGT,CZ) l3CEE_4E07
	// succ:  l3CEE_4E04 l3CEE_4E07
l3CEE_4E04:
	goto l3CEE_4E9B
	// succ:  l3CEE_4E9B
l3CEE_4E07:
	ax = Mem0[es:bx + 60<i16>:word16]
	ax = ax | Mem0[es:bx + 62<i16>:word16]
	SZ = cond(ax)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_4E26
	// succ:  l3CEE_4E11 l3CEE_4E26
l3CEE_4E11:
	call fn3CEE_3B2A (retsize: 4;)
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	SCZO = cond(ax - Mem0[es:bx + 40<i16>:word16])
	branch Test(GT,SZO) l3CEE_4E26
	// succ:  l3CEE_4E1F l3CEE_4E26
l3CEE_4E1F:
	call fn3CEE_3B2A (retsize: 4;)
	goto l3CEE_4E57
	// succ:  l3CEE_4E57
l3CEE_4E26:
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = Mem0[es:bx + 50<i16>:word16]
	SCZO = cond(Mem0[es:bx + 46<i16>:word16] - ax)
	branch Test(LT,SO) l3CEE_4E5F
	// succ:  l3CEE_4E34 l3CEE_4E5F
l3CEE_4E34:
	SCZO = cond(Mem0[es:bx + 72<i16>:word16] - 0<16>)
	branch Test(NE,Z) l3CEE_4E43
	// succ:  l3CEE_4E3B l3CEE_4E43
l3CEE_4E3B:
	call fn3CEE_3CD2 (retsize: 4;)
	ax = ax | ax
	SZ = cond(ax)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_4E4E
	// succ:  l3CEE_4E43 l3CEE_4E4E
l3CEE_4E43:
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = Mem0[es:bx + 50<i16>:word16]
	goto l3CEE_4E57
	// succ:  l3CEE_4E57
l3CEE_4E4E:
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = Mem0[es:bx + 50<i16>:word16]
	ax = ax - 1<16>
	SZO = cond(ax)
	// succ:  l3CEE_4E57
l3CEE_4E57:
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	Mem0[es:bx + 46<i16>:word16] = ax
	// succ:  l3CEE_4E5F
l3CEE_4E5F:
	bx = Mem0[es:bx + 46<i16>:word16]
	bx = bx << 1<16>
	SCZO = cond(bx)
	bx = bx << 1<16>
	SCZO = cond(bx)
	si = Mem0[ds:0x3A86<16>:word16]
	es_si = Mem0[es:si + 82<i16>:segptr32]
	ax = Mem0[es:bx + si:word16]
	dx = Mem0[es:bx + 2<i16> + si:word16]
	dx = dx | dx
	SZ = cond(dx)
	O = false
	C = false
	branch Test(GT,SZO) l3CEE_4E86
	// succ:  l3CEE_4E7A l3CEE_4E86
l3CEE_4E7A:
	branch Test(LT,SO) l3CEE_4E81
	// succ:  l3CEE_4E7C l3CEE_4E81
l3CEE_4E7C:
	SCZO = cond(ax - 1<16>)
	branch Test(UGE,C) l3CEE_4E86
	// succ:  l3CEE_4E81 l3CEE_4E86
l3CEE_4E81:
	dx = dx - dx
	SCZO = cond(dx)
	ax = 1<16>
	// succ:  l3CEE_4E86
l3CEE_4E86:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn3CEE_3C78 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = Mem0[es:bx + 46<i16>:word16]
	Mem0[es:bx + 48<i16>:word16] = ax
	// succ:  l3CEE_4E9B
l3CEE_4E9B:
	ax = ax - ax
	SCZO = cond(ax)
	Mem0[es:bx + 62<i16>:word16] = ax
	Mem0[es:bx + 60<i16>:word16] = ax
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	di = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn3CEE_4A3C_exit
fn3CEE_4A3C_exit:


// fn3CEE_4EAC
// Return size: 4
define fn3CEE_4EAC
fn3CEE_4EAC_entry:
	sp = fp
	Top = 0<i8>
	goto l3CEE_4EAC
	// succ:  l3CEE_4EAC
l3CEE_0BDB:
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn3CEE_4EAC_exit
l3CEE_33D0:
	si = si + bp + C
	SCZO = cond(si)
	SCZO = cond(al - 0xB8<8>)
	ax = ax ^ 0x8EBA<16>
	SZ = cond(ax)
	O = false
	C = false
	bp = bp - 1<16>
	SZO = cond(bp)
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn3CEE_4EAC_exit
l3CEE_4EAC:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0xC<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	Mem0[ss:bp - 4<i16>:word16] = 0<16>
	Mem0[ss:bp - 10<i16>:word16] = 1<16>
	Mem0[ss:bp - 6<i16>:word16] = 1<16>
	// succ:  l3CEE_4EC2
l3CEE_4EC2:
	SCZO = cond(Mem0[ss:bp - 6<i16>:word16] - 0<16>)
	branch Test(NE,Z) l3CEE_4ECB
	// succ:  l3CEE_4EC8 l3CEE_4ECB
l3CEE_4EC8:
	goto l3CEE_53E8
	// succ:  l3CEE_53E8
l3CEE_4ECB:
	ax = Mem0[ss:bp - 4<i16>:word16]
	SCZO = cond(ax - 0x12<16>)
	branch Test(EQ,Z) l3CEE_4F4E
	// succ:  l3CEE_4ED3 l3CEE_4F4E
l3CEE_4ED3:
	branch Test(ULE,CZ) l3CEE_4ED8
	// succ:  l3CEE_4ED5 l3CEE_4ED8
l3CEE_4ED5:
	goto l3CEE_538C
	// succ:  l3CEE_538C
l3CEE_4ED8:
	v35 = ax
	SCZO = cond(ax - 6<16>)
	branch Test(ULE,CZ) l3CEE_4EE0
	// succ:  l3CEE_4EDD l3CEE_4EE0
l3CEE_4EDD:
	goto l3CEE_53AE
	// succ:  l3CEE_53AE
l3CEE_4EE0:
	ax = ax + ax
	SCZO = cond(ax)
	v34 = bx
	bx = ax
	ax = v34
	switch (v35) { l3CEE_8BD0 l3CEE_4EE3_thunk_fn3CEE_EBC3 l3CEE_8B1D l3CEE_33D0 l3CEE_0BDB l3CEE_79D2 l3CEE_F715_in_fn3CEE_4EAC }
	// succ:  l3CEE_8BD0 l3CEE_4EE3_thunk_fn3CEE_EBC3 l3CEE_8B1D l3CEE_33D0 l3CEE_0BDB l3CEE_79D2 l3CEE_F715_in_fn3CEE_4EAC
l3CEE_4EE3_thunk_fn3CEE_EBC3:
	call fn3CEE_EBC3 (retsize: 0;)
	return
	// succ:  fn3CEE_4EAC_exit
l3CEE_4F26:
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	v31 = Mem0[es:bx + 52<i16>:word16] + 1<16>
	Mem0[es:bx + 52<i16>:word16] = v31
	SZO = cond(v31)
	goto l3CEE_5094
	// succ:  l3CEE_5094
l3CEE_4F4E:
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = Mem0[es:bx + 28<i16>:word16]
	v410 = Mem0[es:bx + 52<i16>:word16] - ax
	Mem0[es:bx + 52<i16>:word16] = v410
	SCZO = cond(v410)
	goto l3CEE_5094
	// succ:  l3CEE_5094
l3CEE_4F5E:
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	SCZO = cond(Mem0[es:bx + 72<i16>:word16] - 0<16>)
	branch Test(EQ,Z) l3CEE_4F72
	// succ:  l3CEE_4F69 l3CEE_4F72
l3CEE_4F69:
	Mem0[es:bx + 68<i16>:word16] = 1<16>
	goto l3CEE_5094
	// succ:  l3CEE_5094
l3CEE_4F72:
	call fn2644_2C1A (retsize: 4;)
	goto l3CEE_5338
	// succ:  l3CEE_5338
l3CEE_4F7A:
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	SCZO = cond(Mem0[es:bx + 72<i16>:word16] - 0<16>)
	branch Test(EQ,Z) l3CEE_4F8E
	// succ:  l3CEE_4F85 l3CEE_4F8E
l3CEE_4F85:
	Mem0[es:bx + 70<i16>:word16] = 1<16>
	goto l3CEE_5094
	// succ:  l3CEE_5094
l3CEE_4F8E:
	call fn2644_2CF0 (retsize: 4;)
	call fn3CEE_3B0C (retsize: 4;)
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	cx = Mem0[es:bx + 28<i16>:word16]
	cx = cx - 1<16>
	SZO = cond(cx)
	bx = bx - bx
	SCZO = cond(bx)
	SCZO = cond(bx - dx)
	branch Test(UGT,CZ) l3CEE_4FB8
	// succ:  l3CEE_4FA6 l3CEE_4FB8
l3CEE_4FA6:
	branch Test(ULT,C) l3CEE_4FAC
	// succ:  l3CEE_4FA8 l3CEE_4FAC
l3CEE_4FA8:
	SCZO = cond(cx - ax)
	branch Test(UGE,C) l3CEE_4FB8
	// succ:  l3CEE_4FAC l3CEE_4FB8
l3CEE_4FAC:
	bx = Mem0[ds:0x3A86<16>:word16]
	ax = Mem0[es:bx + 28<i16>:word16]
	ax = ax - 1<16>
	SZO = cond(ax)
	goto l3CEE_4FBC
	// succ:  l3CEE_4FBC
l3CEE_4FB8:
	call fn3CEE_3B0C (retsize: 4;)
	// succ:  l3CEE_4FBC
l3CEE_4FBC:
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	goto l3CEE_532A
	// succ:  l3CEE_532A
l3CEE_4FD0:
	sp = sp + 2<16>
	SCZO = cond(sp)
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	// succ:  l3CEE_4FD7
l3CEE_4FD7:
	Mem0[es:bx + 44<i16>:word16] = ax
	goto l3CEE_5094
	// succ:  l3CEE_5094
l3CEE_4FDE:
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	v16 = Mem0[es:bx + 44<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v16
	call fn3CEE_3BC0 (retsize: 4;)
	goto l3CEE_4FD0
	// succ:  l3CEE_4FD0
l3CEE_5000:
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = Mem0[es:bx:word16]
	SCZO = cond(Mem0[es:bx + 64<i16>:word16] - ax)
	branch Test(GT,SZO) l3CEE_5010
	// succ:  l3CEE_500D l3CEE_5010
l3CEE_500D:
	goto l3CEE_5094
	// succ:  l3CEE_5094
l3CEE_5010:
	v25 = Mem0[es:bx + 64<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v25
	call fn3CEE_3BC0 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	Mem0[es:bx + 64<i16>:word16] = ax
	Mem0[es:bx + 66<i16>:word16] = 0<16>
	goto l3CEE_5094
	// succ:  l3CEE_5094
l3CEE_5056:
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = Mem0[es:bx:word16]
	goto l3CEE_4FD7
	// succ:  l3CEE_4FD7
l3CEE_5060:
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = Mem0[es:bx + 2<i16>:word16]
	goto l3CEE_4FD7
	// succ:  l3CEE_4FD7
l3CEE_506C:
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = Mem0[es:bx + 38<i16>:word16]
	Mem0[es:bx + 48<i16>:word16] = ax
	Mem0[es:bx + 46<i16>:word16] = ax
	ax = Mem0[es:bx + 40<i16>:word16]
	ax = ax + 1<16>
	SZO = cond(ax)
	Mem0[es:bx + 50<i16>:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn3CEE_3F4C (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 10<i16>:word16] = 1<16>
	// succ:  l3CEE_5094
l3CEE_5094:
	Mem0[ss:bp - 4<i16>:word16] = 0<16>
	goto l3CEE_4EC2
	// succ:  l3CEE_4EC2
l3CEE_509C:
	call fn3CEE_3CD2 (retsize: 4;)
	ax = ax | ax
	SZ = cond(ax)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_50B6
	// succ:  l3CEE_50A4 l3CEE_50B6
l3CEE_50A4:
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	SCZO = cond(Mem0[es:bx + 72<i16>:word16] - 0<16>)
	branch Test(NE,Z) l3CEE_50B6
	// succ:  l3CEE_50AF l3CEE_50B6
l3CEE_50AF:
	Mem0[ss:bp - 2<i16>:word16] = 3<16>
	goto l3CEE_50DB
	// succ:  l3CEE_50DB
l3CEE_50B6:
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	SCZO = cond(Mem0[es:bx + 70<i16>:word16] - 0<16>)
	branch Test(EQ,Z) l3CEE_50C8
	// succ:  l3CEE_50C1 l3CEE_50C8
l3CEE_50C1:
	Mem0[ss:bp - 2<i16>:word16] = 2<16>
	goto l3CEE_50DB
	// succ:  l3CEE_50DB
l3CEE_50C8:
	SCZO = cond(Mem0[es:bx + 68<i16>:word16] - 0<16>)
	branch Test(EQ,Z) l3CEE_50D6
	// succ:  l3CEE_50CF l3CEE_50D6
l3CEE_50CF:
	Mem0[ss:bp - 2<i16>:word16] = 1<16>
	goto l3CEE_50DB
	// succ:  l3CEE_50DB
l3CEE_50D6:
	Mem0[ss:bp - 2<i16>:word16] = 0<16>
	// succ:  l3CEE_50DB
l3CEE_50DB:
	ax = 1<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn3CEE_499E (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	call fn3CEE_47CC (retsize: 4;)
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = Mem0[es:bx + 10<i16>:word16]
	ax = ax | Mem0[es:bx + 12<i16>:word16]
	SZ = cond(ax)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_5174
	// succ:  l3CEE_50F8 l3CEE_5174
l3CEE_50F8:
	v20 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v20
	call fn2368_01E0 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = Mem0[es:bx + 44<i16>:word16]
	dx_ax = CONVERT(ax, int16, int32)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn2368_0206 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	ax = 2<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn21DC_00A6 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	v23 = Mem0[es:bx + 12<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v23
	v24 = Mem0[es:bx + 10<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v24
	call fn2368_030E (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	call fn21DC_0368 (retsize: 4;)
	es_bx = Mem0[ds:0x1296<16>:segptr32]
	SCZO = cond(Mem0[es:bx:word16] - 2<16>)
	branch Test(NE,Z) l3CEE_514C
	// succ:  l3CEE_5145 l3CEE_514C
l3CEE_5145:
	ax = Mem0[es:bx + 8<i16>:word16]
	goto l3CEE_5164
	// succ:  l3CEE_5164
l3CEE_514C:
	v26 = Mem0[es:bx + 14<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v26
	v27 = Mem0[es:bx + 12<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v27
	v28 = Mem0[es:bx + 10<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v28
	v29 = Mem0[es:bx + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v29
	call fn3CEE_0C5A (retsize: 4;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	// succ:  l3CEE_5164
l3CEE_5164:
	Mem0[ss:bp - 8<i16>:word16] = ax
	call fn2368_033C (retsize: 4;)
	ax = Mem0[ss:bp - 8<i16>:word16]
	Mem0[ss:bp - 6<i16>:word16] = ax
	goto l3CEE_518A
	// succ:  l3CEE_518A
l3CEE_5174:
	Mem0[ss:bp - 8<i16>:word16] = 1<16>
	SCZO = cond(Mem0[ss:bp - 4<i16>:word16] - 0xD<16>)
	branch Test(EQ,Z) l3CEE_5185
	// succ:  l3CEE_517F l3CEE_5185
l3CEE_517F:
	SCZO = cond(Mem0[ss:bp - 4<i16>:word16] - 0x1B<16>)
	branch Test(NE,Z) l3CEE_518A
	// succ:  l3CEE_5185 l3CEE_518A
l3CEE_5185:
	Mem0[ss:bp - 6<i16>:word16] = 0<16>
	// succ:  l3CEE_518A
l3CEE_518A:
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	SCZO = cond(Mem0[es:bx + 72<i16>:word16] - 0<16>)
	branch Test(NE,Z) l3CEE_51B0
	// succ:  l3CEE_5195 l3CEE_51B0
l3CEE_5195:
	call fn3CEE_3C96 (retsize: 4;)
	ax = ax | ax
	SZ = cond(ax)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_51B0
	// succ:  l3CEE_519D l3CEE_51B0
l3CEE_519D:
	call fn3CEE_3CD2 (retsize: 4;)
	ax = ax | ax
	SZ = cond(ax)
	O = false
	C = false
	branch Test(NE,Z) l3CEE_51B0
	// succ:  l3CEE_51A5 l3CEE_51B0
l3CEE_51A5:
	ax = 0xFFFF<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn3CEE_3C50 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	// succ:  l3CEE_51B0
l3CEE_51B0:
	call fn3CEE_3AEE (retsize: 4;)
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	Mem0[es:bx + 60<i16>:word16] = ax
	Mem0[es:bx + 62<i16>:word16] = dx
	Mem0[es:bx + 68<i16>:word16] = 0<16>
	Mem0[es:bx + 70<i16>:word16] = 0<16>
	Mem0[ss:bp - 10<i16>:word16] = 0<16>
	Mem0[ss:bp - 4<i16>:word16] = 0<16>
	SCZO = cond(Mem0[ss:bp - 8<i16>:word16] - 3<16>)
	branch Test(EQ,Z) l3CEE_51DF
	// succ:  l3CEE_51DC l3CEE_51DF
l3CEE_51DC:
	goto l3CEE_5304
	// succ:  l3CEE_5304
l3CEE_51DF:
	SCZO = cond(Mem0[es:bx + 72<i16>:word16] - 0<16>)
	branch Test(EQ,Z) l3CEE_51EE
	// succ:  l3CEE_51E6 l3CEE_51EE
l3CEE_51E6:
	call fn3CEE_3C96 (retsize: 4;)
	ax = ax | ax
	SZ = cond(ax)
	O = false
	C = false
	branch Test(NE,Z) l3CEE_51F4
	// succ:  l3CEE_51EE l3CEE_51F4
l3CEE_51EE:
	ax = 1<16>
	goto l3CEE_51F6
	// succ:  l3CEE_51F6
l3CEE_51F4:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l3CEE_51F6
l3CEE_51F6:
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	Mem0[es:bx + 72<i16>:word16] = ax
	ax = ax | ax
	SZ = cond(ax)
	O = false
	C = false
	branch Test(NE,Z) l3CEE_5205
	// succ:  l3CEE_5202 l3CEE_5205
l3CEE_5202:
	goto l3CEE_5290
	// succ:  l3CEE_5290
l3CEE_5205:
	call fn2644_2CF0 (retsize: 4;)
	ax = 1<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn3CEE_3C50 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	call fn3CEE_3AEE (retsize: 4;)
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	Mem0[es:bx + 60<i16>:word16] = ax
	Mem0[es:bx + 62<i16>:word16] = dx
	call fn3CEE_3CD2 (retsize: 4;)
	ax = ax | ax
	SZ = cond(ax)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_5238
	// succ:  l3CEE_522D l3CEE_5238
l3CEE_522D:
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = Mem0[es:bx + 38<i16>:word16]
	goto l3CEE_5241
	// succ:  l3CEE_5241
l3CEE_5238:
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = Mem0[es:bx + 46<i16>:word16]
	ax = ax + 1<16>
	SZO = cond(ax)
	// succ:  l3CEE_5241
l3CEE_5241:
	Mem0[es:bx + 50<i16>:word16] = ax
	ax = 1<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn3CEE_3F4C (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = Mem0[es:bx + 50<i16>:word16]
	SCZO = cond(ax - Mem0[es:bx + 40<i16>:word16])
	branch Test(LE,SZO) l3CEE_5262
	// succ:  l3CEE_525E l3CEE_5262
l3CEE_525E:
	ax = Mem0[es:bx + 40<i16>:word16]
	// succ:  l3CEE_5262
l3CEE_5262:
	Mem0[es:bx + 46<i16>:word16] = ax
	Mem0[es:bx + 50<i16>:word16] = ax
	Mem0[es:bx + 48<i16>:word16] = ax
	ax = Mem0[es:bx + 60<i16>:word16]
	dx = Mem0[es:bx + 62<i16>:word16]
	bx = Mem0[es:bx + 46<i16>:word16]
	bx = bx << 1<16>
	SCZO = cond(bx)
	bx = bx << 1<16>
	SCZO = cond(bx)
	si = Mem0[ds:0x3A86<16>:word16]
	es_si = Mem0[es:si + 82<i16>:segptr32]
	Mem0[es:bx + si:word16] = ax
	Mem0[es:bx + 2<i16> + si:word16] = dx
	goto l3CEE_52F2
	// succ:  l3CEE_52F2
l3CEE_5290:
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	bx = Mem0[es:bx + 46<i16>:word16]
	bx = bx << 1<16>
	SCZO = cond(bx)
	si = Mem0[ds:0x3A86<16>:word16]
	es_si = Mem0[es:si + 74<i16>:segptr32]
	Mem0[es:bx + si:word16] = 0<16>
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	bx = Mem0[es:bx + 46<i16>:word16]
	bx = bx << 1<16>
	SCZO = cond(bx)
	si = Mem0[ds:0x3A86<16>:word16]
	es_si = Mem0[es:si + 78<i16>:segptr32]
	Mem0[es:bx + si:word16] = 0<16>
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	bx = Mem0[es:bx + 46<i16>:word16]
	bx = bx << 1<16>
	SCZO = cond(bx)
	bx = bx << 1<16>
	SCZO = cond(bx)
	si = Mem0[ds:0x3A86<16>:word16]
	es_si = Mem0[es:si + 82<i16>:segptr32]
	ax = ax - ax
	SCZO = cond(ax)
	Mem0[es:bx + 2<i16> + si:word16] = ax
	Mem0[es:bx + si:word16] = ax
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = Mem0[es:bx + 50<i16>:word16]
	ax = ax - 1<16>
	SZO = cond(ax)
	SCZO = cond(ax - Mem0[es:bx + 38<i16>:word16])
	branch Test(GE,SO) l3CEE_52EE
	// succ:  l3CEE_52EA l3CEE_52EE
l3CEE_52EA:
	ax = Mem0[es:bx + 38<i16>:word16]
	// succ:  l3CEE_52EE
l3CEE_52EE:
	Mem0[es:bx + 46<i16>:word16] = ax
	// succ:  l3CEE_52F2
l3CEE_52F2:
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	Mem0[es:bx + 52<i16>:word16] = 0<16>
	Mem0[ss:bp - 10<i16>:word16] = 1<16>
	goto l3CEE_4EC2
	// succ:  l3CEE_4EC2
l3CEE_5304:
	SCZO = cond(Mem0[ss:bp - 8<i16>:word16] - 2<16>)
	branch Test(EQ,Z) l3CEE_5318
	// succ:  l3CEE_530A l3CEE_5318
l3CEE_530A:
	call fn3CEE_3B2A (retsize: 4;)
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	SCZO = cond(ax - Mem0[es:bx + 40<i16>:word16])
	branch Test(LE,SZO) l3CEE_5340
	// succ:  l3CEE_5318 l3CEE_5340
l3CEE_5318:
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	Mem0[es:bx + 72<i16>:word16] = 0<16>
	ax = Mem0[es:bx + 46<i16>:word16]
	ax = ax - Mem0[es:bx + 38<i16>:word16]
	SCZO = cond(ax)
	// succ:  l3CEE_532A
l3CEE_532A:
	Mem0[es:bx + 52<i16>:word16] = ax
	C = ax != 0<16>
	ax = -ax
	SZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn3CEE_3C50 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	// succ:  l3CEE_5338
l3CEE_5338:
	Mem0[ss:bp - 4<i16>:word16] = 0x270F<16>
	goto l3CEE_4EC2
	// succ:  l3CEE_4EC2
l3CEE_5340:
	call fn3CEE_3B2A (retsize: 4;)
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	Mem0[es:bx + 46<i16>:word16] = ax
	Mem0[es:bx + 48<i16>:word16] = ax
	bx = Mem0[es:bx + 46<i16>:word16]
	bx = bx << 1<16>
	SCZO = cond(bx)
	si = Mem0[ds:0x3A86<16>:word16]
	es_si = Mem0[es:si + 74<i16>:segptr32]
	Mem0[es:bx + si:word16] = 0<16>
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	bx = Mem0[es:bx + 46<i16>:word16]
	bx = bx << 1<16>
	SCZO = cond(bx)
	si = Mem0[ds:0x3A86<16>:word16]
	es_si = Mem0[es:si + 78<i16>:segptr32]
	Mem0[es:bx + si:word16] = 0<16>
	goto l3CEE_4EC2
	// succ:  l3CEE_4EC2
l3CEE_538C:
	SCZO = cond(ax - 0x1A<16>)
	branch Test(NE,Z) l3CEE_5394
	// succ:  l3CEE_5391 l3CEE_5394
l3CEE_5391:
	goto l3CEE_5000
	// succ:  l3CEE_5000
l3CEE_5394:
	branch Test(UGT,CZ) l3CEE_53C0
	// succ:  l3CEE_5396 l3CEE_53C0
l3CEE_5396:
	SCZO = cond(ax - 0x13<16>)
	branch Test(NE,Z) l3CEE_539E
	// succ:  l3CEE_539B l3CEE_539E
l3CEE_539B:
	goto l3CEE_4FDE
	// succ:  l3CEE_4FDE
l3CEE_539E:
	SCZO = cond(ax - 0x17<16>)
	branch Test(NE,Z) l3CEE_53A6
	// succ:  l3CEE_53A3 l3CEE_53A6
l3CEE_53A3:
	goto l3CEE_5060
	// succ:  l3CEE_5060
l3CEE_53A6:
	SCZO = cond(ax - 0x18<16>)
	branch Test(NE,Z) l3CEE_53AE
	// succ:  l3CEE_53AB l3CEE_53AE
l3CEE_53AB:
	goto l3CEE_4F26
	// succ:  l3CEE_4F26
l3CEE_53AE:
	SCZO = cond(Mem0[ss:bp - 4<i16>:word16] - 0x100<16>)
	branch Test(NE,Z) l3CEE_53B8
	// succ:  l3CEE_53B5 l3CEE_53B8
l3CEE_53B5:
	goto l3CEE_509C
	// succ:  l3CEE_509C
l3CEE_53B8:
	Mem0[ss:bp - 2<i16>:word16] = 4<16>
	goto l3CEE_50DB
	// succ:  l3CEE_50DB
l3CEE_53C0:
	SCZO = cond(ax - 0x1D<16>)
	branch Test(NE,Z) l3CEE_53C8
	// succ:  l3CEE_53C5 l3CEE_53C8
l3CEE_53C5:
	goto l3CEE_5056
	// succ:  l3CEE_5056
l3CEE_53C8:
	SCZO = cond(ax - 0x1E<16>)
	branch Test(NE,Z) l3CEE_53D0
	// succ:  l3CEE_53CD l3CEE_53D0
l3CEE_53CD:
	goto l3CEE_4F7A
	// succ:  l3CEE_4F7A
l3CEE_53D0:
	SCZO = cond(ax - 0x1F<16>)
	branch Test(NE,Z) l3CEE_53D8
	// succ:  l3CEE_53D5 l3CEE_53D8
l3CEE_53D5:
	goto l3CEE_4F5E
	// succ:  l3CEE_4F5E
l3CEE_53D8:
	SCZO = cond(ax - 0x100<16>)
	branch Test(EQ,Z) l3CEE_53AE
	// succ:  l3CEE_53DD l3CEE_53AE
l3CEE_53DD:
	SCZO = cond(ax - 0x270F<16>)
	branch Test(NE,Z) l3CEE_53E5
	// succ:  l3CEE_53E2 l3CEE_53E5
l3CEE_53E2:
	goto l3CEE_506C
	// succ:  l3CEE_506C
l3CEE_53E5:
	goto l3CEE_53AE
	// succ:  l3CEE_53AE
l3CEE_53E8:
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn3CEE_4EAC_exit
l3CEE_79D2:
	v414 = Mem0[ss:bp - 0x1A2<16> + di:byte] + cl
	Mem0[ss:bp - 0x1A2<16> + di:byte] = v414
	SCZO = cond(v414)
	// succ:  l3CEE_79D2_thunk_fn3CEE_79D3
l3CEE_79D2_thunk_fn3CEE_79D3:
	call fn3CEE_79D3 (retsize: 0;)
	return
	// succ:  fn3CEE_4EAC_exit
l3CEE_8B1D:
	ch = ch & Mem0[ss:bp + 34<i16>:byte]
	SZ = cond(ch)
	O = false
	C = false
	ST[Top:real64] = ST[Top:real64] - Mem0[ss:bp + si:real64]
	ST[Top:real64] = ST[Top:real64] - Mem0[ss:bp + si:real64]
	ST[Top:real64] = ST[Top:real64] - Mem0[ss:bp + si:real64]
	__out<byte>(dx, al)
	si = si + 1<i16>
	bh = bh & Mem0[ds:di:byte]
	SZ = cond(bh)
	O = false
	C = false
	// succ:  l3CEE_8B27_thunk_fn3CEE_8B28
l3CEE_8B27_thunk_fn3CEE_8B28:
	call fn3CEE_8B28 (retsize: 0;)
	return
	// succ:  fn3CEE_4EAC_exit
l3CEE_8BD0:
	v419 = Mem0[ss:bp - 6<i16>:word16] + 1<16>
	Mem0[ss:bp - 6<i16>:word16] = v419
	SZO = cond(v419)
	SCZO = cond(Mem0[ss:bp - 6<i16>:word16] - ax)
	branch Test(UGT,CZ) l3CEE_8C08
	// succ:  l3CEE_8BD8 l3CEE_8C08
l3CEE_8BD8:
	v420 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v420
	call fn3B5D_017C (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	SZP = cond(al & 1<8>)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_8C08
	// succ:  l3CEE_8BE7 l3CEE_8C08
l3CEE_8BE7:
	v421 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v421
	call fn3B5D_0252 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 10<i16>:word16] = ax
	Mem0[ss:bp - 8<i16>:word16] = dx
	v422 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v422
	call fn3B5D_028A (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 4<i16>:word16] = ax
	goto l3CEE_8C16
	// succ:  l3CEE_8C16
l3CEE_8C08:
	ax = 0x60AA<16>
	Mem0[ss:bp - 10<i16>:word16] = ax
	Mem0[ss:bp - 8<i16>:word16] = ds
	Mem0[ss:bp - 4<i16>:word16] = 0<16>
	// succ:  l3CEE_8C16
l3CEE_8C16:
	v423 = Mem0[ss:bp - 6<i16>:word16] + 1<16>
	Mem0[ss:bp - 6<i16>:word16] = v423
	SZO = cond(v423)
	ax = Mem0[ss:bp - 18<i16>:word16]
	SCZO = cond(Mem0[ss:bp - 6<i16>:word16] - ax)
	branch Test(UGT,CZ) l3CEE_8C70
	// succ:  l3CEE_8C21 l3CEE_8C70
l3CEE_8C21:
	v424 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v424
	call fn3B5D_017C (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	SZP = cond(al & 2<8>)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_8C70
	// succ:  l3CEE_8C30 l3CEE_8C70
l3CEE_8C30:
	v425 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v425
	call fn3B5D_0306 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	ax = ax | ax
	SZ = cond(ax)
	O = false
	C = false
	branch Test(GE,SO) l3CEE_8C44
	// succ:  l3CEE_8C3F l3CEE_8C44
l3CEE_8C3F:
	ax = ax - ax
	SCZO = cond(ax)
	goto l3CEE_8C65
	// succ:  l3CEE_8C65
l3CEE_8C44:
	v430 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v430
	call fn3B5D_0306 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	SCZO = cond(ax - Mem0[ds:0xEEE<16>:word16])
	branch Test(ULE,CZ) l3CEE_8C5A
	// succ:  l3CEE_8C55 l3CEE_8C5A
l3CEE_8C55:
	ax = Mem0[ds:0xEEE<16>:word16]
	goto l3CEE_8C65
	// succ:  l3CEE_8C65
l3CEE_8C5A:
	v431 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v431
	call fn3B5D_0306 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	// succ:  l3CEE_8C65
l3CEE_8C65:
	es_bx = Mem0[ds:0x3A8A<16>:segptr32]
	Mem0[es:bx + 30<i16>:word16] = ax
	goto l3CEE_8C7A
	// succ:  l3CEE_8C7A
l3CEE_8C70:
	es_bx = Mem0[ds:0x3A8A<16>:segptr32]
	Mem0[es:bx + 30<i16>:word16] = 1<16>
	// succ:  l3CEE_8C7A
l3CEE_8C7A:
	v427 = Mem0[ss:bp - 6<i16>:word16] + 1<16>
	Mem0[ss:bp - 6<i16>:word16] = v427
	SZO = cond(v427)
	ax = Mem0[ss:bp - 18<i16>:word16]
	SCZO = cond(Mem0[ss:bp - 6<i16>:word16] - ax)
	branch Test(UGT,CZ) l3CEE_8CDC
	// succ:  l3CEE_8C85 l3CEE_8CDC
l3CEE_8C85:
	v428 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v428
	call fn3B5D_017C (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	SZP = cond(al & 2<8>)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_8CDC
	// succ:  l3CEE_8C94 l3CEE_8CDC
l3CEE_8C94:
	v429 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v429
	call fn3B5D_0306 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	ax = ax | ax
	SZ = cond(ax)
	O = false
	C = false
	branch Test(GE,SO) l3CEE_8CA8
	// succ:  l3CEE_8CA3 l3CEE_8CA8
l3CEE_8CA3:
	ax = ax - ax
	SCZO = cond(ax)
	goto l3CEE_8CD1
	// succ:  l3CEE_8CD1
l3CEE_8CA8:
	v432 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v432
	call fn3B5D_0306 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	cx = Mem0[ds:0xEF0<16>:word16]
	cx = cx - 5<16>
	SCZO = cond(cx)
	SCZO = cond(ax - cx)
	branch Test(ULE,CZ) l3CEE_8CC6
	// succ:  l3CEE_8CBE l3CEE_8CC6
l3CEE_8CBE:
	ax = Mem0[ds:0xEF0<16>:word16]
	ax = ax - 5<16>
	SCZO = cond(ax)
	goto l3CEE_8CD1
	// succ:  l3CEE_8CD1
l3CEE_8CC6:
	v437 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v437
	call fn3B5D_0306 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	// succ:  l3CEE_8CD1
l3CEE_8CD1:
	es_bx = Mem0[ds:0x3A8A<16>:segptr32]
	Mem0[es:bx + 32<i16>:word16] = ax
	goto l3CEE_8CE6
	// succ:  l3CEE_8CE6
l3CEE_8CDC:
	es_bx = Mem0[ds:0x3A8A<16>:segptr32]
	Mem0[es:bx + 32<i16>:word16] = 0<16>
	// succ:  l3CEE_8CE6
l3CEE_8CE6:
	v433 = Mem0[ss:bp - 6<i16>:word16] + 1<16>
	Mem0[ss:bp - 6<i16>:word16] = v433
	SZO = cond(v433)
	ax = Mem0[ss:bp - 18<i16>:word16]
	SCZO = cond(Mem0[ss:bp - 6<i16>:word16] - ax)
	branch Test(UGT,CZ) l3CEE_8D44
	// succ:  l3CEE_8CF1 l3CEE_8D44
l3CEE_8CF1:
	v434 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v434
	call fn3B5D_017C (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	SZP = cond(al & 2<8>)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_8D44
	// succ:  l3CEE_8D00 l3CEE_8D44
l3CEE_8D00:
	v435 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v435
	call fn3B5D_0306 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	es_bx = Mem0[ds:0x3A8A<16>:segptr32]
	SCZO = cond(ax - Mem0[es:bx + 30<i16>:word16])
	branch Test(GE,SO) l3CEE_8D1C
	// succ:  l3CEE_8D15 l3CEE_8D1C
l3CEE_8D15:
	ax = Mem0[es:bx + 30<i16>:word16]
	goto l3CEE_8D3D
	// succ:  l3CEE_8D3D
l3CEE_8D1C:
	v436 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v436
	call fn3B5D_0306 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	SCZO = cond(ax - Mem0[ds:0xEEE<16>:word16])
	branch Test(ULE,CZ) l3CEE_8D32
	// succ:  l3CEE_8D2D l3CEE_8D32
l3CEE_8D2D:
	ax = Mem0[ds:0xEEE<16>:word16]
	goto l3CEE_8D3D
	// succ:  l3CEE_8D3D
l3CEE_8D32:
	v446 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v446
	call fn3B5D_0306 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	// succ:  l3CEE_8D3D
l3CEE_8D3D:
	es_bx = Mem0[ds:0x3A8A<16>:segptr32]
	goto l3CEE_8D4B
	// succ:  l3CEE_8D4B
l3CEE_8D44:
	es_bx = Mem0[ds:0x3A8A<16>:segptr32]
	ax = Mem0[ds:0xEEE<16>:word16]
	// succ:  l3CEE_8D4B
l3CEE_8D4B:
	Mem0[es:bx + 34<i16>:word16] = ax
	v438 = Mem0[ss:bp - 6<i16>:word16] + 1<16>
	Mem0[ss:bp - 6<i16>:word16] = v438
	SZO = cond(v438)
	ax = Mem0[ss:bp - 18<i16>:word16]
	SCZO = cond(Mem0[ss:bp - 6<i16>:word16] - ax)
	branch Test(UGT,CZ) l3CEE_8DB4
	// succ:  l3CEE_8D5A l3CEE_8DB4
l3CEE_8D5A:
	v439 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v439
	call fn3B5D_017C (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	SZP = cond(al & 2<8>)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_8DB4
	// succ:  l3CEE_8D69 l3CEE_8DB4
l3CEE_8D69:
	v440 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v440
	call fn3B5D_0306 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	es_bx = Mem0[ds:0x3A8A<16>:segptr32]
	cx = Mem0[es:bx + 32<i16>:word16]
	cx = cx + 5<16>
	SCZO = cond(cx)
	SCZO = cond(cx - ax)
	branch Test(LE,SZO) l3CEE_8D8C
	// succ:  l3CEE_8D83 l3CEE_8D8C
l3CEE_8D83:
	ax = Mem0[es:bx + 32<i16>:word16]
	ax = ax + 5<16>
	SCZO = cond(ax)
	goto l3CEE_8DAD
	// succ:  l3CEE_8DAD
l3CEE_8D8C:
	v441 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v441
	call fn3B5D_0306 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	SCZO = cond(ax - Mem0[ds:0xEF0<16>:word16])
	branch Test(ULE,CZ) l3CEE_8DA2
	// succ:  l3CEE_8D9D l3CEE_8DA2
l3CEE_8D9D:
	ax = Mem0[ds:0xEF0<16>:word16]
	goto l3CEE_8DAD
	// succ:  l3CEE_8DAD
l3CEE_8DA2:
	v442 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v442
	call fn3B5D_0306 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	// succ:  l3CEE_8DAD
l3CEE_8DAD:
	es_bx = Mem0[ds:0x3A8A<16>:segptr32]
	goto l3CEE_8DBB
	// succ:  l3CEE_8DBB
l3CEE_8DB4:
	es_bx = Mem0[ds:0x3A8A<16>:segptr32]
	ax = Mem0[ds:0xEF0<16>:word16]
	// succ:  l3CEE_8DBB
l3CEE_8DBB:
	Mem0[es:bx + 36<i16>:word16] = ax
	ax = Mem0[es:bx + 34<i16>:word16]
	ax = ax - Mem0[es:bx + 30<i16>:word16]
	SCZO = cond(ax)
	ax = ax + 1<16>
	SZO = cond(ax)
	Mem0[es:bx + 38<i16>:word16] = ax
	ax = Mem0[es:bx + 36<i16>:word16]
	ax = ax - Mem0[es:bx + 32<i16>:word16]
	SCZO = cond(ax)
	ax = ax + 1<16>
	SZO = cond(ax)
	Mem0[es:bx + 40<i16>:word16] = ax
	v443 = Mem0[ss:bp - 6<i16>:word16] + 1<16>
	Mem0[ss:bp - 6<i16>:word16] = v443
	SZO = cond(v443)
	ax = Mem0[ss:bp - 18<i16>:word16]
	SCZO = cond(Mem0[ss:bp - 6<i16>:word16] - ax)
	branch Test(UGT,CZ) l3CEE_8E08
	// succ:  l3CEE_8DE4 l3CEE_8E08
l3CEE_8DE4:
	v444 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v444
	call fn3B5D_017C (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	SZP = cond(al & 4<8>)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_8E08
	// succ:  l3CEE_8DF3 l3CEE_8E08
l3CEE_8DF3:
	v445 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v445
	call fn3B5D_047C (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	es_bx = Mem0[ds:0x3A8A<16>:segptr32]
	Mem0[es:bx + 4<i16>:word16] = ax
	goto l3CEE_8E12
	// succ:  l3CEE_8E12
l3CEE_8E08:
	es_bx = Mem0[ds:0x3A8A<16>:segptr32]
	Mem0[es:bx + 4<i16>:word16] = 1<16>
	// succ:  l3CEE_8E12
l3CEE_8E12:
	Mem0[es:bx + 6<i16>:word16] = 1<16>
	v447 = Mem0[ss:bp - 6<i16>:word16] + 1<16>
	Mem0[ss:bp - 6<i16>:word16] = v447
	SZO = cond(v447)
	ax = Mem0[ss:bp - 18<i16>:word16]
	SCZO = cond(Mem0[ss:bp - 6<i16>:word16] - ax)
	branch Test(UGT,CZ) l3CEE_8E56
	// succ:  l3CEE_8E23 l3CEE_8E56
l3CEE_8E23:
	v448 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v448
	call fn3B5D_017C (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	SZP = cond(al & 1<8>)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_8E56
	// succ:  l3CEE_8E32 l3CEE_8E56
l3CEE_8E32:
	v449 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v449
	call fn3B5D_0252 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn2BC7_0494 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	es_bx = Mem0[ds:0x3A8A<16>:segptr32]
	Mem0[es:bx + 26<i16>:word16] = ax
	Mem0[es:bx + 28<i16>:word16] = dx
	goto l3CEE_8E72
	// succ:  l3CEE_8E72
l3CEE_8E56:
	es_bx = Mem0[ds:0x3A8A<16>:segptr32]
	ax = ax - ax
	SCZO = cond(ax)
	Mem0[es:bx + 28<i16>:word16] = ax
	Mem0[es:bx + 26<i16>:word16] = ax
	ax = Mem0[ss:bp - 18<i16>:word16]
	SCZO = cond(Mem0[ss:bp - 6<i16>:word16] - ax)
	branch Test(UGT,CZ) l3CEE_8E72
	// succ:  l3CEE_8E6C l3CEE_8E72
l3CEE_8E6C:
	Mem0[es:bx + 6<i16>:word16] = 0<16>
	// succ:  l3CEE_8E72
l3CEE_8E72:
	v450 = Mem0[ss:bp - 6<i16>:word16] + 1<16>
	Mem0[ss:bp - 6<i16>:word16] = v450
	SZO = cond(v450)
	ax = Mem0[ss:bp - 18<i16>:word16]
	SCZO = cond(Mem0[ss:bp - 6<i16>:word16] - ax)
	branch Test(ULE,CZ) l3CEE_8E80
	// succ:  l3CEE_8E7D l3CEE_8E80
l3CEE_8E7D:
	goto l3CEE_8F56
	// succ:  l3CEE_8F56
l3CEE_8E80:
	v451 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v451
	call fn3B5D_017C (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	SZP = cond(al & 2<8>)
	O = false
	C = false
	branch Test(NE,Z) l3CEE_8E92
	// succ:  l3CEE_8E8F l3CEE_8E92
l3CEE_8E8F:
	goto l3CEE_8F56
	// succ:  l3CEE_8F56
l3CEE_8E92:
	v455 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v455
	call fn3B5D_0306 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	SCZO = cond(ax - 5<16>)
	branch Test(LT,SO) l3CEE_8EA5
	// succ:  l3CEE_8EA2 l3CEE_8EA5
l3CEE_8EA2:
	goto l3CEE_8F32
	// succ:  l3CEE_8F32
l3CEE_8EA5:
	ax = 5<16>
	// succ:  l3CEE_8EA8
l3CEE_8EA8:
	es_bx = Mem0[ds:0x3A8A<16>:segptr32]
	Mem0[es:bx + 18<i16>:word16] = ax
	Mem0[es:bx + 10<i16>:word16] = 0<16>
	v452 = Mem0[ss:bp - 6<i16>:word16] + 1<16>
	Mem0[ss:bp - 6<i16>:word16] = v452
	SZO = cond(v452)
	ax = Mem0[ss:bp - 18<i16>:word16]
	SCZO = cond(Mem0[ss:bp - 6<i16>:word16] - ax)
	branch Test(UGT,CZ) l3CEE_8EEA
	// succ:  l3CEE_8EC1 l3CEE_8EEA
l3CEE_8EC1:
	v453 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v453
	call fn3B5D_017C (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	SZP = cond(al & 2<8>)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_8EEA
	// succ:  l3CEE_8ED0 l3CEE_8EEA
l3CEE_8ED0:
	v454 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v454
	call fn3B5D_0306 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	es_bx = Mem0[ds:0x3A8A<16>:segptr32]
	Mem0[es:bx + 24<i16>:word16] = ax
	ax = ax | ax
	SZ = cond(ax)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_8EEA
	// succ:  l3CEE_8EE7 l3CEE_8EEA
l3CEE_8EE7:
	goto l3CEE_8F6C
	// succ:  l3CEE_8F6C
l3CEE_8EEA:
	es_bx = Mem0[ds:0x3A8A<16>:segptr32]
	Mem0[es:bx + 24<i16>:word16] = 4<16>
	// succ:  l3CEE_8EF4
l3CEE_8EF4:
	v458 = Mem0[ss:bp - 6<i16>:word16] + 1<16>
	Mem0[ss:bp - 6<i16>:word16] = v458
	SZO = cond(v458)
	ax = Mem0[ss:bp - 18<i16>:word16]
	SCZO = cond(Mem0[ss:bp - 6<i16>:word16] - ax)
	branch Test(ULE,CZ) l3CEE_8F02
	// succ:  l3CEE_8EFF l3CEE_8F02
l3CEE_8EFF:
	goto l3CEE_8FA2
	// succ:  l3CEE_8FA2
l3CEE_8F02:
	v459 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v459
	call fn3B5D_017C (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	SZP = cond(al & 2<8>)
	O = false
	C = false
	branch Test(NE,Z) l3CEE_8F14
	// succ:  l3CEE_8F11 l3CEE_8F14
l3CEE_8F11:
	goto l3CEE_8FA2
	// succ:  l3CEE_8FA2
l3CEE_8F14:
	v463 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v463
	call fn3B5D_0306 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	SCZO = cond(ax - 1<16>)
	branch Test(LE,SZO) l3CEE_8F9A
	// succ:  l3CEE_8F24 l3CEE_8F9A
l3CEE_8F24:
	v464 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v464
	call fn3B5D_0306 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	goto l3CEE_8F9D
	// succ:  l3CEE_8F9D
l3CEE_8F32:
	v456 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v456
	call fn3B5D_0306 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	SCZO = cond(ax - 0xFE<16>)
	branch Test(LE,SZO) l3CEE_8F48
	// succ:  l3CEE_8F42 l3CEE_8F48
l3CEE_8F42:
	ax = 0xFE<16>
	goto l3CEE_8EA8
	// succ:  l3CEE_8EA8
l3CEE_8F48:
	v457 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v457
	call fn3B5D_0306 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	goto l3CEE_8EA8
	// succ:  l3CEE_8EA8
l3CEE_8F56:
	es_bx = Mem0[ds:0x3A8A<16>:segptr32]
	SCZO = cond(Mem0[es:bx + 40<i16>:word16] - 6<16>)
	branch Test(GT,SZO) l3CEE_8F64
	// succ:  l3CEE_8F61 l3CEE_8F64
l3CEE_8F61:
	goto l3CEE_8EA5
	// succ:  l3CEE_8EA5
l3CEE_8F64:
	ax = Mem0[es:bx + 40<i16>:word16]
	ax = ax - 1<16>
	SZO = cond(ax)
	goto l3CEE_8EA8
	// succ:  l3CEE_8EA8
l3CEE_8F6C:
	es_bx = Mem0[ds:0x3A8A<16>:segptr32]
	Mem0[es:bx + 10<i16>:word16] = 1<16>
	SCZO = cond(Mem0[es:bx + 24<i16>:word16] - 2<16>)
	branch Test(UGE,C) l3CEE_8F82
	// succ:  l3CEE_8F7D l3CEE_8F82
l3CEE_8F7D:
	ax = 2<16>
	goto l3CEE_8F93
	// succ:  l3CEE_8F93
l3CEE_8F82:
	ax = Mem0[es:bx + 18<i16>:word16]
	ax = ax - 1<16>
	SZO = cond(ax)
	ax = ax - Mem0[es:bx + 24<i16>:word16]
	SCZO = cond(ax)
	cx = cx - cx - C
	SCZO = cond(cx)
	ax = ax & cx
	SZ = cond(ax)
	O = false
	C = false
	ax = ax + Mem0[es:bx + 24<i16>:word16]
	SCZO = cond(ax)
	// succ:  l3CEE_8F93
l3CEE_8F93:
	Mem0[es:bx + 24<i16>:word16] = ax
	goto l3CEE_8EF4
	// succ:  l3CEE_8EF4
l3CEE_8F9A:
	ax = 1<16>
	// succ:  l3CEE_8F9D
l3CEE_8F9D:
	Mem0[ss:bp - 14<i16>:word16] = ax
	goto l3CEE_8FA7
	// succ:  l3CEE_8FA7
l3CEE_8FA2:
	Mem0[ss:bp - 14<i16>:word16] = 1<16>
	// succ:  l3CEE_8FA7
l3CEE_8FA7:
	v460 = Mem0[ss:bp - 6<i16>:word16] + 1<16>
	Mem0[ss:bp - 6<i16>:word16] = v460
	SZO = cond(v460)
	ax = Mem0[ss:bp - 18<i16>:word16]
	SCZO = cond(Mem0[ss:bp - 6<i16>:word16] - ax)
	branch Test(UGT,CZ) l3CEE_900A
	// succ:  l3CEE_8FB2 l3CEE_900A
l3CEE_8FB2:
	v461 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v461
	call fn3B5D_017C (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	SZP = cond(al & 2<8>)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_900A
	// succ:  l3CEE_8FC1 l3CEE_900A
l3CEE_8FC1:
	v462 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v462
	call fn3B5D_0306 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	ax = ax | ax
	SZ = cond(ax)
	O = false
	C = false
	branch Test(GE,SO) l3CEE_8FD4
	// succ:  l3CEE_8FD0 l3CEE_8FD4
l3CEE_8FD0:
	ax = ax - ax
	SCZO = cond(ax)
	goto l3CEE_8FFF
	// succ:  l3CEE_8FFF
l3CEE_8FD4:
	v487 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v487
	call fn3B5D_0306 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	es_bx = Mem0[ds:0x3A8A<16>:segptr32]
	cx = Mem0[es:bx + 18<i16>:word16]
	cx = cx - 1<16>
	SZO = cond(cx)
	SCZO = cond(cx - ax)
	branch Test(UGE,C) l3CEE_8FF4
	// succ:  l3CEE_8FEC l3CEE_8FF4
l3CEE_8FEC:
	ax = Mem0[es:bx + 18<i16>:word16]
	ax = ax - 1<16>
	SZO = cond(ax)
	goto l3CEE_8FFF
	// succ:  l3CEE_8FFF
l3CEE_8FF4:
	v488 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v488
	call fn3B5D_0306 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	// succ:  l3CEE_8FFF
l3CEE_8FFF:
	es_bx = Mem0[ds:0x3A8A<16>:segptr32]
	Mem0[es:bx + 48<i16>:word16] = ax
	goto l3CEE_9014
	// succ:  l3CEE_9014
l3CEE_900A:
	es_bx = Mem0[ds:0x3A8A<16>:segptr32]
	Mem0[es:bx + 48<i16>:word16] = 0<16>
	// succ:  l3CEE_9014
l3CEE_9014:
	v465 = Mem0[ss:bp - 6<i16>:word16] + 1<16>
	Mem0[ss:bp - 6<i16>:word16] = v465
	SZO = cond(v465)
	ax = Mem0[ss:bp - 18<i16>:word16]
	SCZO = cond(Mem0[ss:bp - 6<i16>:word16] - ax)
	branch Test(UGT,CZ) l3CEE_9078
	// succ:  l3CEE_901F l3CEE_9078
l3CEE_901F:
	v466 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v466
	call fn3B5D_017C (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	SZP = cond(al & 2<8>)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_9078
	// succ:  l3CEE_902E l3CEE_9078
l3CEE_902E:
	v467 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v467
	call fn3B5D_0306 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	ax = ax | ax
	SZ = cond(ax)
	O = false
	C = false
	branch Test(GE,SO) l3CEE_9042
	// succ:  l3CEE_903D l3CEE_9042
l3CEE_903D:
	ax = ax - ax
	SCZO = cond(ax)
	goto l3CEE_906D
	// succ:  l3CEE_906D
l3CEE_9042:
	v468 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v468
	call fn3B5D_0306 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	es_bx = Mem0[ds:0x3A8A<16>:segptr32]
	cx = Mem0[es:bx + 38<i16>:word16]
	cx = cx - 1<16>
	SZO = cond(cx)
	SCZO = cond(cx - ax)
	branch Test(GE,SO) l3CEE_9062
	// succ:  l3CEE_905A l3CEE_9062
l3CEE_905A:
	ax = Mem0[es:bx + 38<i16>:word16]
	ax = ax - 1<16>
	SZO = cond(ax)
	goto l3CEE_906D
	// succ:  l3CEE_906D
l3CEE_9062:
	v480 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v480
	call fn3B5D_0306 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	// succ:  l3CEE_906D
l3CEE_906D:
	es_bx = Mem0[ds:0x3A8A<16>:segptr32]
	Mem0[es:bx + 46<i16>:word16] = ax
	goto l3CEE_9082
	// succ:  l3CEE_9082
l3CEE_9078:
	es_bx = Mem0[ds:0x3A8A<16>:segptr32]
	Mem0[es:bx + 46<i16>:word16] = 0<16>
	// succ:  l3CEE_9082
l3CEE_9082:
	v469 = Mem0[ss:bp - 6<i16>:word16] + 1<16>
	Mem0[ss:bp - 6<i16>:word16] = v469
	SZO = cond(v469)
	ax = Mem0[ss:bp - 18<i16>:word16]
	SCZO = cond(Mem0[ss:bp - 6<i16>:word16] - ax)
	branch Test(UGT,CZ) l3CEE_90D5
	// succ:  l3CEE_908D l3CEE_90D5
l3CEE_908D:
	v470 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v470
	call fn3B5D_017C (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	SZP = cond(al & 2<8>)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_90D5
	// succ:  l3CEE_909C l3CEE_90D5
l3CEE_909C:
	v471 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v471
	call fn3B5D_0306 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	ax = ax | ax
	SZ = cond(ax)
	O = false
	C = false
	branch Test(GE,SO) l3CEE_90B0
	// succ:  l3CEE_90AB l3CEE_90B0
l3CEE_90AB:
	ax = ax - ax
	SCZO = cond(ax)
	goto l3CEE_90E8
	// succ:  l3CEE_90E8
l3CEE_90B0:
	v478 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v478
	call fn3B5D_0306 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	es_bx = Mem0[ds:0x3A8A<16>:segptr32]
	cx = Mem0[es:bx + 40<i16>:word16]
	cx = cx - 1<16>
	SZO = cond(cx)
	SCZO = cond(cx - Mem0[es:bx + 48<i16>:word16])
	branch Test(LE,SZO) l3CEE_90CE
	// succ:  l3CEE_90CA l3CEE_90CE
l3CEE_90CA:
	cx = Mem0[es:bx + 48<i16>:word16]
	// succ:  l3CEE_90CE
l3CEE_90CE:
	SCZO = cond(cx - ax)
	branch Test(LT,SO) l3CEE_90D5
	// succ:  l3CEE_90D2 l3CEE_90D5
l3CEE_90D2:
	goto l3CEE_9186
	// succ:  l3CEE_9186
l3CEE_90D5:
	es_bx = Mem0[ds:0x3A8A<16>:segptr32]
	ax = Mem0[es:bx + 40<i16>:word16]
	ax = ax - 1<16>
	SZO = cond(ax)
	SCZO = cond(ax - Mem0[es:bx + 48<i16>:word16])
	branch Test(LE,SZO) l3CEE_90E8
	// succ:  l3CEE_90E4 l3CEE_90E8
l3CEE_90E4:
	ax = Mem0[es:bx + 48<i16>:word16]
	// succ:  l3CEE_90E8
l3CEE_90E8:
	Mem0[ss:bp - 2<i16>:word16] = ax
	es_bx = Mem0[ds:0x3A8A<16>:segptr32]
	ax = Mem0[es:bx + 48<i16>:word16]
	ax = ax - Mem0[ss:bp - 2<i16>:word16]
	SCZO = cond(ax)
	Mem0[es:bx + 50<i16>:word16] = ax
	ax = Mem0[ss:bp - 4<i16>:word16]
	Mem0[es:bx + 20<i16>:word16] = ax
	ah = ah + 2<8>
	SCZO = cond(ah)
	Mem0[es:bx + 22<i16>:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = es
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bx
	call fn21DC_0696 (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	SCZO = cond(ax - 1<16>)
	cx = cx - cx - C
	SCZO = cond(cx)
	C = cx != 0<16>
	cx = -cx
	SZO = cond(cx)
	es_bx = Mem0[ds:0x3A8A<16>:segptr32]
	Mem0[es:bx + 14<i16>:word16] = cx
	ax = ax - ax
	SCZO = cond(ax)
	Mem0[es:bx + 44<i16>:word16] = ax
	Mem0[es:bx + 42<i16>:word16] = ax
	SCZO = cond(cx - ax)
	branch Test(NE,Z) l3CEE_919A
	// succ:  l3CEE_9130 l3CEE_919A
l3CEE_9130:
	v472 = Mem0[es:bx + 20<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v472
	v473 = Mem0[ss:bp - 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v473
	v474 = Mem0[ss:bp - 10<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v474
	v475 = Mem0[es:bx + 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v475
	v476 = Mem0[es:bx:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v476
	call fn2017_0258 (retsize: 4;)
	sp = sp + 0xA<16>
	SCZO = cond(sp)
	es_si = Mem0[ds:0x3A8A<16>:segptr32]
	bx = Mem0[es:si + 20<i16>:word16]
	v477 = Mem0[es:si + 20<i16>:word16] + 1<16>
	Mem0[es:si + 20<i16>:word16] = v477
	SZO = cond(v477)
	es_si = Mem0[ds:si + 0<16>:segptr32]
	Mem0[es:bx + si:byte] = 0x1A<8>
	es_bx = Mem0[ds:0x3A8A<16>:segptr32]
	ax = Mem0[es:bx + 38<i16>:word16]
	dx_ax = Mem0[es:bx + 40<i16>:word16] *s32 ax
	SCZO = cond(dx_ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn21DC_097E (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	es_bx = Mem0[ds:0x3A8A<16>:segptr32]
	Mem0[es:bx + 42<i16>:word16] = ax
	Mem0[es:bx + 44<i16>:word16] = dx
	ax = ax | dx
	SZ = cond(ax)
	O = false
	C = false
	branch Test(NE,Z) l3CEE_9194
	// succ:  l3CEE_9181 l3CEE_9194
l3CEE_9181:
	ax = 1<16>
	goto l3CEE_9196
	// succ:  l3CEE_9196
l3CEE_9186:
	v479 = Mem0[ss:bp - 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v479
	call fn3B5D_0306 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	goto l3CEE_90E8
	// succ:  l3CEE_90E8
l3CEE_9194:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l3CEE_9196
l3CEE_9196:
	Mem0[es:bx + 14<i16>:word16] = ax
	// succ:  l3CEE_919A
l3CEE_919A:
	SCZO = cond(Mem0[es:bx + 14<i16>:word16] - 0<16>)
	branch Test(EQ,Z) l3CEE_91A4
	// succ:  l3CEE_91A1 l3CEE_91A4
l3CEE_91A1:
	goto l3CEE_9280
	// succ:  l3CEE_9280
l3CEE_91A4:
	ax = ax - ax
	SCZO = cond(ax)
	Mem0[es:bx + 56<i16>:word16] = ax
	Mem0[es:bx + 54<i16>:word16] = ax
	Mem0[es:bx + 52<i16>:word16] = 1<16>
	SCZO = cond(Mem0[es:bx + 4<i16>:word16] - 1<16>)
	ax = ax - ax - C
	SCZO = cond(ax)
	C = ax != 0<16>
	ax = -ax
	SZO = cond(ax)
	Mem0[es:bx + 12<i16>:word16] = ax
	Mem0[es:bx + 16<i16>:word16] = 0<16>
	Mem0[es:bx + 60<i16>:word16] = 0<16>
	Mem0[es:bx + 8<i16>:word16] = 1<16>
	// succ:  l3CEE_91D3
l3CEE_91D3:
	ax = 3<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn3CEE_858E (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 16<i16>:word16] = ax
	SCZO = cond(ax - 0x16<16>)
	branch Test(EQ,Z) l3CEE_91F8
	// succ:  l3CEE_91E6 l3CEE_91F8
l3CEE_91E6:
	SCZO = cond(ax - 0x22<16>)
	branch Test(EQ,Z) l3CEE_924E
	// succ:  l3CEE_91EB l3CEE_924E
l3CEE_91EB:
	SCZO = cond(ax - 0x23<16>)
	branch Test(EQ,Z) l3CEE_9262
	// succ:  l3CEE_91F0 l3CEE_9262
l3CEE_91F0:
	Mem0[ss:bp - 16<i16>:word16] = 0<16>
	goto l3CEE_9204
	// succ:  l3CEE_9204
l3CEE_91F8:
	SCZO = cond(Mem0[ds:0x20AE<16>:word16] - 1<16>)
	ax = ax - ax - C
	SCZO = cond(ax)
	C = ax != 0<16>
	ax = -ax
	SZO = cond(ax)
	Mem0[ds:0x20AE<16>:word16] = ax
	// succ:  l3CEE_9204
l3CEE_9204:
	SCZO = cond(Mem0[ss:bp - 16<i16>:word16] - 0<16>)
	branch Test(NE,Z) l3CEE_91D3
	// succ:  l3CEE_920A l3CEE_91D3
l3CEE_920A:
	es_bx = Mem0[ds:0x3A8A<16>:segptr32]
	SCZO = cond(Mem0[es:bx + 8<i16>:word16] - 0<16>)
	branch Test(EQ,Z) l3CEE_9280
	// succ:  l3CEE_9215 l3CEE_9280
l3CEE_9215:
	SCZO = cond(Mem0[es:bx + 4<i16>:word16] - 0<16>)
	branch Test(EQ,Z) l3CEE_9280
	// succ:  l3CEE_921C l3CEE_9280
l3CEE_921C:
	bx = Mem0[es:bx + 54<i16>:word16]
	si = Mem0[ds:0x3A8A<16>:word16]
	es_si = Mem0[ds:si + 0<16>:segptr32]
	SCZO = cond(Mem0[es:bx + si:byte] - 0x1A<8>)
	branch Test(EQ,Z) l3CEE_9276
	// succ:  l3CEE_922D l3CEE_9276
l3CEE_922D:
	es_bx = Mem0[ds:0x3A8A<16>:segptr32]
	SCZO = cond(Mem0[es:bx + 14<i16>:word16] - 0<16>)
	branch Test(NE,Z) l3CEE_9276
	// succ:  l3CEE_9238 l3CEE_9276
l3CEE_9238:
	v484 = Mem0[es:bx + 54<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v484
	call fn3CEE_6BCC (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	es_bx = Mem0[ds:0x3A8A<16>:segptr32]
	Mem0[es:bx + 54<i16>:word16] = ax
	goto l3CEE_921C
	// succ:  l3CEE_921C
l3CEE_924E:
	es_bx = Mem0[ds:0x3A8A<16>:segptr32]
	SCZO = cond(Mem0[es:bx + 8<i16>:word16] - 1<16>)
	ax = ax - ax - C
	SCZO = cond(ax)
	C = ax != 0<16>
	ax = -ax
	SZO = cond(ax)
	Mem0[es:bx + 8<i16>:word16] = ax
	goto l3CEE_9204
	// succ:  l3CEE_9204
l3CEE_9262:
	es_bx = Mem0[ds:0x3A8A<16>:segptr32]
	SCZO = cond(Mem0[es:bx + 12<i16>:word16] - 1<16>)
	ax = ax - ax - C
	SCZO = cond(ax)
	C = ax != 0<16>
	ax = -ax
	SZO = cond(ax)
	Mem0[es:bx + 12<i16>:word16] = ax
	goto l3CEE_9204
	// succ:  l3CEE_9204
l3CEE_9276:
	es_bx = Mem0[ds:0x3A8A<16>:segptr32]
	Mem0[es:bx + 54<i16>:word16] = 0<16>
	// succ:  l3CEE_9280
l3CEE_9280:
	SCZO = cond(Mem0[es:bx + 14<i16>:word16] - 0<16>)
	branch Test(NE,Z) l3CEE_92F9
	// succ:  l3CEE_9287 l3CEE_92F9
l3CEE_9287:
	v481 = Mem0[ss:bp - 14<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v481
	call fn3CEE_695E (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	es_bx = Mem0[ds:0x3A8A<16>:segptr32]
	Mem0[es:bx + 56<i16>:word16] = ax
	ax = Mem0[es:bx + 58<i16>:word16]
	v482 = Mem0[es:bx + 52<i16>:word16] + ax
	Mem0[es:bx + 52<i16>:word16] = v482
	SCZO = cond(v482)
	bx = Mem0[es:bx + 56<i16>:word16]
	si = Mem0[ds:0x3A8A<16>:word16]
	es_si = Mem0[ds:si + 0<16>:segptr32]
	SCZO = cond(Mem0[es:bx + si:byte] - 0x1A<8>)
	branch Test(NE,Z) l3CEE_92C9
	// succ:  l3CEE_92B2 l3CEE_92C9
l3CEE_92B2:
	es_bx = Mem0[ds:0x3A8A<16>:segptr32]
	v483 = Mem0[es:bx + 52<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v483
	call fn3CEE_695E (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	es_bx = Mem0[ds:0x3A8A<16>:segptr32]
	Mem0[es:bx + 56<i16>:word16] = ax
	// succ:  l3CEE_92C9
l3CEE_92C9:
	es_bx = Mem0[ds:0x3A8A<16>:segptr32]
	ax = Mem0[es:bx + 56<i16>:word16]
	Mem0[es:bx + 54<i16>:word16] = ax
	call fn3CEE_6AB8 (retsize: 4;)
	es_bx = Mem0[ds:0x3A8A<16>:segptr32]
	ax = Mem0[es:bx + 52<i16>:word16]
	ax = ax - 1<16>
	SZO = cond(ax)
	ax = ax - Mem0[es:bx + 46<i16>:word16]
	SCZO = cond(ax)
	cx = cx - cx - C
	SCZO = cond(cx)
	ax = ax & cx
	SZ = cond(ax)
	O = false
	C = false
	ax = ax + Mem0[es:bx + 46<i16>:word16]
	SCZO = cond(ax)
	Mem0[es:bx + 46<i16>:word16] = ax
	call fn3CEE_89B4 (retsize: 4;)
	Mem0[ss:bp - 12<i16>:word16] = ax
	// succ:  l3CEE_92F9
l3CEE_92F9:
	es_bx = Mem0[ds:0x3A8A<16>:segptr32]
	ax = Mem0[es:bx + 42<i16>:word16]
	ax = ax | Mem0[es:bx + 44<i16>:word16]
	SZ = cond(ax)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_9320
	// succ:  l3CEE_9307 l3CEE_9320
l3CEE_9307:
	ax = Mem0[es:bx + 38<i16>:word16]
	dx_ax = Mem0[es:bx + 40<i16>:word16] *s32 ax
	SCZO = cond(dx_ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v485 = Mem0[es:bx + 44<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v485
	v486 = Mem0[es:bx + 42<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v486
	call fn21DC_09B4 (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	// succ:  l3CEE_9320
l3CEE_9320:
	es_bx = Mem0[ds:0x3A8A<16>:segptr32]
	SCZO = cond(Mem0[es:bx + 14<i16>:word16] - 0<16>)
	branch Test(EQ,Z) l3CEE_932E
	// succ:  l3CEE_932B l3CEE_932E
l3CEE_932B:
	goto l3CEE_93EC
	// succ:  l3CEE_93EC
l3CEE_932E:
	SCZO = cond(Mem0[ss:bp - 12<i16>:word16] - 3<16>)
	branch Test(EQ,Z) l3CEE_9337
	// succ:  l3CEE_9334 l3CEE_9337
l3CEE_9334:
	goto l3CEE_93EC
	// succ:  l3CEE_93EC
l3CEE_9337:
	v489 = Mem0[es:bx + 20<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v489
	ax = bp - 10<i16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ss
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn21DC_0696 (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	ax = ax | ax
	SZ = cond(ax)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_93B0
	// succ:  l3CEE_934C l3CEE_93B0
l3CEE_934C:
	es_bx = Mem0[ds:0x3A8A<16>:segptr32]
	ax = Mem0[es:bx + 20<i16>:word16]
	ax = ax - 1<16>
	SZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v490 = Mem0[es:bx + 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v490
	v491 = Mem0[es:bx:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v491
	v492 = Mem0[ss:bp - 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v492
	v493 = Mem0[ss:bp - 10<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v493
	call fn2017_0258 (retsize: 4;)
	sp = sp + 0xA<16>
	SCZO = cond(sp)
	es_bx = Mem0[ds:0x3A8A<16>:segptr32]
	si = Mem0[es:bx + 20<i16>:word16]
	es_bx = Mem0[ss:bp - 10<i16>:segptr32]
	Mem0[es:bx - 1<i16> + si:byte] = 0<8>
	es_bx = Mem0[ds:0x3A8A<16>:segptr32]
	ax = Mem0[es:bx + 20<i16>:word16]
	ax = ax - 1<16>
	SZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v494 = Mem0[es:bx + 20<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v494
	v495 = Mem0[ss:bp - 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v495
	v496 = Mem0[ss:bp - 10<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v496
	call fn2368_0272 (retsize: 4;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	es_bx = Mem0[ds:0x3A8A<16>:segptr32]
	v497 = Mem0[es:bx + 22<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v497
	v498 = Mem0[es:bx + 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v498
	v499 = Mem0[es:bx:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v499
	call fn21DC_074E (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	goto l3CEE_93E5
	// succ:  l3CEE_93E5
l3CEE_93B0:
	es_bx = Mem0[ds:0x3A8A<16>:segptr32]
	es_bx = Mem0[ds:bx + 0<16>:segptr32]
	ax = es
	es_si = Mem0[ds:0x3A8A<16>:segptr32]
	si = Mem0[es:si + 20<i16>:word16]
	es = ax
	Mem0[es:bx - 1<i16> + si:byte] = 0<8>
	es_bx = Mem0[ds:0x3A8A<16>:segptr32]
	ax = Mem0[es:bx + 20<i16>:word16]
	ax = ax - 1<16>
	SZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v503 = Mem0[es:bx + 22<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v503
	v504 = Mem0[es:bx + 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v504
	v505 = Mem0[es:bx:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v505
	call fn2368_0272 (retsize: 4;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	// succ:  l3CEE_93E5
l3CEE_93E5:
	call fn21DC_03EE (retsize: 4;)
	goto l3CEE_9467
	// succ:  l3CEE_9467
l3CEE_93EC:
	SCZO = cond(Mem0[ss:bp - 18<i16>:word16] - 0<16>)
	branch Test(EQ,Z) l3CEE_943A
	// succ:  l3CEE_93F2 l3CEE_943A
l3CEE_93F2:
	ax = 1<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn3B5D_017C (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	SZP = cond(al & 1<8>)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_943A
	// succ:  l3CEE_9402 l3CEE_943A
l3CEE_9402:
	ax = 1<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn3B5D_028A (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 1<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn3B5D_0270 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 1<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn3B5D_0252 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn2368_0272 (retsize: 4;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	call fn21DC_03EE (retsize: 4;)
	goto l3CEE_9447
	// succ:  l3CEE_9447
l3CEE_943A:
	ax = 0x60AC<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn3B5D_04C8 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	// succ:  l3CEE_9447
l3CEE_9447:
	es_bx = Mem0[ds:0x3A8A<16>:segptr32]
	ax = Mem0[es:bx:word16]
	ax = ax | Mem0[es:bx + 2<i16>:word16]
	SZ = cond(ax)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_9467
	// succ:  l3CEE_9454 l3CEE_9467
l3CEE_9454:
	v500 = Mem0[es:bx + 22<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v500
	v501 = Mem0[es:bx + 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v501
	v502 = Mem0[es:bx:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v502
	call fn21DC_074E (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	// succ:  l3CEE_9467
l3CEE_9467:
	ax = 0x42<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v506 = Mem0[ds:0x3A8C<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v506
	v507 = Mem0[ds:0x3A8A<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v507
	call fn21DC_09B4 (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	ax = Mem0[ss:bp - 22<i16>:word16]
	dx = Mem0[ss:bp - 20<i16>:word16]
	Mem0[ds:0x3A8A<16>:word16] = ax
	Mem0[ds:0x3A8C<16>:word16] = dx
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn3CEE_4EAC_exit
l3CEE_F715_in_fn3CEE_4EAC:
	sp = sp + 1<16>
	SZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	v36 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v36
	SCZO = cond(v36)
	v38 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v38
	SCZO = cond(v38)
	v39 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v39
	SCZO = cond(v39)
	v40 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v40
	SCZO = cond(v40)
	v41 = Mem0[ss:bp + 65<i16> + di:byte] + al
	Mem0[ss:bp + 65<i16> + di:byte] = v41
	SCZO = cond(v41)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bx
	ax = ax - 1<16>
	SZO = cond(ax)
	di = di - 1<16>
	SZO = cond(di)
	v43 = sp
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v43
	ax = ax - 1<16>
	SZO = cond(ax)
	bp = bp + 1<16>
	SZO = cond(bp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bx
	v44 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v44
	SCZO = cond(v44)
	v45 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v45
	SCZO = cond(v45)
	v46 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v46
	SCZO = cond(v46)
	bp = bp - 1<16>
	SZO = cond(bp)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	v47 = sp
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v47
	v48 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v48
	SCZO = cond(v48)
	v49 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v49
	SCZO = cond(v49)
	v50 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v50
	SCZO = cond(v50)
	v51 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v51
	SCZO = cond(v51)
	v52 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v52
	SCZO = cond(v52)
	v53 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v53
	SCZO = cond(v53)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bx
	v54 = sp
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v54
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	dx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bp = bp + 1<16>
	SZO = cond(bp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	di = di - 1<16>
	SZO = cond(di)
	v55 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v55
	SCZO = cond(v55)
	v56 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v56
	SCZO = cond(v56)
	v57 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v57
	SCZO = cond(v57)
	v58 = Mem0[ss:bp + 72<i16> + di:byte] + al
	Mem0[ss:bp + 72<i16> + di:byte] = v58
	SCZO = cond(v58)
	bx = bx + 1<16>
	SZO = cond(bx)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	si = si - 1<16>
	SZO = cond(si)
	v59 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v59
	SCZO = cond(v59)
	v60 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v60
	SCZO = cond(v60)
	v61 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v61
	SCZO = cond(v61)
	v62 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v62
	SCZO = cond(v62)
	v63 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v63
	SCZO = cond(v63)
	v64 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v64
	SCZO = cond(v64)
	v65 = Mem0[ss:bp + 84<i16> + di:byte] + al
	Mem0[ss:bp + 84<i16> + di:byte] = v65
	SCZO = cond(v65)
	v66 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v66
	SCZO = cond(v66)
	v67 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v67
	SCZO = cond(v67)
	v68 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v68
	SCZO = cond(v68)
	v69 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v69
	SCZO = cond(v69)
	v70 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v70
	SCZO = cond(v70)
	v71 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v71
	SCZO = cond(v71)
	v72 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v72
	SCZO = cond(v72)
	v73 = sp
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v73
	bx = bx + 1<16>
	SZO = cond(bx)
	v74 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v74
	SCZO = cond(v74)
	v75 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v75
	SCZO = cond(v75)
	v76 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v76
	SCZO = cond(v76)
	v77 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v77
	SCZO = cond(v77)
	v78 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v78
	SCZO = cond(v78)
	v79 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v79
	SCZO = cond(v79)
	v80 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v80
	SCZO = cond(v80)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bx
	v81 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v81
	SCZO = cond(v81)
	v82 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v82
	SCZO = cond(v82)
	v83 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v83
	SCZO = cond(v83)
	v84 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v84
	SCZO = cond(v84)
	v85 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v85
	SCZO = cond(v85)
	v86 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v86
	SCZO = cond(v86)
	v87 = Mem0[ss:bp + 67<i16> + di:byte] + dl
	Mem0[ss:bp + 67<i16> + di:byte] = v87
	SCZO = cond(v87)
	v89 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v89
	SCZO = cond(v89)
	v90 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v90
	SCZO = cond(v90)
	v91 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v91
	SCZO = cond(v91)
	v92 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v92
	SCZO = cond(v92)
	v93 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v93
	SCZO = cond(v93)
	v94 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v94
	SCZO = cond(v94)
	v95 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v95
	SCZO = cond(v95)
	di = di - 1<16>
	SZO = cond(di)
	v96 = sp
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v96
	ax = ax - 1<16>
	SZO = cond(ax)
	bp = bp + 1<16>
	SZO = cond(bp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bx
	v97 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v97
	SCZO = cond(v97)
	v98 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v98
	SCZO = cond(v98)
	v99 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v99
	SCZO = cond(v99)
	v100 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v100
	SCZO = cond(v100)
	v101 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v101
	SCZO = cond(v101)
	cx = cx - 1<16>
	SZO = cond(cx)
	si = si - 1<16>
	SZO = cond(si)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	bp = bp + 1<16>
	SZO = cond(bp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bx
	v102 = sp
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v102
	bp = bp - 1<16>
	SZO = cond(bp)
	bp = bp + 1<16>
	SZO = cond(bp)
	si = si - 1<16>
	SZO = cond(si)
	v103 = sp
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v103
	v104 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v104
	SCZO = cond(v104)
	v105 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v105
	SCZO = cond(v105)
	v106 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v106
	SCZO = cond(v106)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	bp = bp + 1<16>
	SZO = cond(bp)
	v107 = sp
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v107
	v108 = sp
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v108
	cx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bx = bx + 1<16>
	SZO = cond(bx)
	cx = cx + 1<16>
	SZO = cond(cx)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bx
	ax = ax - 1<16>
	SZO = cond(ax)
	v109 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v109
	SCZO = cond(v109)
	v110 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v110
	SCZO = cond(v110)
	v111 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v111
	SCZO = cond(v111)
	v112 = Mem0[ss:bp + 79<i16> + di:byte] + al
	Mem0[ss:bp + 79<i16> + di:byte] = v112
	SCZO = cond(v112)
	bp = bp - 1<16>
	SZO = cond(bp)
	bp = bp - 1<16>
	SZO = cond(bp)
	cx = cx - 1<16>
	SZO = cond(cx)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bx
	cx = cx - 1<16>
	SZO = cond(cx)
	di = di - 1<16>
	SZO = cond(di)
	si = si - 1<16>
	SZO = cond(si)
	v113 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v113
	SCZO = cond(v113)
	v114 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v114
	SCZO = cond(v114)
	v115 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v115
	SCZO = cond(v115)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	bp = bp + 1<16>
	SZO = cond(bp)
	si = si - 1<16>
	SZO = cond(si)
	v116 = sp
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v116
	cx = cx + 1<16>
	SZO = cond(cx)
	sp = sp - 1<16>
	SZO = cond(sp)
	v117 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v117
	SCZO = cond(v117)
	v118 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v118
	SCZO = cond(v118)
	v119 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v119
	SCZO = cond(v119)
	v120 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v120
	SCZO = cond(v120)
	v121 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v121
	SCZO = cond(v121)
	v122 = sp
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v122
	bp = bp + 1<16>
	SZO = cond(bp)
	sp = sp - 1<16>
	SZO = cond(sp)
	bp = bp + 1<16>
	SZO = cond(bp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = ax - 1<16>
	SZO = cond(ax)
	di = di - 1<16>
	SZO = cond(di)
	si = si - 1<16>
	SZO = cond(si)
	bp = bp + 1<16>
	SZO = cond(bp)
	v123 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v123
	SCZO = cond(v123)
	v124 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v124
	SCZO = cond(v124)
	v125 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v125
	SCZO = cond(v125)
	v126 = Mem0[ss:bp + 79<i16>:byte] + al
	Mem0[ss:bp + 79<i16>:byte] = v126
	SCZO = cond(v126)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	sp = sp + 1<16>
	SZO = cond(sp)
	bp = bp + 1<16>
	SZO = cond(bp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	di = di - 1<16>
	SZO = cond(di)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bx
	cx = cx - 1<16>
	SZO = cond(cx)
	v127 = sp
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v127
	v128 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v128
	SCZO = cond(v128)
	v129 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v129
	SCZO = cond(v129)
	v130 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v130
	SCZO = cond(v130)
	sp = sp + 1<16>
	SZO = cond(sp)
	bx = bx + 1<16>
	SZO = cond(bx)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	si = si - 1<16>
	SZO = cond(si)
	cx = cx + 1<16>
	SZO = cond(cx)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	cx = cx - 1<16>
	SZO = cond(cx)
	di = di + 1<16>
	SZO = cond(di)
	cx = cx + 1<16>
	SZO = cond(cx)
	v131 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v131
	SCZO = cond(v131)
	v132 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v132
	SCZO = cond(v132)
	__syscall<byte>(0x15<8>)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	sp = sp + 1<16>
	SZO = cond(sp)
	cx = cx + 1<16>
	SZO = cond(cx)
	v133 = sp
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v133
	bp = bp + 1<16>
	SZO = cond(bp)
	sp = sp + 1<16>
	SZO = cond(sp)
	bx = bx + 1<16>
	SZO = cond(bx)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	v134 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v134
	SCZO = cond(v134)
	v135 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v135
	SCZO = cond(v135)
	v136 = Mem0[ds:0x415A<16>:byte] + dl
	Mem0[ds:0x415A<16>:byte] = v136
	SCZO = cond(v136)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	sp = sp + 1<16>
	SZO = cond(sp)
	bx = bx + 1<16>
	SZO = cond(bx)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	v137 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v137
	SCZO = cond(v137)
	v138 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v138
	SCZO = cond(v138)
	v139 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v139
	SCZO = cond(v139)
	dh = dh + ch
	SCZO = cond(dh)
	ax = ax + 0x4A<16> + C
	SCZO = cond(ax)
	v142 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v142
	SCZO = cond(v142)
	v143 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v143
	SCZO = cond(v143)
	v144 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v144
	SCZO = cond(v144)
	v145 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v145
	SCZO = cond(v145)
	v146 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v146
	SCZO = cond(v146)
	v147 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v147
	SCZO = cond(v147)
	v148 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v148
	SCZO = cond(v148)
	bp = bp - 1<16>
	SZO = cond(bp)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	v149 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v149
	SCZO = cond(v149)
	v150 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v150
	SCZO = cond(v150)
	v151 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v151
	SCZO = cond(v151)
	v152 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v152
	SCZO = cond(v152)
	v153 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v153
	SCZO = cond(v153)
	v154 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v154
	SCZO = cond(v154)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bx
	bx = bx + 1<16>
	SZO = cond(bx)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	sp = sp + 1<16>
	SZO = cond(sp)
	bx = bx + 1<16>
	SZO = cond(bx)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	cx = cx + 1<16>
	SZO = cond(cx)
	si = si - 1<16>
	SZO = cond(si)
	bp = bp + 1<16>
	SZO = cond(bp)
	sp = sp - 1<16>
	SZO = cond(sp)
	v155 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v155
	SCZO = cond(v155)
	v156 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v156
	SCZO = cond(v156)
	v157 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v157
	SCZO = cond(v157)
	di = di + 1<16>
	SZO = cond(di)
	bp = bp + 1<16>
	SZO = cond(bp)
	v158 = sp
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v158
	sp = sp + 1<16>
	SZO = cond(sp)
	bp = bp + 1<16>
	SZO = cond(bp)
	v159 = sp
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v159
	cx = cx + 1<16>
	SZO = cond(cx)
	cx = cx - 1<16>
	SZO = cond(cx)
	sp = sp - 1<16>
	SZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bx
	v160 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v160
	SCZO = cond(v160)
	v161 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v161
	SCZO = cond(v161)
	cpu_debug_break()
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ss
	bp = bp - 1<16>
	SZO = cond(bp)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	dx = dx + 1<16>
	SZO = cond(dx)
	bp = bp + 1<16>
	SZO = cond(bp)
	di = di + 1<16>
	SZO = cond(di)
	si = si + 1<16>
	SZO = cond(si)
	di = di - 1<16>
	SZO = cond(di)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	sp = sp + 1<16>
	SZO = cond(sp)
	bp = bp + 1<16>
	SZO = cond(bp)
	v162 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v162
	SCZO = cond(v162)
	v163 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v163
	SCZO = cond(v163)
	v164 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v164
	SCZO = cond(v164)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	bp = bp + 1<16>
	SZO = cond(bp)
	dx = dx + 1<16>
	SZO = cond(dx)
	cx = cx + 1<16>
	SZO = cond(cx)
	si = si - 1<16>
	SZO = cond(si)
	bx = bx - 1<16>
	SZO = cond(bx)
	bp = bp + 1<16>
	SZO = cond(bp)
	si = si - 1<16>
	SZO = cond(si)
	sp = sp + 1<16>
	SZO = cond(sp)
	v165 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v165
	SCZO = cond(v165)
	v166 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v166
	SCZO = cond(v166)
	v167 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v167
	SCZO = cond(v167)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	bp = bp + 1<16>
	SZO = cond(bp)
	bp = bp + 1<16>
	SZO = cond(bp)
	si = si - 1<16>
	SZO = cond(si)
	sp = sp + 1<16>
	SZO = cond(sp)
	dx = dx + 1<16>
	SZO = cond(dx)
	cx = cx + 1<16>
	SZO = cond(cx)
	sp = sp - 1<16>
	SZO = cond(sp)
	v168 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v168
	SCZO = cond(v168)
	v169 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v169
	SCZO = cond(v169)
	v170 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v170
	SCZO = cond(v170)
	v171 = Mem0[ds:bx + 82<i16> + si:byte] + dl
	Mem0[ds:bx + 82<i16> + si:byte] = v171
	SCZO = cond(v171)
	bp = bp + 1<16>
	SZO = cond(bp)
	si = si + 1<16>
	SZO = cond(si)
	di = di - 1<16>
	SZO = cond(di)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	sp = sp + 1<16>
	SZO = cond(sp)
	bp = bp + 1<16>
	SZO = cond(bp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v172 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v172
	SCZO = cond(v172)
	v173 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v173
	SCZO = cond(v173)
	v174 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v174
	SCZO = cond(v174)
	v175 = Mem0[ds:bx + 75<i16>:byte] + cl
	Mem0[ds:bx + 75<i16>:byte] = v175
	SCZO = cond(v175)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	bp = bp + 1<16>
	SZO = cond(bp)
	bx = bx + 1<16>
	SZO = cond(bx)
	bp = bp + 1<16>
	SZO = cond(bp)
	cx = cx - 1<16>
	SZO = cond(cx)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v177 = sp
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v177
	v178 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v178
	SCZO = cond(v178)
	v179 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v179
	SCZO = cond(v179)
	v180 = Mem0[ss:bp + 0x4F16<16>:byte] + bl
	Mem0[ss:bp + 0x4F16<16>:byte] = v180
	SCZO = cond(v180)
	bx = bx - 1<16>
	SZO = cond(bx)
	sp = sp + 1<16>
	SZO = cond(sp)
	cx = cx - 1<16>
	SZO = cond(cx)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bx
	dx = dx + 1<16>
	SZO = cond(dx)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bx
	bp = bp + 1<16>
	SZO = cond(bp)
	v182 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v182
	SCZO = cond(v182)
	v183 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v183
	SCZO = cond(v183)
	v184 = Mem0[ds:si:word16]
	Mem0[es:di:word16] = v184
	si = si + 2<i16>
	di = di + 2<i16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ss
	di = di - 1<16>
	SZO = cond(di)
	bx = bx - 1<16>
	SZO = cond(bx)
	dx = dx + 1<16>
	SZO = cond(dx)
	cx = cx + 1<16>
	SZO = cond(cx)
	si = si - 1<16>
	SZO = cond(si)
	bx = bx - 1<16>
	SZO = cond(bx)
	v185 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v185
	SCZO = cond(v185)
	v186 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v186
	SCZO = cond(v186)
	v187 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v187
	SCZO = cond(v187)
	v188 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v188
	SCZO = cond(v188)
	cl = 0x16<8>
	di = di - 1<16>
	SZO = cond(di)
	bx = bx - 1<16>
	SZO = cond(bx)
	cx = cx + 1<16>
	SZO = cond(cx)
	bx = bx + 1<16>
	SZO = cond(bx)
	di = di - 1<16>
	SZO = cond(di)
	ax = ax - 1<16>
	SZO = cond(ax)
	v189 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v189
	SCZO = cond(v189)
	v190 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v190
	SCZO = cond(v190)
	v191 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v191
	SCZO = cond(v191)
	v192 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v192
	SCZO = cond(v192)
	si = 0x4F16<16>
	bx = bx - 1<16>
	SZO = cond(bx)
	sp = sp + 1<16>
	SZO = cond(sp)
	bx = bx + 1<16>
	SZO = cond(bx)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	v193 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v193
	SCZO = cond(v193)
	v194 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v194
	SCZO = cond(v194)
	v195 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v195
	SCZO = cond(v195)
	v196 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v196
	SCZO = cond(v196)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ss
	bx = bx - 1<16>
	SZO = cond(bx)
	v197 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v197
	SCZO = cond(v197)
	v198 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v198
	SCZO = cond(v198)
	v199 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v199
	SCZO = cond(v199)
	v200 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v200
	SCZO = cond(v200)
	v201 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v201
	SCZO = cond(v201)
	v202 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v202
	SCZO = cond(v202)
	v203 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v203
	SCZO = cond(v203)
	v204 = Mem0[ss:bp + 75<i16> + di:byte] + cl
	Mem0[ss:bp + 75<i16> + di:byte] = v204
	SCZO = cond(v204)
	v205 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v205
	SCZO = cond(v205)
	v206 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v206
	SCZO = cond(v206)
	v207 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v207
	SCZO = cond(v207)
	v208 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v208
	SCZO = cond(v208)
	v209 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v209
	SCZO = cond(v209)
	v210 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v210
	SCZO = cond(v210)
	v211 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v211
	SCZO = cond(v211)
	di = di - 1<16>
	SZO = cond(di)
	bx = bx - 1<16>
	SZO = cond(bx)
	si = si + 1<16>
	SZO = cond(si)
	di = di - 1<16>
	SZO = cond(di)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	sp = sp + 1<16>
	SZO = cond(sp)
	bp = bp + 1<16>
	SZO = cond(bp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	di = di - 1<16>
	SZO = cond(di)
	v212 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v212
	SCZO = cond(v212)
	v213 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v213
	SCZO = cond(v213)
	v214 = Mem0[ds:si + 0x4F16<16>:byte] + ch
	Mem0[ds:si + 0x4F16<16>:byte] = v214
	SCZO = cond(v214)
	bx = bx - 1<16>
	SZO = cond(bx)
	dx = dx + 1<16>
	SZO = cond(dx)
	cx = cx + 1<16>
	SZO = cond(cx)
	si = si - 1<16>
	SZO = cond(si)
	bx = bx - 1<16>
	SZO = cond(bx)
	sp = sp + 1<16>
	SZO = cond(sp)
	bp = bp + 1<16>
	SZO = cond(bp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v215 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v215
	SCZO = cond(v215)
	v216 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v216
	SCZO = cond(v216)
	v217 = Mem0[ds:bx + 0x4F16<16>:byte] + dh
	Mem0[ds:bx + 0x4F16<16>:byte] = v217
	SCZO = cond(v217)
	bx = bx - 1<16>
	SZO = cond(bx)
	di = di - 1<16>
	SZO = cond(di)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	bp = bp + 1<16>
	SZO = cond(bp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bx
	ax = ax - 1<16>
	SZO = cond(ax)
	di = di - 1<16>
	SZO = cond(di)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	v218 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v218
	SCZO = cond(v218)
	v219 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v219
	SCZO = cond(v219)
	Mem0[ds:0x4143<16>:byte] = 0x53<8>
	bx = bx + 1<16>
	SZO = cond(bx)
	cx = cx + 1<16>
	SZO = cond(cx)
	sp = sp + 1<16>
	SZO = cond(sp)
	bp = bp + 1<16>
	SZO = cond(bp)
	dx = dx + 1<16>
	SZO = cond(dx)
	cx = cx + 1<16>
	SZO = cond(cx)
	sp = sp - 1<16>
	SZO = cond(sp)
	v220 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v220
	SCZO = cond(v220)
	v221 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v221
	SCZO = cond(v221)
	v222 = Mem0[ds:0x5552<16>:byte] + 0x4E<8> + C
	Mem0[ds:0x5552<16>:byte] = v222
	SCZO = cond(v222)
	bp = bp + 1<16>
	SZO = cond(bp)
	si = si - 1<16>
	SZO = cond(si)
	sp = sp + 1<16>
	SZO = cond(sp)
	dx = dx + 1<16>
	SZO = cond(dx)
	cx = cx + 1<16>
	SZO = cond(cx)
	sp = sp - 1<16>
	SZO = cond(sp)
	v223 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v223
	SCZO = cond(v223)
	v224 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v224
	SCZO = cond(v224)
	v225 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v225
	SCZO = cond(v225)
	v226 = Mem0[ss:bp + 85<i16> + si:byte] + dl
	Mem0[ss:bp + 85<i16> + si:byte] = v226
	SCZO = cond(v226)
	si = si - 1<16>
	SZO = cond(si)
	dx = dx + 1<16>
	SZO = cond(dx)
	cx = cx + 1<16>
	SZO = cond(cx)
	si = si - 1<16>
	SZO = cond(si)
	bx = bx - 1<16>
	SZO = cond(bx)
	bp = bp + 1<16>
	SZO = cond(bp)
	si = si - 1<16>
	SZO = cond(si)
	sp = sp + 1<16>
	SZO = cond(sp)
	v227 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v227
	SCZO = cond(v227)
	v228 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v228
	SCZO = cond(v228)
	v229 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v229
	SCZO = cond(v229)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	si = si - 1<16>
	SZO = cond(si)
	si = si + 1<16>
	SZO = cond(si)
	di = di - 1<16>
	SZO = cond(di)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	sp = sp + 1<16>
	SZO = cond(sp)
	bp = bp + 1<16>
	SZO = cond(bp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v230 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v230
	SCZO = cond(v230)
	v231 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v231
	SCZO = cond(v231)
	v232 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v232
	SCZO = cond(v232)
	v233 = Mem0[ds:di + 89<i16>:byte] + cl
	Mem0[ds:di + 89<i16>:byte] = v233
	SCZO = cond(v233)
	bx = bx + 1<16>
	SZO = cond(bx)
	cx = cx + 1<16>
	SZO = cond(cx)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bx
	ax = ax - 1<16>
	SZO = cond(ax)
	si = si + 1<16>
	SZO = cond(si)
	di = di - 1<16>
	SZO = cond(di)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	sp = sp + 1<16>
	SZO = cond(sp)
	v234 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v234
	SCZO = cond(v234)
	v235 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v235
	SCZO = cond(v235)
	v236 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v236
	SCZO = cond(v236)
	bp = bp - 1<16>
	SZO = cond(bp)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	dx = dx + 1<16>
	SZO = cond(dx)
	cx = cx + 1<16>
	SZO = cond(cx)
	si = si - 1<16>
	SZO = cond(si)
	bx = bx - 1<16>
	SZO = cond(bx)
	bp = bp + 1<16>
	SZO = cond(bp)
	si = si - 1<16>
	SZO = cond(si)
	sp = sp + 1<16>
	SZO = cond(sp)
	v237 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v237
	SCZO = cond(v237)
	v238 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v238
	SCZO = cond(v238)
	v239 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v239
	SCZO = cond(v239)
	v240 = Mem0[ss:bp + 67<i16> + di:byte] + dl
	Mem0[ss:bp + 67<i16> + di:byte] = v240
	SCZO = cond(v240)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	cx = cx - 1<16>
	SZO = cond(cx)
	si = si - 1<16>
	SZO = cond(si)
	bx = bx + 1<16>
	SZO = cond(bx)
	bp = bp + 1<16>
	SZO = cond(bp)
	si = si - 1<16>
	SZO = cond(si)
	v241 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v241
	SCZO = cond(v241)
	v242 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v242
	SCZO = cond(v242)
	v243 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v243
	SCZO = cond(v243)
	v244 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v244
	SCZO = cond(v244)
	bp = bp - 1<16>
	SZO = cond(bp)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	bp = bp + 1<16>
	SZO = cond(bp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	v245 = Mem0[ds:si:byte] ^ dh
	Mem0[ds:si:byte] = v245
	SZ = cond(Mem0[ds:si:byte])
	O = false
	C = false
	v246 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v246
	SCZO = cond(v246)
	v247 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v247
	SCZO = cond(v247)
	v248 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v248
	SCZO = cond(v248)
	v249 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v249
	SCZO = cond(v249)
	v250 = Mem0[ds:di + 89<i16>:byte] + cl
	Mem0[ds:di + 89<i16>:byte] = v250
	SCZO = cond(v250)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	bp = bp + 1<16>
	SZO = cond(bp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	v251 = Mem0[ds:bx + si:word16] ^ si
	Mem0[ds:bx + si:word16] = v251
	SZ = cond(Mem0[ds:bx + si:word16])
	O = false
	C = false
	v252 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v252
	SCZO = cond(v252)
	v253 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v253
	SCZO = cond(v253)
	v254 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v254
	SCZO = cond(v254)
	v255 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v255
	SCZO = cond(v255)
	v256 = Mem0[ds:di + 89<i16>:byte] + cl
	Mem0[ds:di + 89<i16>:byte] = v256
	SCZO = cond(v256)
	si = si - 1<16>
	SZO = cond(si)
	bp = bp + 1<16>
	SZO = cond(bp)
	v257 = sp
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v257
	v258 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v258
	SCZO = cond(v258)
	v259 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v259
	SCZO = cond(v259)
	v260 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v260
	SCZO = cond(v260)
	v261 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v261
	SCZO = cond(v261)
	v262 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v262
	SCZO = cond(v262)
	v263 = Mem0[ds:bx + 78<i16> + di:byte] + cl
	Mem0[ds:bx + 78<i16> + di:byte] = v263
	SCZO = cond(v263)
	bx = bx + 1<16>
	SZO = cond(bx)
	bp = bp + 1<16>
	SZO = cond(bp)
	sp = sp + 1<16>
	SZO = cond(sp)
	cx = cx + 1<16>
	SZO = cond(cx)
	v264 = sp
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v264
	cx = cx + 1<16>
	SZO = cond(cx)
	v265 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v265
	SCZO = cond(v265)
	v266 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v266
	SCZO = cond(v266)
	v267 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v267
	SCZO = cond(v267)
	dx = dx + Mem0[ds:bx:word16] + C
	SCZO = cond(dx)
	bx = bx + 1<16>
	SZO = cond(bx)
	di = di - 1<16>
	SZO = cond(di)
	bp = bp - 1<16>
	SZO = cond(bp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	v268 = sp
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v268
	bp = bp + 1<16>
	SZO = cond(bp)
	cx = cx - 1<16>
	SZO = cond(cx)
	si = si - 1<16>
	SZO = cond(si)
	bx = bx + 1<16>
	SZO = cond(bx)
	v269 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v269
	SCZO = cond(v269)
	v270 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v270
	SCZO = cond(v270)
	di = Mem0[ss:sp:word16]
	sp = sp + 2<16>
	si = Mem0[ss:sp:word16]
	sp = sp + 2<16>
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<16>
	sp = sp + 2<16>
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<16>
	dx = Mem0[ss:sp:word16]
	sp = sp + 2<16>
	cx = Mem0[ss:sp:word16]
	sp = sp + 2<16>
	ax = Mem0[ss:sp:word16]
	sp = sp + 2<16>
	ss = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	bp = bp + 1<16>
	SZO = cond(bp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	sp = sp + 1<16>
	SZO = cond(sp)
	bx = bx + 1<16>
	SZO = cond(bx)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	v271 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v271
	SCZO = cond(v271)
	v272 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v272
	SCZO = cond(v272)
	v273 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v273
	SCZO = cond(v273)
	v274 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v274
	SCZO = cond(v274)
	v275 = Mem0[ss:bp + 66<i16> + di:byte] + al
	Mem0[ss:bp + 66<i16> + di:byte] = v275
	SCZO = cond(v275)
	v276 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v276
	SCZO = cond(v276)
	v277 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v277
	SCZO = cond(v277)
	v278 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v278
	SCZO = cond(v278)
	v279 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v279
	SCZO = cond(v279)
	v280 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v280
	SCZO = cond(v280)
	v281 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v281
	SCZO = cond(v281)
	v282 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v282
	SCZO = cond(v282)
	bx = bx + 1<16>
	SZO = cond(bx)
	cx = cx + 1<16>
	SZO = cond(cx)
	v283 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v283
	SCZO = cond(v283)
	v284 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v284
	SCZO = cond(v284)
	v285 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v285
	SCZO = cond(v285)
	v286 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v286
	SCZO = cond(v286)
	v287 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v287
	SCZO = cond(v287)
	v288 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v288
	SCZO = cond(v288)
	v289 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v289
	SCZO = cond(v289)
	cx = cx - 1<16>
	SZO = cond(cx)
	si = si - 1<16>
	SZO = cond(si)
	bx = bx + 1<16>
	SZO = cond(bx)
	bp = bp + 1<16>
	SZO = cond(bp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bx
	v290 = sp
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v290
	cx = cx + 1<16>
	SZO = cond(cx)
	v291 = sp
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v291
	v292 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v292
	SCZO = cond(v292)
	v293 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v293
	SCZO = cond(v293)
	v294 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v294
	SCZO = cond(v294)
	SCZO = cond(al - 0x17<8>)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	bp = bp + 1<16>
	SZO = cond(bp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	sp = sp - 1<16>
	SZO = cond(sp)
	bp = bp + 1<16>
	SZO = cond(bp)
	sp = sp + 1<16>
	SZO = cond(sp)
	di = di + 1<16>
	SZO = cond(di)
	bp = bp + 1<16>
	SZO = cond(bp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	v295 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v295
	SCZO = cond(v295)
	v296 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v296
	SCZO = cond(v296)
	v297 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v297
	SCZO = cond(v297)
	v298 = Mem0[ds:bx + 78<i16> + di:byte] + cl
	Mem0[ds:bx + 78<i16> + di:byte] = v298
	SCZO = cond(v298)
	bx = bx + 1<16>
	SZO = cond(bx)
	bp = bp + 1<16>
	SZO = cond(bp)
	si = si - 1<16>
	SZO = cond(si)
	cx = cx + 1<16>
	SZO = cond(cx)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	cx = cx - 1<16>
	SZO = cond(cx)
	di = di + 1<16>
	SZO = cond(di)
	cx = cx + 1<16>
	SZO = cond(cx)
	v299 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v299
	SCZO = cond(v299)
	v300 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v300
	SCZO = cond(v300)
	dx = Mem0[ds:bx:word16] *s 0x5055<16>
	SCZO = cond(dx)
	sp = sp + 1<16>
	SZO = cond(sp)
	cx = cx + 1<16>
	SZO = cond(cx)
	v301 = sp
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v301
	bp = bp + 1<16>
	SZO = cond(bp)
	cx = cx - 1<16>
	SZO = cond(cx)
	si = si - 1<16>
	SZO = cond(si)
	bx = bx + 1<16>
	SZO = cond(bx)
	bp = bp + 1<16>
	SZO = cond(bp)
	v302 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v302
	SCZO = cond(v302)
	v303 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v303
	SCZO = cond(v303)
	ax = CONVERT(al, int8, int16)
	ss = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	dx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	cx = cx + 1<16>
	SZO = cond(cx)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	cx = cx - 1<16>
	SZO = cond(cx)
	si = si - 1<16>
	SZO = cond(si)
	bx = bx + 1<16>
	SZO = cond(bx)
	bp = bp + 1<16>
	SZO = cond(bp)
	v304 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v304
	SCZO = cond(v304)
	v305 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v305
	SCZO = cond(v305)
	v306 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v306
	SCZO = cond(v306)
	v307 = Mem0[ds:bx + 0x5317<16> + di:byte] + dl
	Mem0[ds:bx + 0x5317<16> + di:byte] = v307
	SCZO = cond(v307)
	bx = bx + 1<16>
	SZO = cond(bx)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	cx = cx - 1<16>
	SZO = cond(cx)
	si = si - 1<16>
	SZO = cond(si)
	bx = bx + 1<16>
	SZO = cond(bx)
	bp = bp + 1<16>
	SZO = cond(bp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	cx = cx + 1<16>
	SZO = cond(cx)
	si = si - 1<16>
	SZO = cond(si)
	v308 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v308
	SCZO = cond(v308)
	v309 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v309
	SCZO = cond(v309)
	v310 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v310
	SCZO = cond(v310)
	bp = bp + 1<16>
	SZO = cond(bp)
	ax = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	v311 = sp
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v311
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	cx = cx + 1<16>
	SZO = cond(cx)
	bx = bx + 1<16>
	SZO = cond(bx)
	v312 = sp
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v312
	cx = cx - 1<16>
	SZO = cond(cx)
	si = si - 1<16>
	SZO = cond(si)
	bx = bx + 1<16>
	SZO = cond(bx)
	v313 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v313
	SCZO = cond(v313)
	v314 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v314
	SCZO = cond(v314)
	ax = __aam(al)
	di = di - 1<16>
	SZO = cond(di)
	bx = bx - 1<16>
	SZO = cond(bx)
	cx = cx - 1<16>
	SZO = cond(cx)
	si = si - 1<16>
	SZO = cond(si)
	bx = bx + 1<16>
	SZO = cond(bx)
	bp = bp + 1<16>
	SZO = cond(bp)
	v315 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v315
	SCZO = cond(v315)
	v316 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v316
	SCZO = cond(v316)
	v317 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v317
	SCZO = cond(v317)
	v318 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v318
	SCZO = cond(v318)
	si = 0x4F17<16>
	bx = bx - 1<16>
	SZO = cond(bx)
	cx = cx - 1<16>
	SZO = cond(cx)
	si = si - 1<16>
	SZO = cond(si)
	bx = bx + 1<16>
	SZO = cond(bx)
	bp = bp + 1<16>
	SZO = cond(bp)
	sp = sp + 1<16>
	SZO = cond(sp)
	bp = bp + 1<16>
	SZO = cond(bp)
	sp = sp + 1<16>
	SZO = cond(sp)
	v319 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v319
	SCZO = cond(v319)
	v320 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v320
	SCZO = cond(v320)
	cl = cl + cl
	SCZO = cond(cl)
	ss = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	di = di - 1<16>
	SZO = cond(di)
	bx = bx - 1<16>
	SZO = cond(bx)
	cx = cx - 1<16>
	SZO = cond(cx)
	si = si - 1<16>
	SZO = cond(si)
	bx = bx + 1<16>
	SZO = cond(bx)
	bp = bp + 1<16>
	SZO = cond(bp)
	sp = sp + 1<16>
	SZO = cond(sp)
	cx = cx + 1<16>
	SZO = cond(cx)
	v321 = sp
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v321
	bp = bp + 1<16>
	SZO = cond(bp)
	v322 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v322
	SCZO = cond(v322)
	v323 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v323
	SCZO = cond(v323)
	v324 = (Mem0[ds:bx:byte] & 1<8> << 8<8> - 1<8>) != 0<8>
	Mem0[ds:bx:byte] = __rcl<byte,byte>(Mem0[ds:bx:byte], 1<8>, C)
	C = v324
	bp = bp - 1<16>
	SZO = cond(bp)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = sp + 1<16>
	SZO = cond(sp)
	cx = cx + 1<16>
	SZO = cond(cx)
	v325 = sp
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v325
	bp = bp + 1<16>
	SZO = cond(bp)
	al = al ^ Mem0[ds:bx + si:byte]
	SZ = cond(al)
	O = false
	C = false
	v326 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v326
	SCZO = cond(v326)
	v327 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v327
	SCZO = cond(v327)
	v328 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v328
	SCZO = cond(v328)
	v329 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v329
	SCZO = cond(v329)
	bp = bp - 1<16>
	SZO = cond(bp)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = sp + 1<16>
	SZO = cond(sp)
	cx = cx + 1<16>
	SZO = cond(cx)
	v330 = sp
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v330
	bp = bp + 1<16>
	SZO = cond(bp)
	v331 = Mem0[ds:bx + si:word16] ^ ax
	Mem0[ds:bx + si:word16] = v331
	SZ = cond(Mem0[ds:bx + si:word16])
	O = false
	C = false
	v332 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v332
	SCZO = cond(v332)
	v333 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v333
	SCZO = cond(v333)
	v334 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v334
	SCZO = cond(v334)
	v335 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v335
	SCZO = cond(v335)
	bp = bp - 1<16>
	SZO = cond(bp)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	v336 = sp
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v336
	v337 = Mem0[ds:bx + si:word16] ^ ax
	Mem0[ds:bx + si:word16] = v337
	SZ = cond(Mem0[ds:bx + si:word16])
	O = false
	C = false
	v338 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v338
	SCZO = cond(v338)
	v339 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v339
	SCZO = cond(v339)
	v340 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v340
	SCZO = cond(v340)
	v341 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v341
	SCZO = cond(v341)
	v342 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v342
	SCZO = cond(v342)
	bp = bp - 1<16>
	SZO = cond(bp)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	v343 = sp
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v343
	al = al ^ Mem0[ds:bx + si:byte]
	SZ = cond(al)
	O = false
	C = false
	v344 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v344
	SCZO = cond(v344)
	v345 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v345
	SCZO = cond(v345)
	v346 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v346
	SCZO = cond(v346)
	v347 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v347
	SCZO = cond(v347)
	v348 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v348
	SCZO = cond(v348)
	v349 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v349
	SCZO = cond(v349)
	v350 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v350
	SCZO = cond(v350)
	v351 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v351
	SCZO = cond(v351)
	v352 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v352
	SCZO = cond(v352)
	v353 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v353
	SCZO = cond(v353)
	v354 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v354
	SCZO = cond(v354)
	v355 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v355
	SCZO = cond(v355)
	v356 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v356
	SCZO = cond(v356)
	bp = bp + 1<16>
	SZO = cond(bp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	di = di - 1<16>
	SZO = cond(di)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bx
	cx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bx
	v357 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v357
	SCZO = cond(v357)
	v358 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v358
	SCZO = cond(v358)
	v359 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v359
	SCZO = cond(v359)
	bh = 0x3C<8>
	bp = bp + 1<16>
	SZO = cond(bp)
	ax = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	di = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bp = bp + 1<16>
	SZO = cond(bp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	di = di - 1<16>
	SZO = cond(di)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	v361 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v361
	SCZO = cond(v361)
	v362 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v362
	SCZO = cond(v362)
	dx = 0x4E3C<16>
	cx = cx + 1<16>
	SZO = cond(cx)
	bp = bp - 1<16>
	SZO = cond(bp)
	bp = bp + 1<16>
	SZO = cond(bp)
	v363 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v363
	SCZO = cond(v363)
	v364 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v364
	SCZO = cond(v364)
	v365 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v365
	SCZO = cond(v365)
	v366 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v366
	SCZO = cond(v366)
	v367 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v367
	SCZO = cond(v367)
	v368 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v368
	SCZO = cond(v368)
	sp = sp - 1<16>
	SZO = cond(sp)
	cx = cx - 1<16>
	SZO = cond(cx)
	si = si - 1<16>
	SZO = cond(si)
	bp = bp + 1<16>
	SZO = cond(bp)
	v369 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v369
	SCZO = cond(v369)
	v370 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v370
	SCZO = cond(v370)
	v371 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v371
	SCZO = cond(v371)
	v372 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v372
	SCZO = cond(v372)
	v373 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v373
	SCZO = cond(v373)
	v374 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v374
	SCZO = cond(v374)
	cx = cx - 1<16>
	SZO = cond(cx)
	si = si - 1<16>
	SZO = cond(si)
	si = si + 1<16>
	SZO = cond(si)
	di = di - 1<16>
	SZO = cond(di)
	v375 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v375
	SCZO = cond(v375)
	v376 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v376
	SCZO = cond(v376)
	v377 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v377
	SCZO = cond(v377)
	v378 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v378
	SCZO = cond(v378)
	v379 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v379
	SCZO = cond(v379)
	v380 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v380
	SCZO = cond(v380)
	bp = bp - 1<16>
	SZO = cond(bp)
	di = di - 1<16>
	SZO = cond(di)
	sp = sp + 1<16>
	SZO = cond(sp)
	bp = bp + 1<16>
	SZO = cond(bp)
	sp = sp - 1<16>
	SZO = cond(sp)
	v381 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v381
	SCZO = cond(v381)
	v382 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v382
	SCZO = cond(v382)
	v383 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v383
	SCZO = cond(v383)
	v384 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v384
	SCZO = cond(v384)
	v385 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v385
	SCZO = cond(v385)
	v386 = Mem0[ds:bx + 49<i16>:byte] + bl
	Mem0[ds:bx + 49<i16>:byte] = v386
	SCZO = cond(v386)
	v387 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v387
	SCZO = cond(v387)
	v388 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v388
	SCZO = cond(v388)
	v389 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v389
	SCZO = cond(v389)
	v390 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v390
	SCZO = cond(v390)
	v391 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v391
	SCZO = cond(v391)
	v392 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v392
	SCZO = cond(v392)
	v393 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v393
	SCZO = cond(v393)
	di = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	al = al ^ Mem0[ds:bx + si:byte]
	SZ = cond(al)
	O = false
	C = false
	v394 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v394
	SCZO = cond(v394)
	v395 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v395
	SCZO = cond(v395)
	v396 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v396
	SCZO = cond(v396)
	v397 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v397
	SCZO = cond(v397)
	v398 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v398
	SCZO = cond(v398)
	v399 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v399
	SCZO = cond(v399)
	v400 = Mem0[ds:bx + 51<i16>:byte] + bl
	Mem0[ds:bx + 51<i16>:byte] = v400
	SCZO = cond(v400)
	v401 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v401
	SCZO = cond(v401)
	v402 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v402
	SCZO = cond(v402)
	v403 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v403
	SCZO = cond(v403)
	v404 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v404
	SCZO = cond(v404)
	v405 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v405
	SCZO = cond(v405)
	v406 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v406
	SCZO = cond(v406)
	v407 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v407
	SCZO = cond(v407)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	si = si - 1<16>
	SZO = cond(si)
	sp = sp + 1<16>
	SZO = cond(sp)
	bp = bp + 1<16>
	SZO = cond(bp)
	si = si + 1<16>
	SZO = cond(si)
	di = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bp = bp + 1<16>
	SZO = cond(bp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	di = di - 1<16>
	SZO = cond(di)
	v408 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v408
	SCZO = cond(v408)
	v409 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v409
	SCZO = cond(v409)
	return
	// succ:  fn3CEE_4EAC_exit
fn3CEE_4EAC_exit:


// fn3CEE_5556
// Return size: 4
define fn3CEE_5556
fn3CEE_5556_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_5556
l3CEE_5556:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x12<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 16<i16>:word16] = 0<16>
	Mem0[ss:bp - 4<i16>:word16] = 0<16>
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	Mem0[es:bx + 26<i16>:word16] = 0<16>
	Mem0[es:bx:word16] = 0<16>
	Mem0[es:bx + 2<i16>:word16] = 0<16>
	Mem0[es:bx + 30<i16>:word16] = 0<16>
	Mem0[es:bx + 32<i16>:word16] = 0<16>
	ax = Mem0[es:bx + 18<i16>:word16]
	ax = ax - Mem0[es:bx + 14<i16>:word16]
	SCZO = cond(ax)
	Mem0[es:bx + 42<i16>:word16] = ax
	Mem0[ss:bp - 14<i16>:word16] = 0<16>
	goto l3CEE_586B
	// succ:  l3CEE_586B
l3CEE_559C:
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	es_bx = Mem0[ss:bp - 8<i16>:segptr32]
	v19 = Mem0[es:bx + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v19
	v20 = Mem0[es:bx + 4<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v20
	call fn2368_022E (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	call fn31FF_1D44 (retsize: 4;)
	// succ:  l3CEE_55B7
l3CEE_55B7:
	es_bx = Mem0[ss:bp - 8<i16>:segptr32]
	es_bx = Mem0[es:bx + 8<i16>:segptr32]
	SCZO = cond(Mem0[es:bx:byte] - 0<8>)
	branch Test(EQ,Z) l3CEE_55CC
	// succ:  l3CEE_55C4 l3CEE_55CC
l3CEE_55C4:
	Mem0[ss:bp - 2<i16>:word16] = 0x100<16>
	goto l3CEE_55D6
	// succ:  l3CEE_55D6
l3CEE_55CC:
	es_bx = Mem0[ds:0x1296<16>:segptr32]
	ax = Mem0[es:bx:word16]
	Mem0[ss:bp - 2<i16>:word16] = ax
	// succ:  l3CEE_55D6
l3CEE_55D6:
	es_bx = Mem0[ss:bp - 8<i16>:segptr32]
	v23 = Mem0[es:bx + 10<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v23
	v24 = Mem0[es:bx + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v24
	call fn3431_3E9E (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	SCZO = cond(Mem0[ss:bp - 2<i16>:word16] - 0x300<16>)
	branch Test(NE,Z) l3CEE_55FC
	// succ:  l3CEE_55F0 l3CEE_55FC
l3CEE_55F0:
	es_bx = Mem0[ss:bp - 8<i16>:segptr32]
	Mem0[es:bx + 58<i16>:word16] = 0xA<16>
	goto l3CEE_560B
	// succ:  l3CEE_560B
l3CEE_55FC:
	es_bx = Mem0[ds:0x1296<16>:segptr32]
	ax = Mem0[es:bx + 2<i16>:word16]
	es_bx = Mem0[ss:bp - 8<i16>:segptr32]
	Mem0[es:bx + 58<i16>:word16] = ax
	// succ:  l3CEE_560B
l3CEE_560B:
	call fn2368_033C (retsize: 4;)
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = Mem0[es:bx + 20<i16>:word16]
	ax = ax - Mem0[es:bx + 16<i16>:word16]
	SCZO = cond(ax)
	ax = ax + 1<16>
	SZO = cond(ax)
	es_bx = Mem0[ss:bp - 8<i16>:segptr32]
	ax = ax - Mem0[es:bx + 58<i16>:word16]
	SCZO = cond(ax)
	cx = cx - cx - C
	SCZO = cond(cx)
	ax = ax & cx
	SZ = cond(ax)
	O = false
	C = false
	ax = ax + Mem0[es:bx + 58<i16>:word16]
	SCZO = cond(ax)
	Mem0[es:bx + 64<i16>:word16] = ax
	ax = Mem0[es:bx + 22<i16>:word16]
	dx = Mem0[es:bx + 24<i16>:word16]
	Mem0[ss:bp - 12<i16>:word16] = ax
	Mem0[ss:bp - 10<i16>:word16] = dx
	SCZO = cond(Mem0[es:bx + 20<i16>:word16] - 0<16>)
	branch Test(EQ,Z) l3CEE_5694
	// succ:  l3CEE_5645 l3CEE_5694
l3CEE_5645:
	Mem0[es:bx + 30<i16>:word16] = 0<16>
	// succ:  l3CEE_564B
l3CEE_564B:
	es_bx = Mem0[ss:bp - 12<i16>:segptr32]
	SCZO = cond(Mem0[es:bx:byte] - 0<8>)
	branch Test(NE,Z) l3CEE_5657
	// succ:  l3CEE_5654 l3CEE_5657
l3CEE_5654:
	goto l3CEE_56ED
	// succ:  l3CEE_56ED
l3CEE_5657:
	ax = 0x3B<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = es
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bx
	call fn3CEE_3ABC (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 18<i16>:word16] = ax
	v28 = Mem0[ss:bp - 12<i16>:word16] + ax
	Mem0[ss:bp - 12<i16>:word16] = v28
	SCZO = cond(v28)
	es_bx = Mem0[ss:bp - 8<i16>:segptr32]
	v29 = Mem0[es:bx + 30<i16>:word16] + 1<16>
	Mem0[es:bx + 30<i16>:word16] = v29
	SZO = cond(v29)
	ax = Mem0[es:bx + 58<i16>:word16]
	ax = ax - Mem0[ss:bp - 18<i16>:word16]
	SCZO = cond(ax)
	cx = cx - cx - C
	SCZO = cond(cx)
	cx = ~cx
	ax = ax & cx
	SZ = cond(ax)
	O = false
	C = false
	ax = ax + Mem0[ss:bp - 18<i16>:word16]
	SCZO = cond(ax)
	Mem0[es:bx + 58<i16>:word16] = ax
	es_bx = Mem0[ss:bp - 12<i16>:segptr32]
	SCZO = cond(Mem0[es:bx:byte] - 0<8>)
	branch Test(EQ,Z) l3CEE_564B
	// succ:  l3CEE_568E l3CEE_564B
l3CEE_568E:
	v30 = Mem0[ss:bp - 12<i16>:word16] + 1<16>
	Mem0[ss:bp - 12<i16>:word16] = v30
	SZO = cond(v30)
	goto l3CEE_564B
	// succ:  l3CEE_564B
l3CEE_5694:
	es_bx = Mem0[ss:bp - 8<i16>:segptr32]
	Mem0[es:bx + 30<i16>:word16] = 1<16>
	goto l3CEE_56E4
	// succ:  l3CEE_56E4
l3CEE_56A0:
	ax = 0x3E<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v33 = Mem0[ss:bp - 10<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v33
	v34 = Mem0[ss:bp - 12<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v34
	call fn3CEE_3ABC (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 18<i16>:word16] = ax
	v35 = Mem0[ss:bp - 12<i16>:word16] + ax
	Mem0[ss:bp - 12<i16>:word16] = v35
	SCZO = cond(v35)
	es_bx = Mem0[ss:bp - 12<i16>:segptr32]
	SCZO = cond(Mem0[es:bx:byte] - 0<8>)
	branch Test(EQ,Z) l3CEE_56CD
	// succ:  l3CEE_56C0 l3CEE_56CD
l3CEE_56C0:
	v36 = Mem0[ss:bp - 12<i16>:word16] + 1<16>
	Mem0[ss:bp - 12<i16>:word16] = v36
	SZO = cond(v36)
	v37 = Mem0[ss:bp - 18<i16>:word16] + 1<16>
	Mem0[ss:bp - 18<i16>:word16] = v37
	SZO = cond(v37)
	es_bx = Mem0[ss:bp - 8<i16>:segptr32]
	v38 = Mem0[es:bx + 30<i16>:word16] + 1<16>
	Mem0[es:bx + 30<i16>:word16] = v38
	SZO = cond(v38)
	// succ:  l3CEE_56CD
l3CEE_56CD:
	es_bx = Mem0[ss:bp - 8<i16>:segptr32]
	ax = Mem0[es:bx + 58<i16>:word16]
	ax = ax - Mem0[ss:bp - 18<i16>:word16]
	SCZO = cond(ax)
	cx = cx - cx - C
	SCZO = cond(cx)
	cx = ~cx
	ax = ax & cx
	SZ = cond(ax)
	O = false
	C = false
	ax = ax + Mem0[ss:bp - 18<i16>:word16]
	SCZO = cond(ax)
	Mem0[es:bx + 58<i16>:word16] = ax
	// succ:  l3CEE_56E4
l3CEE_56E4:
	es_bx = Mem0[ss:bp - 12<i16>:segptr32]
	SCZO = cond(Mem0[es:bx:byte] - 0<8>)
	branch Test(NE,Z) l3CEE_56A0
	// succ:  l3CEE_56ED l3CEE_56A0
l3CEE_56ED:
	es_bx = Mem0[ss:bp - 8<i16>:segptr32]
	es_bx = Mem0[es:bx + 34<i16>:segptr32]
	SCZO = cond(Mem0[es:bx:byte] - 0<8>)
	branch Test(EQ,Z) l3CEE_5706
	// succ:  l3CEE_56FA l3CEE_5706
l3CEE_56FA:
	es_bx = Mem0[ss:bp - 8<i16>:segptr32]
	v27 = Mem0[es:bx + 30<i16>:word16] + 1<16>
	Mem0[es:bx + 30<i16>:word16] = v27
	SZO = cond(v27)
	Mem0[ss:bp - 16<i16>:word16] = 1<16>
	// succ:  l3CEE_5706
l3CEE_5706:
	es_bx = Mem0[ss:bp - 8<i16>:segptr32]
	ax = Mem0[es:bx + 26<i16>:word16]
	dx = Mem0[es:bx + 28<i16>:word16]
	Mem0[ss:bp - 12<i16>:word16] = ax
	Mem0[ss:bp - 10<i16>:word16] = dx
	Mem0[es:bx + 32<i16>:word16] = 0<16>
	goto l3CEE_575E
	// succ:  l3CEE_575E
l3CEE_5720:
	ax = 0x3B<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v41 = Mem0[ss:bp - 10<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v41
	v42 = Mem0[ss:bp - 12<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v42
	call fn3CEE_3ABC (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 18<i16>:word16] = ax
	v43 = Mem0[ss:bp - 12<i16>:word16] + ax
	Mem0[ss:bp - 12<i16>:word16] = v43
	SCZO = cond(v43)
	es_bx = Mem0[ss:bp - 8<i16>:segptr32]
	v44 = Mem0[es:bx + 32<i16>:word16] + 1<16>
	Mem0[es:bx + 32<i16>:word16] = v44
	SZO = cond(v44)
	ax = Mem0[es:bx + 58<i16>:word16]
	ax = ax - Mem0[ss:bp - 18<i16>:word16]
	SCZO = cond(ax)
	cx = cx - cx - C
	SCZO = cond(cx)
	cx = ~cx
	ax = ax & cx
	SZ = cond(ax)
	O = false
	C = false
	ax = ax + Mem0[ss:bp - 18<i16>:word16]
	SCZO = cond(ax)
	Mem0[es:bx + 58<i16>:word16] = ax
	es_bx = Mem0[ss:bp - 12<i16>:segptr32]
	SCZO = cond(Mem0[es:bx:byte] - 0<8>)
	branch Test(EQ,Z) l3CEE_575E
	// succ:  l3CEE_575B l3CEE_575E
l3CEE_575B:
	v45 = Mem0[ss:bp - 12<i16>:word16] + 1<16>
	Mem0[ss:bp - 12<i16>:word16] = v45
	SZO = cond(v45)
	// succ:  l3CEE_575E
l3CEE_575E:
	es_bx = Mem0[ss:bp - 12<i16>:segptr32]
	SCZO = cond(Mem0[es:bx:byte] - 0<8>)
	branch Test(NE,Z) l3CEE_5720
	// succ:  l3CEE_5767 l3CEE_5720
l3CEE_5767:
	es_bx = Mem0[ss:bp - 8<i16>:segptr32]
	es_bx = Mem0[es:bx + 38<i16>:segptr32]
	SCZO = cond(Mem0[es:bx:byte] - 0<8>)
	branch Test(EQ,Z) l3CEE_5780
	// succ:  l3CEE_5774 l3CEE_5780
l3CEE_5774:
	es_bx = Mem0[ss:bp - 8<i16>:segptr32]
	v40 = Mem0[es:bx + 32<i16>:word16] + 1<16>
	Mem0[es:bx + 32<i16>:word16] = v40
	SZO = cond(v40)
	Mem0[ss:bp - 4<i16>:word16] = 1<16>
	// succ:  l3CEE_5780
l3CEE_5780:
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = Mem0[es:bx + 20<i16>:word16]
	ax = ax - Mem0[es:bx + 16<i16>:word16]
	SCZO = cond(ax)
	ax = ax + 1<16>
	SZO = cond(ax)
	es_bx = Mem0[ss:bp - 8<i16>:segptr32]
	ax = ax - Mem0[es:bx + 58<i16>:word16]
	SCZO = cond(ax)
	cx = cx - cx - C
	SCZO = cond(cx)
	ax = ax & cx
	SZ = cond(ax)
	O = false
	C = false
	ax = ax + Mem0[es:bx + 58<i16>:word16]
	SCZO = cond(ax)
	Mem0[es:bx + 58<i16>:word16] = ax
	ax = Mem0[ss:bp - 2<i16>:word16]
	SCZO = cond(ax - 2<16>)
	branch Test(NE,Z) l3CEE_57AB
	// succ:  l3CEE_57A8 l3CEE_57AB
l3CEE_57A8:
	goto l3CEE_58AC
	// succ:  l3CEE_58AC
l3CEE_57AB:
	SCZO = cond(ax - 8<16>)
	branch Test(NE,Z) l3CEE_57B3
	// succ:  l3CEE_57B0 l3CEE_57B3
l3CEE_57B0:
	goto l3CEE_58AC
	// succ:  l3CEE_58AC
l3CEE_57B3:
	SCZO = cond(ax - 0x20<16>)
	branch Test(EQ,Z) l3CEE_57CA
	// succ:  l3CEE_57B8 l3CEE_57CA
l3CEE_57B8:
	SCZO = cond(ax - 0x80<16>)
	branch Test(NE,Z) l3CEE_57C0
	// succ:  l3CEE_57BD l3CEE_57C0
l3CEE_57BD:
	goto l3CEE_58BE
	// succ:  l3CEE_58BE
l3CEE_57C0:
	SCZO = cond(ax - 0x100<16>)
	branch Test(EQ,Z) l3CEE_57CA
	// succ:  l3CEE_57C5 l3CEE_57CA
l3CEE_57C5:
	SCZO = cond(ax - 0x300<16>)
	branch Test(NE,Z) l3CEE_57D0
	// succ:  l3CEE_57CA l3CEE_57D0
l3CEE_57CA:
	Mem0[es:bx + 62<i16>:word16] = 0<16>
	// succ:  l3CEE_57D0
l3CEE_57D0:
	SCZO = cond(Mem0[es:bx + 58<i16>:word16] - 0<16>)
	branch Test(EQ,Z) l3CEE_5813
	// succ:  l3CEE_57D7 l3CEE_5813
l3CEE_57D7:
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	SCZO = cond(Mem0[es:bx:word16] - 0<16>)
	branch Test(NE,Z) l3CEE_57E8
	// succ:  l3CEE_57E1 l3CEE_57E8
l3CEE_57E1:
	ax = Mem0[ss:bp - 14<i16>:word16]
	ax = ax + 1<16>
	SZO = cond(ax)
	Mem0[es:bx:word16] = ax
	// succ:  l3CEE_57E8
l3CEE_57E8:
	ax = Mem0[ss:bp - 14<i16>:word16]
	ax = ax + 1<16>
	SZO = cond(ax)
	Mem0[es:bx + 2<i16>:word16] = ax
	ax = Mem0[ss:bp - 14<i16>:word16]
	SCZO = cond(Mem0[es:bx:word16] - ax)
	branch Test(UGT,CZ) l3CEE_5813
	// succ:  l3CEE_57F8 l3CEE_5813
l3CEE_57F8:
	es_bx = Mem0[ss:bp - 8<i16>:segptr32]
	v46 = Mem0[es:bx + 44<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v46
	v47 = Mem0[es:bx + 42<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v47
	call fn2017_03F5 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	v48 = Mem0[es:bx + 26<i16>:word16] + ax
	Mem0[es:bx + 26<i16>:word16] = v48
	SCZO = cond(v48)
	// succ:  l3CEE_5813
l3CEE_5813:
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = Mem0[es:bx + 26<i16>:word16]
	es_bx = Mem0[ss:bp - 8<i16>:segptr32]
	Mem0[es:bx + 60<i16>:word16] = ax
	ax = Mem0[es:bx + 58<i16>:word16]
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	v49 = Mem0[es:bx + 26<i16>:word16] + ax
	Mem0[es:bx + 26<i16>:word16] = v49
	SCZO = cond(v49)
	es_bx = Mem0[ss:bp - 8<i16>:segptr32]
	ax = Mem0[es:bx + 30<i16>:word16]
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = ax - Mem0[es:bx + 30<i16>:word16]
	SCZO = cond(ax)
	cx = cx - cx - C
	SCZO = cond(cx)
	cx = ~cx
	ax = ax & cx
	SZ = cond(ax)
	O = false
	C = false
	ax = ax + Mem0[es:bx + 30<i16>:word16]
	SCZO = cond(ax)
	Mem0[es:bx + 30<i16>:word16] = ax
	es_bx = Mem0[ss:bp - 8<i16>:segptr32]
	ax = Mem0[es:bx + 32<i16>:word16]
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = ax - Mem0[es:bx + 32<i16>:word16]
	SCZO = cond(ax)
	cx = cx - cx - C
	SCZO = cond(cx)
	cx = ~cx
	ax = ax & cx
	SZ = cond(ax)
	O = false
	C = false
	ax = ax + Mem0[es:bx + 32<i16>:word16]
	SCZO = cond(ax)
	Mem0[es:bx + 32<i16>:word16] = ax
	v50 = Mem0[ss:bp - 14<i16>:word16] + 1<16>
	Mem0[ss:bp - 14<i16>:word16] = v50
	SZO = cond(v50)
	// succ:  l3CEE_586B
l3CEE_586B:
	ax = Mem0[ss:bp - 14<i16>:word16]
	SCZO = cond(Mem0[es:bx + 4<i16>:word16] - ax)
	branch Test(UGT,CZ) l3CEE_5877
	// succ:  l3CEE_5874 l3CEE_5877
l3CEE_5874:
	goto l3CEE_58F8
	// succ:  l3CEE_58F8
l3CEE_5877:
	ax = 0x42<16>
	dx_ax = Mem0[ss:bp - 14<i16>:word16] *u32 ax
	SCZO = cond(dx_ax)
	ax = ax + Mem0[es:bx + 6<i16>:word16]
	SCZO = cond(ax)
	dx = Mem0[es:bx + 8<i16>:word16]
	Mem0[ss:bp - 8<i16>:word16] = ax
	Mem0[ss:bp - 6<i16>:word16] = dx
	es_bx = Mem0[ss:bp - 8<i16>:segptr32]
	ax = Mem0[es:bx:word16]
	ax = ax | Mem0[es:bx + 2<i16>:word16]
	SZ = cond(ax)
	O = false
	C = false
	branch Test(NE,Z) l3CEE_589A
	// succ:  l3CEE_5897 l3CEE_589A
l3CEE_5897:
	goto l3CEE_559C
	// succ:  l3CEE_559C
l3CEE_589A:
	v51 = Mem0[es:bx + 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v51
	v52 = Mem0[es:bx:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v52
	call fn2644_17C8 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	goto l3CEE_55B7
	// succ:  l3CEE_55B7
l3CEE_58AC:
	es_bx = Mem0[ss:bp - 8<i16>:segptr32]
	ax = Mem0[es:bx + 58<i16>:word16]
	ax = ax - Mem0[es:bx + 64<i16>:word16]
	SCZO = cond(ax)
	// succ:  l3CEE_58B7
l3CEE_58B7:
	Mem0[es:bx + 62<i16>:word16] = ax
	goto l3CEE_57D0
	// succ:  l3CEE_57D0
l3CEE_58BE:
	ax = Mem0[es:bx + 58<i16>:word16]
	ax = ax - 1<16>
	SZO = cond(ax)
	ax = ax >>u 1<16>
	SCZO = cond(ax)
	goto l3CEE_58B7
	// succ:  l3CEE_58B7
l3CEE_58C8:
	SCZO = cond(Mem0[ss:bp - 4<i16>:word16] - 1<16>)
	ax = ax - ax - C
	SCZO = cond(ax)
	ax = ax + 1<16>
	SZO = cond(ax)
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	SCZO = cond(ax - Mem0[es:bx + 32<i16>:word16])
	branch Test(ULT,C) l3CEE_58ED
	// succ:  l3CEE_58D9 l3CEE_58ED
l3CEE_58D9:
	SCZO = cond(Mem0[es:bx + 32<i16>:word16] - 0<16>)
	branch Test(EQ,Z) l3CEE_58F4
	// succ:  l3CEE_58E0 l3CEE_58F4
l3CEE_58E0:
	SCZO = cond(Mem0[ss:bp - 16<i16>:word16] - 0<16>)
	branch Test(EQ,Z) l3CEE_58F4
	// succ:  l3CEE_58E6 l3CEE_58F4
l3CEE_58E6:
	SCZO = cond(Mem0[es:bx + 30<i16>:word16] - 1<16>)
	branch Test(NE,Z) l3CEE_58F4
	// succ:  l3CEE_58ED l3CEE_58F4
l3CEE_58ED:
	v22 = Mem0[es:bx + 32<i16>:word16] - 1<16>
	Mem0[es:bx + 32<i16>:word16] = v22
	SZO = cond(v22)
	goto l3CEE_58F8
	// succ:  l3CEE_58F8
l3CEE_58F4:
	v39 = Mem0[es:bx + 30<i16>:word16] - 1<16>
	Mem0[es:bx + 30<i16>:word16] = v39
	SZO = cond(v39)
	// succ:  l3CEE_58F8
l3CEE_58F8:
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = Mem0[es:bx + 30<i16>:word16]
	ax = ax + Mem0[es:bx + 32<i16>:word16]
	SCZO = cond(ax)
	SCZO = cond(ax - Mem0[es:bx + 42<i16>:word16])
	branch Test(UGT,CZ) l3CEE_58C8
	// succ:  l3CEE_590A l3CEE_58C8
l3CEE_590A:
	Mem0[ss:bp - 14<i16>:word16] = 0<16>
	goto l3CEE_5996
	// succ:  l3CEE_5996
l3CEE_5912:
	ax = 0x42<16>
	dx_ax = Mem0[ss:bp - 14<i16>:word16] *u32 ax
	SCZO = cond(dx_ax)
	ax = ax + Mem0[es:bx + 6<i16>:word16]
	SCZO = cond(ax)
	dx = Mem0[es:bx + 8<i16>:word16]
	Mem0[ss:bp - 8<i16>:word16] = ax
	Mem0[ss:bp - 6<i16>:word16] = dx
	SCZO = cond(Mem0[ss:bp - 16<i16>:word16] - 0<16>)
	branch Test(EQ,Z) l3CEE_5940
	// succ:  l3CEE_592C l3CEE_5940
l3CEE_592C:
	es_bx = Mem0[ss:bp - 8<i16>:segptr32]
	es_bx = Mem0[es:bx + 34<i16>:segptr32]
	SCZO = cond(Mem0[es:bx:byte] - 0<8>)
	branch Test(NE,Z) l3CEE_5940
	// succ:  l3CEE_5939 l3CEE_5940
l3CEE_5939:
	es_bx = Mem0[ss:bp - 8<i16>:segptr32]
	v25 = Mem0[es:bx + 30<i16>:word16] + 1<16>
	Mem0[es:bx + 30<i16>:word16] = v25
	SZO = cond(v25)
	// succ:  l3CEE_5940
l3CEE_5940:
	SCZO = cond(Mem0[ss:bp - 4<i16>:word16] - 0<16>)
	branch Test(EQ,Z) l3CEE_595A
	// succ:  l3CEE_5946 l3CEE_595A
l3CEE_5946:
	es_bx = Mem0[ss:bp - 8<i16>:segptr32]
	es_bx = Mem0[es:bx + 38<i16>:segptr32]
	SCZO = cond(Mem0[es:bx:byte] - 0<8>)
	branch Test(NE,Z) l3CEE_595A
	// succ:  l3CEE_5953 l3CEE_595A
l3CEE_5953:
	es_bx = Mem0[ss:bp - 8<i16>:segptr32]
	v31 = Mem0[es:bx + 32<i16>:word16] + 1<16>
	Mem0[es:bx + 32<i16>:word16] = v31
	SZO = cond(v31)
	// succ:  l3CEE_595A
l3CEE_595A:
	es_bx = Mem0[ss:bp - 8<i16>:segptr32]
	ax = Mem0[es:bx + 30<i16>:word16]
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = ax - Mem0[es:bx + 30<i16>:word16]
	SCZO = cond(ax)
	cx = cx - cx - C
	SCZO = cond(cx)
	ax = ax & cx
	SZ = cond(ax)
	O = false
	C = false
	ax = ax + Mem0[es:bx + 30<i16>:word16]
	SCZO = cond(ax)
	es_bx = Mem0[ss:bp - 8<i16>:segptr32]
	Mem0[es:bx + 30<i16>:word16] = ax
	ax = Mem0[es:bx + 32<i16>:word16]
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = ax - Mem0[es:bx + 32<i16>:word16]
	SCZO = cond(ax)
	cx = cx - cx - C
	SCZO = cond(cx)
	ax = ax & cx
	SZ = cond(ax)
	O = false
	C = false
	ax = ax + Mem0[es:bx + 32<i16>:word16]
	SCZO = cond(ax)
	es_bx = Mem0[ss:bp - 8<i16>:segptr32]
	Mem0[es:bx + 32<i16>:word16] = ax
	v32 = Mem0[ss:bp - 14<i16>:word16] + 1<16>
	Mem0[ss:bp - 14<i16>:word16] = v32
	SZO = cond(v32)
	// succ:  l3CEE_5996
l3CEE_5996:
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = Mem0[ss:bp - 14<i16>:word16]
	SCZO = cond(Mem0[es:bx + 4<i16>:word16] - ax)
	branch Test(ULE,CZ) l3CEE_59A6
	// succ:  l3CEE_59A3 l3CEE_59A6
l3CEE_59A3:
	goto l3CEE_5912
	// succ:  l3CEE_5912
l3CEE_59A6:
	ax = Mem0[es:bx + 30<i16>:word16]
	Mem0[es:bx + 38<i16>:word16] = ax
	ax = Mem0[es:bx + 42<i16>:word16]
	ax = ax - Mem0[es:bx + 32<i16>:word16]
	SCZO = cond(ax)
	Mem0[es:bx + 40<i16>:word16] = ax
	SCZO = cond(Mem0[ss:bp - 16<i16>:word16] - 0<16>)
	branch Test(EQ,Z) l3CEE_59CE
	// succ:  l3CEE_59C0 l3CEE_59CE
l3CEE_59C0:
	SCZO = cond(Mem0[es:bx + 30<i16>:word16] - 0<16>)
	branch Test(EQ,Z) l3CEE_59CE
	// succ:  l3CEE_59C7 l3CEE_59CE
l3CEE_59C7:
	ax = Mem0[es:bx + 38<i16>:word16]
	ax = ax - 1<16>
	SZO = cond(ax)
	goto l3CEE_59D1
	// succ:  l3CEE_59D1
l3CEE_59CE:
	ax = 0xFFFF<16>
	// succ:  l3CEE_59D1
l3CEE_59D1:
	Mem0[es:bx + 34<i16>:word16] = ax
	SCZO = cond(Mem0[ss:bp - 4<i16>:word16] - 0<16>)
	branch Test(EQ,Z) l3CEE_59EA
	// succ:  l3CEE_59DB l3CEE_59EA
l3CEE_59DB:
	SCZO = cond(Mem0[es:bx + 32<i16>:word16] - 0<16>)
	branch Test(EQ,Z) l3CEE_59EA
	// succ:  l3CEE_59E2 l3CEE_59EA
l3CEE_59E2:
	ax = Mem0[es:bx + 40<i16>:word16]
	ax = ax + 1<16>
	SZO = cond(ax)
	goto l3CEE_59ED
	// succ:  l3CEE_59ED
l3CEE_59EA:
	ax = 0xFFFF<16>
	// succ:  l3CEE_59ED
l3CEE_59ED:
	Mem0[es:bx + 36<i16>:word16] = ax
	ax = Mem0[es:bx + 40<i16>:word16]
	ax = ax - Mem0[es:bx + 38<i16>:word16]
	SCZO = cond(ax)
	ax = ax + 1<16>
	SZO = cond(ax)
	Mem0[es:bx + 28<i16>:word16] = ax
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn3CEE_5556_exit
fn3CEE_5556_exit:


// fn3CEE_6121
// Return size: 0
define fn3CEE_6121
fn3CEE_6121_entry:
	sp = fp
	Top = 0<i8>
	goto l3CEE_6121
	// succ:  l3CEE_6121
l3CEE_60CE:
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	es_bx = Mem0[es:bx + 6<i16>:segptr32]
	ax = 0x42<16>
	dx_ax = Mem0[ss:bp - 14<i16>:word16] *u32 ax
	SCZO = cond(dx_ax)
	si = ax
	ax = Mem0[ds:0x3A7E<16>:word16]
	dx = Mem0[ds:0x3A80<16>:word16]
	Mem0[es:bx + 34<i16> + si:word16] = ax
	Mem0[es:bx + 36<i16> + si:word16] = dx
	// succ:  l3CEE_60ED
l3CEE_60ED:
	v24 = Mem0[ss:bp - 14<i16>:word16] + 1<16>
	Mem0[ss:bp - 14<i16>:word16] = v24
	SZO = cond(v24)
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = Mem0[ss:bp - 14<i16>:word16]
	SCZO = cond(Mem0[es:bx + 4<i16>:word16] - ax)
	branch Test(UGT,CZ) l3CEE_6100
	// succ:  l3CEE_60FD l3CEE_6100
l3CEE_60FD:
	goto l3CEE_61E3
	// succ:  l3CEE_61E3
l3CEE_6100:
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v27 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v27
	call fn3B5D_01E8 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	SCZO = cond(ax - Mem0[ss:bp - 14<i16>:word16])
	branch Test(ULE,CZ) l3CEE_60CE
	// succ:  l3CEE_6113 l3CEE_60CE
l3CEE_6113:
	si = Mem0[ss:bp - 14<i16>:word16]
	si = si + 1<16>
	SZO = cond(si)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	v28 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v28
	call fn3B5D_01E8 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	goto l3CEE_6123
	// succ:  l3CEE_6123
l3CEE_6121:
	es_ax = Mem0[ds:si + 0<16>:segptr32]
	// succ:  l3CEE_6123
l3CEE_6123:
	SZP = cond(al & 1<8>)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_60CE
	// succ:  l3CEE_6127 l3CEE_60CE
l3CEE_6127:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	v14 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v14
	call fn3B5D_0252 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	es_bx = Mem0[es:bx + 6<i16>:segptr32]
	cx = ax
	ax = 0x42<16>
	di = dx
	dx_ax = Mem0[ss:bp - 14<i16>:word16] *u32 ax
	SCZO = cond(dx_ax)
	dx = di
	di = ax
	Mem0[es:bx + 34<i16> + di:word16] = cx
	Mem0[es:bx + 36<i16> + di:word16] = dx
	goto l3CEE_60ED
	// succ:  l3CEE_60ED
l3CEE_61E3:
	v29 = Mem0[ss:bp - 2<i16>:word16] + 1<16>
	Mem0[ss:bp - 2<i16>:word16] = v29
	SZO = cond(v29)
	ax = Mem0[ss:bp - 18<i16>:word16]
	SCZO = cond(Mem0[ss:bp - 2<i16>:word16] - ax)
	branch Test(ULE,CZ) l3CEE_61F1
	// succ:  l3CEE_61EE l3CEE_61F1
l3CEE_61EE:
	goto l3CEE_6292
	// succ:  l3CEE_6292
l3CEE_61F1:
	v31 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v31
	call fn3B5D_017C (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	SZP = cond(ax & 0x200<16>)
	O = false
	C = false
	branch Test(NE,Z) l3CEE_6204
	// succ:  l3CEE_6201 l3CEE_6204
l3CEE_6201:
	goto l3CEE_6292
	// succ:  l3CEE_6292
l3CEE_6204:
	Mem0[ss:bp - 14<i16>:word16] = 0<16>
	goto l3CEE_622E
	// succ:  l3CEE_622E
l3CEE_620C:
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	es_bx = Mem0[es:bx + 6<i16>:segptr32]
	ax = 0x42<16>
	dx_ax = Mem0[ss:bp - 14<i16>:word16] *u32 ax
	SCZO = cond(dx_ax)
	si = ax
	ax = Mem0[ds:0x3A82<16>:word16]
	dx = Mem0[ds:0x3A84<16>:word16]
	Mem0[es:bx + 42<i16> + si:word16] = ax
	Mem0[es:bx + 44<i16> + si:word16] = dx
	// succ:  l3CEE_622B
l3CEE_622B:
	v44 = Mem0[ss:bp - 14<i16>:word16] + 1<16>
	Mem0[ss:bp - 14<i16>:word16] = v44
	SZO = cond(v44)
	// succ:  l3CEE_622E
l3CEE_622E:
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = Mem0[ss:bp - 14<i16>:word16]
	SCZO = cond(Mem0[es:bx + 4<i16>:word16] - ax)
	branch Test(UGT,CZ) l3CEE_623E
	// succ:  l3CEE_623B l3CEE_623E
l3CEE_623B:
	goto l3CEE_6321
	// succ:  l3CEE_6321
l3CEE_623E:
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v39 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v39
	call fn3B5D_01E8 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	SCZO = cond(ax - Mem0[ss:bp - 14<i16>:word16])
	branch Test(ULE,CZ) l3CEE_620C
	// succ:  l3CEE_6251 l3CEE_620C
l3CEE_6251:
	si = Mem0[ss:bp - 14<i16>:word16]
	si = si + 1<16>
	SZO = cond(si)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	v40 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v40
	call fn3B5D_01E8 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	SZP = cond(al & 1<8>)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_620C
	// succ:  l3CEE_6265 l3CEE_620C
l3CEE_6265:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	v41 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v41
	call fn3B5D_0252 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	es_bx = Mem0[es:bx + 6<i16>:segptr32]
	cx = ax
	ax = 0x42<16>
	di = dx
	dx_ax = Mem0[ss:bp - 14<i16>:word16] *u32 ax
	SCZO = cond(dx_ax)
	dx = di
	di = ax
	Mem0[es:bx + 42<i16> + di:word16] = cx
	Mem0[es:bx + 44<i16> + di:word16] = dx
	goto l3CEE_622B
	// succ:  l3CEE_622B
l3CEE_6292:
	ax = Mem0[ss:bp - 18<i16>:word16]
	SCZO = cond(Mem0[ss:bp - 2<i16>:word16] - ax)
	branch Test(UGT,CZ) l3CEE_62EA
	// succ:  l3CEE_629A l3CEE_62EA
l3CEE_629A:
	v30 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v30
	call fn3B5D_017C (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	SZP = cond(al & 1<8>)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_62EA
	// succ:  l3CEE_62A9 l3CEE_62EA
l3CEE_62A9:
	Mem0[ss:bp - 14<i16>:word16] = 0<16>
	goto l3CEE_62B3
	// succ:  l3CEE_62B3
l3CEE_62B0:
	v34 = Mem0[ss:bp - 14<i16>:word16] + 1<16>
	Mem0[ss:bp - 14<i16>:word16] = v34
	SZO = cond(v34)
	// succ:  l3CEE_62B3
l3CEE_62B3:
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = Mem0[ss:bp - 14<i16>:word16]
	SCZO = cond(Mem0[es:bx + 4<i16>:word16] - ax)
	branch Test(ULE,CZ) l3CEE_6321
	// succ:  l3CEE_62C0 l3CEE_6321
l3CEE_62C0:
	v32 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v32
	call fn3B5D_0252 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	es_bx = Mem0[es:bx + 6<i16>:segptr32]
	cx = ax
	ax = 0x42<16>
	si = dx
	dx_ax = Mem0[ss:bp - 14<i16>:word16] *u32 ax
	SCZO = cond(dx_ax)
	di = ax
	Mem0[es:bx + 42<i16> + di:word16] = cx
	Mem0[es:bx + 44<i16> + di:word16] = si
	goto l3CEE_62B0
	// succ:  l3CEE_62B0
l3CEE_62EA:
	Mem0[ss:bp - 14<i16>:word16] = 0<16>
	goto l3CEE_6314
	// succ:  l3CEE_6314
l3CEE_62F2:
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	es_bx = Mem0[es:bx + 6<i16>:segptr32]
	ax = 0x42<16>
	dx_ax = Mem0[ss:bp - 14<i16>:word16] *u32 ax
	SCZO = cond(dx_ax)
	si = ax
	ax = Mem0[ds:0x3A82<16>:word16]
	dx = Mem0[ds:0x3A84<16>:word16]
	Mem0[es:bx + 42<i16> + si:word16] = ax
	Mem0[es:bx + 44<i16> + si:word16] = dx
	v37 = Mem0[ss:bp - 14<i16>:word16] + 1<16>
	Mem0[ss:bp - 14<i16>:word16] = v37
	SZO = cond(v37)
	// succ:  l3CEE_6314
l3CEE_6314:
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = Mem0[ss:bp - 14<i16>:word16]
	SCZO = cond(Mem0[es:bx + 4<i16>:word16] - ax)
	branch Test(UGT,CZ) l3CEE_62F2
	// succ:  l3CEE_6321 l3CEE_62F2
l3CEE_6321:
	v33 = Mem0[ss:bp - 2<i16>:word16] + 1<16>
	Mem0[ss:bp - 2<i16>:word16] = v33
	SZO = cond(v33)
	ax = Mem0[ss:bp - 18<i16>:word16]
	SCZO = cond(Mem0[ss:bp - 2<i16>:word16] - ax)
	branch Test(ULE,CZ) l3CEE_632F
	// succ:  l3CEE_632C l3CEE_632F
l3CEE_632C:
	goto l3CEE_63CC
	// succ:  l3CEE_63CC
l3CEE_632F:
	v36 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v36
	call fn3B5D_017C (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	SZP = cond(ax & 0x200<16>)
	O = false
	C = false
	branch Test(NE,Z) l3CEE_6342
	// succ:  l3CEE_633F l3CEE_6342
l3CEE_633F:
	goto l3CEE_63CC
	// succ:  l3CEE_63CC
l3CEE_6342:
	Mem0[ss:bp - 14<i16>:word16] = 0<16>
	goto l3CEE_6368
	// succ:  l3CEE_6368
l3CEE_634A:
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	es_bx = Mem0[es:bx + 6<i16>:segptr32]
	ax = 0x42<16>
	dx_ax = Mem0[ss:bp - 14<i16>:word16] *u32 ax
	SCZO = cond(dx_ax)
	si = ax
	ax = 0x6060<16>
	Mem0[es:bx + 38<i16> + si:word16] = ax
	Mem0[es:bx + 40<i16> + si:word16] = ds
	// succ:  l3CEE_6365
l3CEE_6365:
	v51 = Mem0[ss:bp - 14<i16>:word16] + 1<16>
	Mem0[ss:bp - 14<i16>:word16] = v51
	SZO = cond(v51)
	// succ:  l3CEE_6368
l3CEE_6368:
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = Mem0[ss:bp - 14<i16>:word16]
	SCZO = cond(Mem0[es:bx + 4<i16>:word16] - ax)
	branch Test(UGT,CZ) l3CEE_6378
	// succ:  l3CEE_6375 l3CEE_6378
l3CEE_6375:
	goto l3CEE_6457
	// succ:  l3CEE_6457
l3CEE_6378:
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v46 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v46
	call fn3B5D_01E8 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	SCZO = cond(ax - Mem0[ss:bp - 14<i16>:word16])
	branch Test(ULE,CZ) l3CEE_634A
	// succ:  l3CEE_638B l3CEE_634A
l3CEE_638B:
	si = Mem0[ss:bp - 14<i16>:word16]
	si = si + 1<16>
	SZO = cond(si)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	v47 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v47
	call fn3B5D_01E8 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	SZP = cond(al & 1<8>)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_634A
	// succ:  l3CEE_639F l3CEE_634A
l3CEE_639F:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	v48 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v48
	call fn3B5D_0252 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	es_bx = Mem0[es:bx + 6<i16>:segptr32]
	cx = ax
	ax = 0x42<16>
	di = dx
	dx_ax = Mem0[ss:bp - 14<i16>:word16] *u32 ax
	SCZO = cond(dx_ax)
	dx = di
	di = ax
	Mem0[es:bx + 38<i16> + di:word16] = cx
	Mem0[es:bx + 40<i16> + di:word16] = dx
	goto l3CEE_6365
	// succ:  l3CEE_6365
l3CEE_63CC:
	ax = Mem0[ss:bp - 18<i16>:word16]
	SCZO = cond(Mem0[ss:bp - 2<i16>:word16] - ax)
	branch Test(UGT,CZ) l3CEE_6424
	// succ:  l3CEE_63D4 l3CEE_6424
l3CEE_63D4:
	v35 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v35
	call fn3B5D_017C (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	SZP = cond(al & 1<8>)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_6424
	// succ:  l3CEE_63E3 l3CEE_6424
l3CEE_63E3:
	Mem0[ss:bp - 14<i16>:word16] = 0<16>
	goto l3CEE_63ED
	// succ:  l3CEE_63ED
l3CEE_63EA:
	v42 = Mem0[ss:bp - 14<i16>:word16] + 1<16>
	Mem0[ss:bp - 14<i16>:word16] = v42
	SZO = cond(v42)
	// succ:  l3CEE_63ED
l3CEE_63ED:
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = Mem0[ss:bp - 14<i16>:word16]
	SCZO = cond(Mem0[es:bx + 4<i16>:word16] - ax)
	branch Test(ULE,CZ) l3CEE_6457
	// succ:  l3CEE_63FA l3CEE_6457
l3CEE_63FA:
	v38 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v38
	call fn3B5D_0252 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	es_bx = Mem0[es:bx + 6<i16>:segptr32]
	cx = ax
	ax = 0x42<16>
	si = dx
	dx_ax = Mem0[ss:bp - 14<i16>:word16] *u32 ax
	SCZO = cond(dx_ax)
	di = ax
	Mem0[es:bx + 38<i16> + di:word16] = cx
	Mem0[es:bx + 40<i16> + di:word16] = si
	goto l3CEE_63EA
	// succ:  l3CEE_63EA
l3CEE_6424:
	Mem0[ss:bp - 14<i16>:word16] = 0<16>
	goto l3CEE_644A
	// succ:  l3CEE_644A
l3CEE_642C:
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	es_bx = Mem0[es:bx + 6<i16>:segptr32]
	ax = 0x42<16>
	dx_ax = Mem0[ss:bp - 14<i16>:word16] *u32 ax
	SCZO = cond(dx_ax)
	si = ax
	ax = 0x6062<16>
	Mem0[es:bx + 38<i16> + si:word16] = ax
	Mem0[es:bx + 40<i16> + si:word16] = ds
	v58 = Mem0[ss:bp - 14<i16>:word16] + 1<16>
	Mem0[ss:bp - 14<i16>:word16] = v58
	SZO = cond(v58)
	// succ:  l3CEE_644A
l3CEE_644A:
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = Mem0[ss:bp - 14<i16>:word16]
	SCZO = cond(Mem0[es:bx + 4<i16>:word16] - ax)
	branch Test(UGT,CZ) l3CEE_642C
	// succ:  l3CEE_6457 l3CEE_642C
l3CEE_6457:
	v43 = Mem0[ss:bp - 2<i16>:word16] + 1<16>
	Mem0[ss:bp - 2<i16>:word16] = v43
	SZO = cond(v43)
	ax = Mem0[ss:bp - 18<i16>:word16]
	SCZO = cond(Mem0[ss:bp - 2<i16>:word16] - ax)
	branch Test(ULE,CZ) l3CEE_6465
	// succ:  l3CEE_6462 l3CEE_6465
l3CEE_6462:
	goto l3CEE_6502
	// succ:  l3CEE_6502
l3CEE_6465:
	v49 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v49
	call fn3B5D_017C (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	SZP = cond(ax & 0x200<16>)
	O = false
	C = false
	branch Test(NE,Z) l3CEE_6478
	// succ:  l3CEE_6475 l3CEE_6478
l3CEE_6475:
	goto l3CEE_6502
	// succ:  l3CEE_6502
l3CEE_6478:
	Mem0[ss:bp - 14<i16>:word16] = 0<16>
	goto l3CEE_649E
	// succ:  l3CEE_649E
l3CEE_6480:
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	es_bx = Mem0[es:bx + 6<i16>:segptr32]
	ax = 0x42<16>
	dx_ax = Mem0[ss:bp - 14<i16>:word16] *u32 ax
	SCZO = cond(dx_ax)
	si = ax
	ax = 0x6064<16>
	Mem0[es:bx + 26<i16> + si:word16] = ax
	Mem0[es:bx + 28<i16> + si:word16] = ds
	// succ:  l3CEE_649B
l3CEE_649B:
	v56 = Mem0[ss:bp - 14<i16>:word16] + 1<16>
	Mem0[ss:bp - 14<i16>:word16] = v56
	SZO = cond(v56)
	// succ:  l3CEE_649E
l3CEE_649E:
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = Mem0[ss:bp - 14<i16>:word16]
	SCZO = cond(Mem0[es:bx + 4<i16>:word16] - ax)
	branch Test(UGT,CZ) l3CEE_64AE
	// succ:  l3CEE_64AB l3CEE_64AE
l3CEE_64AB:
	goto l3CEE_658D
	// succ:  l3CEE_658D
l3CEE_64AE:
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v53 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v53
	call fn3B5D_01E8 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	SCZO = cond(ax - Mem0[ss:bp - 14<i16>:word16])
	branch Test(ULE,CZ) l3CEE_6480
	// succ:  l3CEE_64C1 l3CEE_6480
l3CEE_64C1:
	si = Mem0[ss:bp - 14<i16>:word16]
	si = si + 1<16>
	SZO = cond(si)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	v54 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v54
	call fn3B5D_01E8 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	SZP = cond(al & 1<8>)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_6480
	// succ:  l3CEE_64D5 l3CEE_6480
l3CEE_64D5:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	v55 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v55
	call fn3B5D_0252 (retsize: 4;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	es_bx = Mem0[es:bx + 6<i16>:segptr32]
	cx = ax
	ax = 0x42<16>
	di = dx
	dx_ax = Mem0[ss:bp - 14<i16>:word16] *u32 ax
	SCZO = cond(dx_ax)
	dx = di
	di = ax
	Mem0[es:bx + 26<i16> + di:word16] = cx
	Mem0[es:bx + 28<i16> + di:word16] = dx
	goto l3CEE_649B
	// succ:  l3CEE_649B
l3CEE_6502:
	ax = Mem0[ss:bp - 18<i16>:word16]
	SCZO = cond(Mem0[ss:bp - 2<i16>:word16] - ax)
	branch Test(UGT,CZ) l3CEE_655A
	// succ:  l3CEE_650A l3CEE_655A
l3CEE_650A:
	v45 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v45
	call fn3B5D_017C (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	SZP = cond(al & 1<8>)
	O = false
	C = false
	branch Test(EQ,Z) l3CEE_655A
	// succ:  l3CEE_6519 l3CEE_655A
l3CEE_6519:
	Mem0[ss:bp - 14<i16>:word16] = 0<16>
	goto l3CEE_6523
	// succ:  l3CEE_6523
l3CEE_6520:
	v52 = Mem0[ss:bp - 14<i16>:word16] + 1<16>
	Mem0[ss:bp - 14<i16>:word16] = v52
	SZO = cond(v52)
	// succ:  l3CEE_6523
l3CEE_6523:
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = Mem0[ss:bp - 14<i16>:word16]
	SCZO = cond(Mem0[es:bx + 4<i16>:word16] - ax)
	branch Test(ULE,CZ) l3CEE_658D
	// succ:  l3CEE_6530 l3CEE_658D
l3CEE_6530:
	v50 = Mem0[ss:bp - 2<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v50
	call fn3B5D_0252 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	es_bx = Mem0[es:bx + 6<i16>:segptr32]
	cx = ax
	ax = 0x42<16>
	si = dx
	dx_ax = Mem0[ss:bp - 14<i16>:word16] *u32 ax
	SCZO = cond(dx_ax)
	di = ax
	Mem0[es:bx + 26<i16> + di:word16] = cx
	Mem0[es:bx + 28<i16> + di:word16] = si
	goto l3CEE_6520
	// succ:  l3CEE_6520
l3CEE_655A:
	Mem0[ss:bp - 14<i16>:word16] = 0<16>
	goto l3CEE_6580
	// succ:  l3CEE_6580
l3CEE_6562:
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	es_bx = Mem0[es:bx + 6<i16>:segptr32]
	ax = 0x42<16>
	dx_ax = Mem0[ss:bp - 14<i16>:word16] *u32 ax
	SCZO = cond(dx_ax)
	si = ax
	ax = 0x6066<16>
	Mem0[es:bx + 26<i16> + si:word16] = ax
	Mem0[es:bx + 28<i16> + si:word16] = ds
	v57 = Mem0[ss:bp - 14<i16>:word16] + 1<16>
	Mem0[ss:bp - 14<i16>:word16] = v57
	SZO = cond(v57)
	// succ:  l3CEE_6580
l3CEE_6580:
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = Mem0[ss:bp - 14<i16>:word16]
	SCZO = cond(Mem0[es:bx + 4<i16>:word16] - ax)
	branch Test(UGT,CZ) l3CEE_6562
	// succ:  l3CEE_658D l3CEE_6562
l3CEE_658D:
	call fn3CEE_5556 (retsize: 4;)
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	SCZO = cond(Mem0[es:bx + 26<i16>:word16] - 1<16>)
	ax = ax - ax - C
	SCZO = cond(ax)
	C = ax != 0<16>
	ax = -ax
	SZO = cond(ax)
	Mem0[ss:bp - 16<i16>:word16] = ax
	SCZO = cond(Mem0[ss:bp - 16<i16>:word16] - 0<16>)
	branch Test(EQ,Z) l3CEE_65AA
	// succ:  l3CEE_65A7 l3CEE_65AA
l3CEE_65A7:
	// succ:  l3CEE_65A7_thunk_fn3CEE_67B9
l3CEE_65A7_thunk_fn3CEE_67B9:
	call fn3CEE_67B9 (retsize: 0;)
	return
	// succ:  fn3CEE_6121_exit
l3CEE_65AA:
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = Mem0[es:bx + 42<i16>:word16]
	ax = ax + 1<16>
	SZO = cond(ax)
	dx_ax = Mem0[es:bx + 26<i16>:word16] *u32 ax
	SCZO = cond(dx_ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn21DC_097E (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	Mem0[es:bx + 22<i16>:word16] = ax
	Mem0[es:bx + 24<i16>:word16] = dx
	ax = Mem0[es:bx + 42<i16>:word16]
	ax = ax << 1<16>
	SCZO = cond(ax)
	ax = ax + 2<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn21DC_097E (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	Mem0[es:bx + 74<i16>:word16] = ax
	Mem0[es:bx + 76<i16>:word16] = dx
	ax = Mem0[es:bx + 42<i16>:word16]
	ax = ax << 1<16>
	SCZO = cond(ax)
	ax = ax + 2<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn21DC_097E (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	Mem0[es:bx + 78<i16>:word16] = ax
	Mem0[es:bx + 80<i16>:word16] = dx
	ax = Mem0[es:bx + 42<i16>:word16]
	ax = ax << 1<16>
	SCZO = cond(ax)
	ax = ax << 1<16>
	SCZO = cond(ax)
	ax = ax + 4<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn21DC_097E (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	// succ:  l3CEE_661C_thunk_fn3CEE_6620
l3CEE_661C_thunk_fn3CEE_6620:
	call fn3CEE_6620 (retsize: 0;)
	return
	// succ:  fn3CEE_6121_exit
fn3CEE_6121_exit:


// fn3CEE_661D
// Return size: 4
define fn3CEE_661D
fn3CEE_661D_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_661D
l3CEE_661D:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	v6 = Mem0[ss:bp + si:byte]
	Mem0[ss:bp + si:byte] = bh
	bh = v6
	// succ:  l3CEE_661E_thunk_fn3CEE_6620
l3CEE_661E_thunk_fn3CEE_6620:
	call fn3CEE_6620 (retsize: 0;)
	return
	// succ:  fn3CEE_661D_exit
fn3CEE_661D_exit:


// fn3CEE_6620
// Return size: 0
define fn3CEE_6620
fn3CEE_6620_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_6620
l3CEE_6620:
	Mem0[es:bx + 82<i16>:word16] = ax
	Mem0[es:bx + 84<i16>:word16] = dx
	ax = Mem0[es:bx + 42<i16>:word16]
	ax = ax << 1<16>
	SCZO = cond(ax)
	ax = ax + 2<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v10 = Mem0[es:bx + 76<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v10
	v11 = Mem0[es:bx + 74<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v11
	call fn2017_0228 (retsize: 4;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = Mem0[es:bx + 42<i16>:word16]
	ax = ax << 1<16>
	SCZO = cond(ax)
	ax = ax + 2<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v14 = Mem0[es:bx + 80<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v14
	v15 = Mem0[es:bx + 78<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v15
	call fn2017_0228 (retsize: 4;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = Mem0[es:bx + 42<i16>:word16]
	ax = ax << 1<16>
	SCZO = cond(ax)
	ax = ax << 1<16>
	SCZO = cond(ax)
	ax = ax + 4<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v16 = Mem0[es:bx + 84<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v16
	v17 = Mem0[es:bx + 82<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v17
	call fn2017_0228 (retsize: 4;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = Mem0[es:bx + 38<i16>:word16]
	Mem0[es:bx + 46<i16>:word16] = ax
	Mem0[es:bx + 48<i16>:word16] = ax
	ax = Mem0[es:bx + 40<i16>:word16]
	ax = ax + 1<16>
	SZO = cond(ax)
	Mem0[es:bx + 50<i16>:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn3CEE_3B84 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	Mem0[es:bx + 64<i16>:word16] = ax
	Mem0[es:bx + 66<i16>:word16] = 0<16>
	Mem0[es:bx + 44<i16>:word16] = 0<16>
	Mem0[es:bx + 52<i16>:word16] = 0<16>
	ax = ax - ax
	SCZO = cond(ax)
	Mem0[es:bx + 62<i16>:word16] = ax
	Mem0[es:bx + 60<i16>:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn3CEE_3E50 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	call fn1F38_0552 (retsize: 4;)
	Mem0[ss:bp - 8<i16>:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_0527 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 14<i16>:word16] = 0<16>
	goto l3CEE_66F0_thunk_fn3CEE_66FF
	// succ:  l3CEE_66F0_thunk_fn3CEE_66FF
l3CEE_6620:
	Mem0[es:bx + 82<i16>:word16] = ax
	Mem0[es:bx + 84<i16>:word16] = dx
	ax = Mem0[es:bx + 42<i16>:word16]
	ax = ax << 1<16>
	SCZO = cond(ax)
	ax = ax + 2<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v21 = Mem0[es:bx + 76<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v21
	v22 = Mem0[es:bx + 74<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v22
	call fn2017_0228 (retsize: 4;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = Mem0[es:bx + 42<i16>:word16]
	ax = ax << 1<16>
	SCZO = cond(ax)
	ax = ax + 2<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v23 = Mem0[es:bx + 80<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v23
	v24 = Mem0[es:bx + 78<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v24
	call fn2017_0228 (retsize: 4;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = Mem0[es:bx + 42<i16>:word16]
	ax = ax << 1<16>
	SCZO = cond(ax)
	ax = ax << 1<16>
	SCZO = cond(ax)
	ax = ax + 4<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v25 = Mem0[es:bx + 84<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v25
	v26 = Mem0[es:bx + 82<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v26
	call fn2017_0228 (retsize: 4;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = Mem0[es:bx + 38<i16>:word16]
	Mem0[es:bx + 46<i16>:word16] = ax
	Mem0[es:bx + 48<i16>:word16] = ax
	ax = Mem0[es:bx + 40<i16>:word16]
	ax = ax + 1<16>
	SZO = cond(ax)
	Mem0[es:bx + 50<i16>:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn3CEE_3B84 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	Mem0[es:bx + 64<i16>:word16] = ax
	Mem0[es:bx + 66<i16>:word16] = 0<16>
	Mem0[es:bx + 44<i16>:word16] = 0<16>
	Mem0[es:bx + 52<i16>:word16] = 0<16>
	ax = ax - ax
	SCZO = cond(ax)
	Mem0[es:bx + 62<i16>:word16] = ax
	Mem0[es:bx + 60<i16>:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn3CEE_3E50 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	call fn1F38_0552 (retsize: 4;)
	Mem0[ss:bp - 8<i16>:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn1F38_0527 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 14<i16>:word16] = 0<16>
	goto l3CEE_66F0_thunk_fn3CEE_66FF
	// succ:  l3CEE_66F0_thunk_fn3CEE_66FF
l3CEE_66F0_thunk_fn3CEE_66FF:
	call fn3CEE_66FF (retsize: 0;)
	return
	// succ:  fn3CEE_6620_exit
l3CEE_66F0_thunk_fn3CEE_66FF:
	call fn3CEE_66FF (retsize: 0;)
	return
	// succ:  fn3CEE_6620_exit
fn3CEE_6620_exit:


// fn3CEE_66FF
// Return size: 0
define fn3CEE_66FF
fn3CEE_66FF_entry:
	sp = fp
	Top = 0<i8>
	goto l3CEE_66FF
	// succ:  l3CEE_66FF
l3CEE_66F2:
	v29 = Mem0[ss:bp - 14<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v29
	call fn3CEE_4188 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	v30 = Mem0[ss:bp - 14<i16>:word16] + 1<16>
	Mem0[ss:bp - 14<i16>:word16] = v30
	SZO = cond(v30)
	// succ:  l3CEE_66FF
l3CEE_66FF:
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = Mem0[ss:bp - 14<i16>:word16]
	SCZO = cond(Mem0[es:bx + 38<i16>:word16] - ax)
	branch Test(UGT,CZ) l3CEE_66F2
	// succ:  l3CEE_670C l3CEE_66F2
l3CEE_670C:
	ax = Mem0[es:bx + 40<i16>:word16]
	ax = ax + 1<16>
	SZO = cond(ax)
	Mem0[ss:bp - 14<i16>:word16] = ax
	goto l3CEE_6723
	// succ:  l3CEE_6723
l3CEE_6716:
	v27 = Mem0[ss:bp - 14<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v27
	call fn3CEE_4188 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	v28 = Mem0[ss:bp - 14<i16>:word16] + 1<16>
	Mem0[ss:bp - 14<i16>:word16] = v28
	SZO = cond(v28)
	// succ:  l3CEE_6723
l3CEE_6723:
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = Mem0[ss:bp - 14<i16>:word16]
	SCZO = cond(Mem0[es:bx + 42<i16>:word16] - ax)
	branch Test(UGE,C) l3CEE_6716
	// succ:  l3CEE_6730 l3CEE_6716
l3CEE_6730:
	call fn3CEE_4EAC (retsize: 4;)
	v16 = Mem0[ss:bp - 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v16
	call fn1F38_0527 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = Mem0[es:bx + 42<i16>:word16]
	ax = ax + 1<16>
	SZO = cond(ax)
	dx_ax = Mem0[es:bx + 26<i16>:word16] *u32 ax
	SCZO = cond(dx_ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v18 = Mem0[es:bx + 24<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v18
	v19 = Mem0[es:bx + 22<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v19
	call fn21DC_09B4 (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = Mem0[es:bx + 42<i16>:word16]
	ax = ax << 1<16>
	SCZO = cond(ax)
	ax = ax + 2<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v20 = Mem0[es:bx + 76<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v20
	v21 = Mem0[es:bx + 74<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v21
	call fn21DC_09B4 (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = Mem0[es:bx + 42<i16>:word16]
	ax = ax << 1<16>
	SCZO = cond(ax)
	ax = ax + 2<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v22 = Mem0[es:bx + 80<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v22
	v23 = Mem0[es:bx + 78<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v23
	call fn21DC_09B4 (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	ax = Mem0[es:bx + 42<i16>:word16]
	ax = ax << 1<16>
	SCZO = cond(ax)
	ax = ax << 1<16>
	SCZO = cond(ax)
	ax = ax + 4<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v24 = Mem0[es:bx + 84<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v24
	v25 = Mem0[es:bx + 82<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v25
	call fn21DC_09B4 (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	// succ:  l3CEE_67B6_thunk_fn3CEE_67B9
l3CEE_67B6_thunk_fn3CEE_67B9:
	call fn3CEE_67B9 (retsize: 0;)
	return
	// succ:  fn3CEE_66FF_exit
fn3CEE_66FF_exit:


// fn3CEE_67B9
// Return size: 0
define fn3CEE_67B9
fn3CEE_67B9_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_67B9
l3CEE_67B9:
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	SCZO = cond(Mem0[es:bx + 4<i16>:word16] - 0<16>)
	branch Test(EQ,Z) l3CEE_67DC_in_fn3CEE_67B9
	goto l3CEE_67C2_thunk_fn3CEE_67C4
	// succ:  l3CEE_67C2_thunk_fn3CEE_67C4 l3CEE_67DC_in_fn3CEE_67B9
l3CEE_67B9:
	es_bx = Mem0[ds:0x3A86<16>:segptr32]
	SCZO = cond(Mem0[es:bx + 4<i16>:word16] - 0<16>)
	branch Test(EQ,Z) l3CEE_67DC
	goto l3CEE_67C2_thunk_fn3CEE_67C4
	// succ:  l3CEE_67C2_thunk_fn3CEE_67C4 l3CEE_67C2_thunk_fn3CEE_67C4
l3CEE_67C2_thunk_fn3CEE_67C4:
	call fn3CEE_67C4 (retsize: 0;)
	return
	// succ:  fn3CEE_67B9_exit
l3CEE_67C2_thunk_fn3CEE_67C4:
	call fn3CEE_67C4 (retsize: 0;)
	return
	// succ:  fn3CEE_67B9_exit
l3CEE_67C2_thunk_fn3CEE_67C4:
	call fn3CEE_67C4 (retsize: 0;)
	return
	// succ:  fn3CEE_67B9_exit
l3CEE_67DC_in_fn3CEE_67B9:
	ax = 0x58<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v12 = Mem0[ds:0x3A88<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v12
	v13 = Mem0[ds:0x3A86<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v13
	call fn21DC_09B4 (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	ax = Mem0[ss:bp - 6<i16>:word16]
	dx = Mem0[ss:bp - 4<i16>:word16]
	Mem0[ds:0x3A86<16>:word16] = ax
	Mem0[ds:0x3A88<16>:word16] = dx
	SCZO = cond(Mem0[ss:bp - 16<i16>:word16] - 1<16>)
	ax = ax - ax - C
	SCZO = cond(ax)
	C = ax != 0<16>
	ax = -ax
	SZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn3B5D_05D0 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	di = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn3CEE_67B9_exit
fn3CEE_67B9_exit:


// fn3CEE_67C4
// Return size: 0
define fn3CEE_67C4
fn3CEE_67C4_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_67C4
l3CEE_67C4:
	ax = 0x42<16>
	dx_ax = Mem0[es:bx + 4<i16>:word16] *u32 ax
	SCZO = cond(dx_ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v11 = Mem0[es:bx + 8<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v11
	v12 = Mem0[es:bx + 6<i16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v12
	call fn21DC_09B4 (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	// succ:  l3CEE_67DC
l3CEE_67DC:
	ax = 0x58<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v14 = Mem0[ds:0x3A88<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v14
	v15 = Mem0[ds:0x3A86<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v15
	call fn21DC_09B4 (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	ax = Mem0[ss:bp - 6<i16>:word16]
	dx = Mem0[ss:bp - 4<i16>:word16]
	Mem0[ds:0x3A86<16>:word16] = ax
	Mem0[ds:0x3A88<16>:word16] = dx
	SCZO = cond(Mem0[ss:bp - 16<i16>:word16] - 1<16>)
	ax = ax - ax - C
	SCZO = cond(ax)
	C = ax != 0<16>
	ax = -ax
	SZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn3B5D_05D0 (retsize: 4;)
	sp = sp + 2<16>
	SCZO = cond(sp)
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	di = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn3CEE_67C4_exit
fn3CEE_67C4_exit:


