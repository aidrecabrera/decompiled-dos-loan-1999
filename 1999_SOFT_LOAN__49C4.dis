// fn3CEE_CE21
// Return size: 4
define fn3CEE_CE21
fn3CEE_CE21_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l3CEE_CE21
l3CEE_CE21:
	branch Test(EQ,Z) l3CEE_CE88
	// succ:  l3CEE_CE23 l3CEE_CE88
l3CEE_CE23:
	branch Test(ULT,C) l3CEE_CE98
	// succ:  l3CEE_CE25 l3CEE_CE98
l3CEE_CE25:
	v9 = Mem0[ds:bx + 102<i16>:byte] & ch
	Mem0[ds:bx + 102<i16>:byte] = v9
	SZ = cond(Mem0[ds:bx + 102<i16>:byte])
	O = false
	C = false
	v14 = Mem0[ds:si + 101<i16>:byte] & ah
	Mem0[ds:si + 101<i16>:byte] = v14
	SZ = cond(Mem0[ds:si + 101<i16>:byte])
	O = false
	C = false
	branch Test(UGE,C) l3CEE_CE96
	// succ:  l3CEE_CE2D l3CEE_CE96
l3CEE_CE2D:
	branch Test(ULT,C) l3CEE_CE94
	// succ:  l3CEE_CE2F l3CEE_CE94
l3CEE_CE2F:
	v17 = Mem0[fs:bp + 97<i16>:byte] & ch
	Mem0[fs:bp + 97<i16>:byte] = v17
	SZ = cond(Mem0[fs:bp + 97<i16>:byte])
	O = false
	C = false
	ax = __in<word16>(dx)
	di = di + 2<i16>
	SCZO = cond(ah - Mem0[gs:bx + si:byte])
	v24 = Mem0[ds:bx - 79<i16>:byte] + bh
	Mem0[ds:bx - 79<i16>:byte] = v24
	SCZO = cond(v24)
	dx = dx - 1<16>
	SZO = cond(dx)
	v26 = di
	di = ax
	ax = v26
	al = al + 0x40<8>
	SCZO = cond(al)
	ax = Mem0[ds:bx + 33<i16> + si:word16] *s 0<16>
	SCZO = cond(ax)
	FPUF = cond(ST[Top:real64] - Mem0[ds:di:real32])
	Top = Top + 1<i8>
	ax = ax - 1<16>
	SZO = cond(ax)
	Mem0[ds:0xC61B<16>:byte] = al
	v30 = Mem0[ds:bx + si:byte] - al - C
	Mem0[ds:bx + si:byte] = v30
	SCZO = cond(v30)
	SCZO = ah
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	cl = cl + cl
	SCZO = cond(cl)
	v33 = Mem0[ds:bx + si:word16] + ax
	Mem0[ds:bx + si:word16] = v33
	SCZO = cond(v33)
	FPUF = cond(ST[Top:real64] - Mem0[ds:si:real32])
	Top = Top + 0<i8>
	v34 = Mem0[ss:bp - 40<i16>:byte] + al
	Mem0[ss:bp - 40<i16>:byte] = v34
	SCZO = cond(v34)
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	v35 = Mem0[ds:bx + 0xD8DD<16> + di:byte] + cl
	Mem0[ds:bx + 0xD8DD<16> + di:byte] = v35
	SCZO = cond(v35)
	Z = __arpl(Mem0[ds:bx + si:word16], bx, &Mem0[ds:bx + si:word16])
	Mem0[ds:bx + 0x17<16> + di:word16] = bx
	__out<word16>(dx, ax)
	dx_ax = CONVERT(ax, int16, int32)
	v37 = Mem0[ds:bx + si:byte] - al - C
	Mem0[ds:bx + si:byte] = v37
	SCZO = cond(v37)
	dx_ax = CONVERT(ax, int16, int32)
	di = di - 1<16>
	SZO = cond(di)
	v39 = Mem0[ss:bp + 0x68<16>:byte] + bl
	Mem0[ss:bp + 0x68<16>:byte] = v39
	SCZO = cond(v39)
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	ax = ax + 0xD800<16>
	SCZO = cond(ax)
	ds = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	v40 = Mem0[ss:bp - 121<i16>:byte] + al
	Mem0[ss:bp - 121<i16>:byte] = v40
	SCZO = cond(v40)
	SCZO = ah
	ax = Mem0[ds:bx + si:word16] *s 0x99BA<16>
	SCZO = cond(ax)
	ax = ax | 0x1200<16>
	SZ = cond(ax)
	O = false
	C = false
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = cs
	cx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	v43 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v43
	SCZO = cond(v43)
	al = al ^ 0<8>
	SZ = cond(al)
	O = false
	C = false
	v44 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v44
	SCZO = cond(v44)
	v45 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v45
	SCZO = cond(v45)
	v46 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v46
	SCZO = cond(v46)
	// succ:  l3CEE_CE88
l3CEE_CE88:
	v47 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v47
	SCZO = cond(v47)
	v48 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v48
	SCZO = cond(v48)
	v49 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v49
	SCZO = cond(v49)
	v50 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v50
	SCZO = cond(v50)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	bx = bx ^ bx
	SZ = cond(bx)
	O = false
	C = false
	goto l3CEE_CE95
	// succ:  l3CEE_CE95
l3CEE_CE94:
	Mem0[ds:bx + 0<16> + si:real80] = CONVERT(ST[Top:real64], real64, real80)
	Top = Top + 1<i8>
	goto l3CEE_CE98
	// succ:  l3CEE_CE98
l3CEE_CE95:
	ax = 0<16>
	goto l3CEE_CE98
	// succ:  l3CEE_CE98
l3CEE_CE96:
	v51 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v51
	SCZO = cond(v51)
	// succ:  l3CEE_CE98
l3CEE_CE98:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bx
	ax = 0x4CF0<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bx
	ax = 0x1D<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = cs
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn3BC2_0000 (retsize: 4;)
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn3CEE_CE21_exit
fn3CEE_CE21_exit:


